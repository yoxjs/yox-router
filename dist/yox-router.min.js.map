{"version":3,"file":"yox-router.min.js","sources":["../../yox-config/src/config.ts","../../yox-common/src/util/env.ts","../src/Hooks.ts","../src/constant.ts","../src/util/value.ts","../src/mode/hash.ts","../src/mode/history.ts","../src/index.ts","../src/util/query.ts"],"sourcesContent":["export const SYNTAX_IF = '#if'\nexport const SYNTAX_ELSE = 'else'\nexport const SYNTAX_ELSE_IF = 'else if'\nexport const SYNTAX_EACH = '#each'\nexport const SYNTAX_PARTIAL = '#partial'\nexport const SYNTAX_IMPORT = '>'\nexport const SYNTAX_SPREAD = '...'\nexport const SYNTAX_COMMENT = /^!\\s/\n\nexport const SLOT_DATA_PREFIX = '$slot_'\nexport const SLOT_NAME_DEFAULT = 'children'\n\nexport const HINT_STRING = 1\nexport const HINT_NUMBER = 2\nexport const HINT_BOOLEAN = 3\n\nexport const DIRECTIVE_ON = 'on'\nexport const DIRECTIVE_LAZY = 'lazy'\nexport const DIRECTIVE_MODEL = 'model'\nexport const DIRECTIVE_EVENT = 'event'\nexport const DIRECTIVE_BINDING = 'binding'\nexport const DIRECTIVE_CUSTOM = 'o'\n\nexport const HOOK_BEFORE_CREATE = 'beforeCreate'\nexport const HOOK_AFTER_CREATE = 'afterCreate'\nexport const HOOK_BEFORE_MOUNT = 'beforeMount'\nexport const HOOK_AFTER_MOUNT = 'afterMount'\nexport const HOOK_BEFORE_UPDATE = 'beforeUpdate'\nexport const HOOK_AFTER_UPDATE = 'afterUpdate'\nexport const HOOK_BEFORE_DESTROY = 'beforeDestroy'\nexport const HOOK_AFTER_DESTROY = 'afterDestroy'\n\n// 路由钩子\nexport const HOOK_BEFORE_ROUTE_ENTER = 'beforeRouteEnter'\nexport const HOOK_AFTER_ROUTE_ENTER = 'afterRouteEnter'\nexport const HOOK_BEFORE_ROUTE_UPDATE = 'beforeRouteUpdate'\nexport const HOOK_AFTER_ROUTE_UPDATE = 'afterRouteUpdate'\nexport const HOOK_BEFORE_ROUTE_LEAVE = 'beforeRouteLeave'\nexport const HOOK_AFTER_ROUTE_LEAVE = 'afterRouteLeave'\n","/**\n * 为了压缩，定义的常量\n */\nexport const TRUE = true\nexport const FALSE = false\nexport const NULL = null\nexport const UNDEFINED = void 0\n\nexport const RAW_TRUE = 'true'\nexport const RAW_FALSE = 'false'\nexport const RAW_NULL = 'null'\nexport const RAW_UNDEFINED = 'undefined'\n\nexport const RAW_KEY = 'key'\nexport const RAW_REF = 'ref'\nexport const RAW_SLOT = 'slot'\nexport const RAW_NAME = 'name'\n\nexport const RAW_FILTER = 'filter'\nexport const RAW_PARTIAL = 'partial'\nexport const RAW_COMPONENT = 'component'\nexport const RAW_DIRECTIVE = 'directive'\nexport const RAW_TRANSITION = 'transition'\n\nexport const RAW_THIS = 'this'\nexport const RAW_VALUE = 'value'\nexport const RAW_LENGTH = 'length'\nexport const RAW_FUNCTION = 'function'\nexport const RAW_TEMPLATE = 'template'\nexport const RAW_WILDCARD = '*'\n\nexport const KEYPATH_PARENT = '..'\nexport const KEYPATH_CURRENT = RAW_THIS\n\nexport const RAW_MINUS_ONE = -1\n\n/**\n * Single instance for window in browser\n */\nexport const WINDOW = typeof window !== RAW_UNDEFINED ? window : UNDEFINED\n\n/**\n * Single instance for document in browser\n */\nexport const DOCUMENT = typeof document !== RAW_UNDEFINED ? document : UNDEFINED\n\n/**\n * tap 事件\n *\n * 非常有用的抽象事件，比如 pc 端是 click 事件，移动端是 touchend 事件\n *\n * 这样只需 on-tap=\"handler\" 就可以完美兼容各端\n *\n * 框架未实现此事件，通过 Yox.dom.specialEvents 提供给外部扩展\n *\n */\nexport const EVENT_TAP = 'tap'\n\n/**\n * 点击事件\n */\nexport const EVENT_CLICK = 'click'\n\n/**\n * 输入事件\n */\nexport const EVENT_INPUT = 'input'\n\n/**\n * 变化事件\n */\nexport const EVENT_CHANGE = 'change'\n\n/**\n * 唯一内置的特殊事件：model\n */\nexport const EVENT_MODEL = 'model'\n\n/**\n * Single instance for noop function\n */\nexport const EMPTY_FUNCTION = function () {\n  /** yox */\n}\n\n/**\n * 空对象，很多地方会用到，比如 `a || EMPTY_OBJECT` 确保是个对象\n */\nexport const EMPTY_OBJECT = Object.freeze({})\n\n/**\n * 空数组\n */\nexport const EMPTY_ARRAY = Object.freeze([])\n\n/**\n * 空字符串\n */\nexport const EMPTY_STRING = ''","import Task from '../../yox-type/src/interface/Task'\nimport Location from '../../yox-type/src/router/Location'\n\nimport * as type from './type'\n\nexport default class Hooks {\n\n  list: Task[]\n\n  to: Location\n\n  from: Location | void\n\n  setLocation(to: Location, from: Location | void) {\n    this.to = to\n    this.from = from\n    return this\n  }\n\n  clear() {\n    this.list = []\n    return this\n  }\n\n  add(hook: Function | void, ctx: any) {\n    const { list } = this\n    if (hook) {\n      list.push({\n        fn: hook,\n        ctx,\n      })\n    }\n    return this\n  }\n\n  next(next: Function, isGuard?: boolean, callback?: type.Callback) {\n    const task = this.list.shift()\n    if (task) {\n      if (isGuard) {\n        task.fn.call(task.ctx, this.to, this.from, next)\n      }\n      else {\n        task.fn.call(task.ctx, this.to, this.from)\n        next()\n      }\n    }\n    else if (callback) {\n      callback()\n    }\n  }\n\n}","export const WINDOW = window\n\nexport const LOCATION = WINDOW.location\nexport const HISTORY = WINDOW.history\n\n// path 中的参数前缀，如 /user/:userId\nexport const PREFIX_PARAM = ':'\n\n// path 分隔符\nexport const SEPARATOR_PATH = '/'\n\n// path 和 search 的分隔符\nexport const SEPARATOR_SEARCH = '?'\n\n// query 分隔符\nexport const SEPARATOR_QUERY = '&'\n\n// 键值对分隔符\nexport const SEPARATOR_PAIR = '='\n\n// 参数中的数组标识\nexport const FLAG_ARRAY = '[]'\n\n// 导航钩子 - 路由进入之前\nexport const HOOK_BEFORE_ENTER = 'beforeEnter'\n\n// 导航钩子 - 路由进入之后\nexport const HOOK_AFTER_ENTER = 'afterEnter'\n\n// 导航钩子 - 路由更新之前\nexport const HOOK_BEFORE_UPDATE = 'beforeUpdate'\n\n// 导航钩子 - 路由更新之后\nexport const HOOK_AFTER_UPDATE = 'afterUpdate'\n\n// 导航钩子 - 路由离开之前\nexport const HOOK_BEFORE_LEAVE = 'beforeLeave'\n\n// 导航钩子 - 路由离开之后\nexport const HOOK_AFTER_LEAVE = 'afterLeave'","import * as env from '../../../yox-common/src/util/env'\nimport YoxClass from '../../../yox-type/src/interface/YoxClass'\n\n/**\n * 把字符串 value 解析成最合适的类型\n */\nexport function parse(Yox: YoxClass, value: string) {\n  let result: any\n  if (Yox.is.numeric(value)) {\n    result = +value\n  }\n  else if (Yox.is.string(value)) {\n    if (value === env.RAW_TRUE) {\n      result = env.TRUE\n    }\n    else if (value === env.RAW_FALSE) {\n      result = env.FALSE\n    }\n    else if (value === env.RAW_NULL) {\n      result = env.NULL\n    }\n    else if (value === env.RAW_UNDEFINED) {\n      result = env.UNDEFINED\n    }\n    else {\n      result = decodeURIComponent(value)\n    }\n  }\n  return result\n}\n\nexport function stringify(Yox: YoxClass, value: any): string {\n  if (Yox.is.string(value)) {\n    return encodeURIComponent(value)\n  }\n  else if (Yox.is.number(value) || Yox.is.boolean(value)) {\n    return value.toString()\n  }\n  else if (value === env.NULL) {\n    return env.RAW_NULL\n  }\n  return env.RAW_UNDEFINED\n}","import * as type from '../../../yox-type/src/type'\n\nimport API from '../../../yox-type/src/interface/API'\nimport Location from '../../../yox-type/src/router/Location'\n\nimport * as constant from '../constant'\n\n// hash 前缀，Google 的规范是 #! 开头，如 #!/path/sub?key=value\nconst HASH_PREFIX = '#!',\n\nHASH_CHANGE = 'hashchange'\n\nexport function start(domApi: API, handler: Function) {\n  domApi.on(constant.WINDOW, HASH_CHANGE, handler as type.listener)\n  handler()\n}\n\nexport function stop(domApi: API, handler: Function) {\n  domApi.off(constant.WINDOW, HASH_CHANGE, handler as type.listener)\n}\n\nexport function push(location: Location, handler: Function) {\n  constant.LOCATION.hash = HASH_PREFIX + location.url\n}\n\nexport function go(n: number, handler: Function) {\n  constant.HISTORY.go(n)\n}\n\nexport function current() {\n  // 不能直接读取 window.location.hash\n  // 因为 Firefox 会做 pre-decode\n  let href = constant.LOCATION.href, index = href.indexOf(HASH_PREFIX), url = constant.SEPARATOR_PATH\n  if (index > 0) {\n    url = href.substr(index + HASH_PREFIX.length)\n  }\n  return url\n}\n","import * as type from '../../../yox-type/src/type'\n\nimport API from '../../../yox-type/src/interface/API'\nimport Location from '../../../yox-type/src/router/Location'\n\nimport * as constant from '../constant'\n\nconst POP_STATE = 'popstate'\n\nexport const isSupported = 'pushState' in constant.HISTORY\n\nexport function start(domApi: API, handler: Function) {\n  domApi.on(constant.WINDOW, POP_STATE, handler as type.listener)\n  handler()\n}\n\nexport function stop(domApi: API, handler: Function) {\n  domApi.off(constant.WINDOW, POP_STATE, handler as type.listener)\n}\n\nexport function push(location: Location, handler: Function) {\n  constant.HISTORY.pushState({}, '', location.url)\n  handler()\n}\n\nexport function go(n: number, handler: Function) {\n  constant.HISTORY.go(n)\n  handler()\n}\n\nexport function current() {\n  return constant.LOCATION.pathname + constant.LOCATION.search\n}\n","import * as config from '../../yox-config/src/config'\nimport * as type from '../../yox-type/src/type'\nimport * as routerType from './type'\n\nimport * as env from '../../yox-common/src/util/env'\n\nimport API from '../../yox-type/src/interface/API'\nimport Yox from '../../yox-type/src/interface/Yox'\nimport YoxClass from '../../yox-type/src/interface/YoxClass'\n\nimport YoxOptions from '../../yox-type/src/options/Yox'\nimport VNode from '../../yox-type/src/vnode/VNode'\nimport Directive from '../../yox-type/src/vnode/Directive'\nimport CustomEvent from '../../yox-type/src/event/CustomEvent'\n\nimport Location from '../../yox-type/src/router/Location'\nimport RouteTarget from '../../yox-type/src/router/RouteTarget'\n\nimport Hooks from './Hooks'\nimport * as constant from './constant'\nimport * as queryUtil from './util/query'\nimport * as valueUtil from './util/value'\n\nimport * as hashMode from './mode/hash'\nimport * as historyMode from './mode/history'\n\nlet Yox: YoxClass, domApi: API, guid = 0\n\nconst ROUTER = '$router',\n\nROUTE = '$route',\n\nROUTE_VIEW = '$routeView',\n\nROUTE_COMPONENT = 'RouteComponent',\n\nEVENT_CLICK = 'click'\n\n/**\n * 格式化路径，确保它以 / 开头，不以 / 结尾\n */\nfunction formatPath(path: string, parentPath: string | void) {\n\n  // 如果不是 / 开头，表示是相对路径\n  if (!Yox.string.startsWith(path, constant.SEPARATOR_PATH)) {\n    // 确保 parentPath 以 / 结尾\n    if (parentPath) {\n      if (!Yox.string.endsWith(parentPath, constant.SEPARATOR_PATH)) {\n        parentPath += constant.SEPARATOR_PATH\n      }\n    }\n    else {\n      parentPath = constant.SEPARATOR_PATH\n    }\n    path = parentPath + path\n  }\n\n  // 如果 path 以 / 结尾，删掉它\n  if (path !== constant.SEPARATOR_PATH\n    && Yox.string.endsWith(path, constant.SEPARATOR_PATH)\n  ) {\n    path = Yox.string.slice(path, 0, -constant.SEPARATOR_PATH.length)\n  }\n\n  return path\n\n}\n\n/**\n * 把结构化数据序列化成 url\n */\nfunction stringifyUrl(path: string, params: type.data | void, query: type.data | void) {\n\n  if (/\\/\\:\\w+/.test(path)) {\n\n    const terms: string[] = []\n\n    Yox.array.each(\n      path.split(constant.SEPARATOR_PATH),\n      function (item) {\n        terms.push(\n          Yox.string.startsWith(item, constant.PREFIX_PARAM) && params\n            ? params[item.substr(constant.PREFIX_PARAM.length)]\n            : item\n        )\n      }\n    )\n\n    path = terms.join(constant.SEPARATOR_PATH)\n\n  }\n\n  if (query) {\n    const queryStr = queryUtil.stringify(Yox, query)\n    if (queryStr) {\n      path += constant.SEPARATOR_SEARCH + queryStr\n    }\n  }\n\n  return path\n\n}\n\nfunction toUrl(target: routerType.Target, name2Path: type.data): string {\n\n  if (Yox.is.string(target)) {\n    return formatPath(target as string)\n  }\n\n  let route = target as RouteTarget, name = route.name, path: string\n  if (name) {\n    path = name2Path[name]\n    if (process.env.NODE_ENV === 'development') {\n      if (!Yox.is.string(path)) {\n        Yox.logger.error(`The route of name[${name}] is not found.`)\n      }\n    }\n  }\n  else {\n    path = formatPath(route.path as string)\n  }\n\n  return stringifyUrl(path, route.params, route.query)\n\n}\n\n/**\n * 按照 propTypes 定义的外部数据格式过滤路由参数，这样有两个好处：\n *\n * 1. 避免传入不符预期的数据\n * 2. 避免覆盖 data 定义的数据\n */\nfunction filterProps(route: routerType.LinkedRoute, location: Location, options: YoxOptions) {\n  const result: type.data = {}, propTypes = options.propTypes\n  if (propTypes) {\n\n    let props = location.query,\n\n    routeParams = route.params,\n\n    locationParams = location.params\n\n    // 从 location.params 挑出 route.params 定义过的参数\n    if (routeParams && locationParams) {\n      props = props ? Yox.object.copy(props) : {}\n      for (let i = 0, length = routeParams.length; i < length; i++) {\n        (props as type.data)[routeParams[i]] = locationParams[routeParams[i]]\n      }\n    }\n\n    if (props) {\n      for (let key in propTypes) {\n        result[key] = Yox.checkProp(key, props[key], propTypes[key])\n      }\n    }\n\n  }\n  return result\n}\n\n/**\n * 是否是叶子节点\n * 如果把叶子节点放在 if 中，会出现即使不是定义时的叶子节点，却是运行时的叶子节点\n */\nfunction isLeafRoute(route: routerType.LinkedRoute) {\n  const child = route.child\n  return !child || !child.context\n}\n\nfunction updateRoute(instance: Yox, hook: Function | void, componentHookName: string | void, hookName: string | undefined, upsert?: boolean) {\n  if (hook) {\n    hook(instance)\n  }\n  const route = instance[ROUTE] as routerType.LinkedRoute\n  if (route) {\n    route.context = upsert ? instance : env.UNDEFINED\n    if (isLeafRoute(route)) {\n      const router = instance[ROUTER] as Router\n      if (componentHookName && hookName) {\n        router.hook(route, componentHookName, hookName)\n      }\n      if (upsert) {\n        const { pending } = router\n        if (pending) {\n          pending.onComplete()\n          router.pending = env.UNDEFINED\n        }\n      }\n    }\n  }\n}\n\nexport class Router {\n\n  el: Element\n\n  options: routerType.RouterOptions\n\n  routes: routerType.LinkedRoute[]\n\n  route404: routerType.LinkedRoute\n\n  name2Path: Record<string, string>\n\n  path2Route: Record<string, routerType.LinkedRoute>\n\n  mode: typeof hashMode\n\n  history: Location[]\n\n  cursor: number\n\n  pending?: routerType.Pending\n\n  // 路由钩子\n  hooks: Hooks\n\n  // 路由或参数发生了变化会触发此函数\n  handler: Function\n\n  // 当前渲染的路由\n  route?: routerType.LinkedRoute\n\n  // 当前地址栏的路径和参数\n  location?: Location\n\n  constructor(options: routerType.RouterOptions) {\n\n    const instance = this, { el, route404 } = options\n\n    instance.options = options\n\n    instance.el = Yox.is.string(el)\n      ? domApi.find(el as string) as Element\n      : el as Element\n\n    if (process.env.NODE_ENV === 'development') {\n      if (!instance.el) {\n        Yox.logger.error(`router.el is not an element.`)\n        return\n      }\n      if (!route404) {\n        Yox.logger.error(`Route for 404 is required.`)\n        return\n      }\n    }\n\n    instance.mode = options.mode === 'history' && historyMode.isSupported ? historyMode : hashMode\n\n    instance.handler = function () {\n\n      const url = instance.mode.current(), { pending } = instance\n\n      if (pending) {\n        const { location } = pending\n        // 通过 push 或 go 触发\n        if (location.url === url) {\n          instance.setHistory(location, pending.cursor)\n          instance.setRoute(location)\n          return\n        }\n        instance.pending = env.UNDEFINED\n      }\n\n      // 直接修改地址栏触发\n      instance.parseLocation(\n        url,\n        function (location) {\n          if (location) {\n            instance.setHistory(location)\n            instance.setRoute(location)\n          }\n          else {\n            instance.push(instance.route404)\n          }\n        }\n      )\n    }\n\n    instance.routes = []\n    instance.name2Path = {}\n    instance.path2Route = {}\n\n    instance.history = []\n    instance.cursor = -1\n\n    instance.hooks = new Hooks()\n\n    Yox.array.each(\n      options.routes,\n      function (route) {\n        instance.add(route)\n      }\n    )\n\n    instance.route404 = instance.add(route404)[0]\n\n  }\n\n  /**\n   * 添加一个新的路由\n   */\n  add(routeOptions: routerType.RouteOptions) {\n\n    const instance = this,\n\n    newRoutes: routerType.LinkedRoute[] = [],\n\n    pathStack: string[] = [],\n\n    routeStack: routerType.LinkedRoute[] = [],\n\n    addRoute = function (routeOptions: routerType.RouteOptions) {\n\n      let { name, component, children, load } = routeOptions,\n\n      parentPath = Yox.array.last(pathStack),\n\n      parentRoute = Yox.array.last(routeStack),\n\n      path = formatPath(routeOptions.path, parentPath),\n\n      route: routerType.LinkedRoute = { path, route: routeOptions },\n\n      params: string[] = []\n\n      Yox.array.each(\n        path.split(constant.SEPARATOR_PATH),\n        function (item) {\n          if (Yox.string.startsWith(item, constant.PREFIX_PARAM)) {\n            params.push(\n              item.substr(constant.PREFIX_PARAM.length)\n            )\n          }\n        }\n      )\n\n      if (params.length) {\n        route.params = params\n      }\n\n      if (name) {\n        route.name = name\n      }\n\n      // component 和 load 二选一\n      if (component) {\n        route.component = component\n      }\n      else if (load) {\n        route.load = load\n      }\n\n      if (parentRoute) {\n        route.parent = parentRoute\n      }\n\n      if (children) {\n        pathStack.push(path)\n        routeStack.push(route)\n        Yox.array.each(\n          children,\n          addRoute\n        )\n        routeStack.pop()\n        pathStack.pop()\n      }\n      else {\n\n        newRoutes.push(route)\n        instance.routes.push(route)\n\n        if (name) {\n          if (process.env.NODE_ENV === 'development') {\n            if (Yox.object.has(instance.name2Path, name)) {\n              Yox.logger.error(`Name[${name}] of the route is existed.`)\n              return\n            }\n          }\n          instance.name2Path[name] = path\n        }\n\n        if (process.env.NODE_ENV === 'development') {\n          if (Yox.object.has(instance.path2Route, path)) {\n            Yox.logger.error(`path [${path}] of the route is existed.`)\n            return\n          }\n        }\n\n        instance.path2Route[path] = route\n\n      }\n\n    }\n\n    addRoute(routeOptions)\n\n    return newRoutes\n\n  }\n\n  /**\n   * 删除一个已注册的路由\n   */\n  remove(route: routerType.LinkedRoute) {\n\n    const instance = this\n\n    Yox.array.remove(instance.routes, route)\n\n    if (route.name) {\n      delete instance.name2Path[route.name]\n    }\n\n    delete instance.path2Route[route.path]\n\n  }\n\n  /**\n   * target 有 2 种格式：\n   *\n   * 如果只是简单的 path，直接传字符串\n   *\n   * push('/index')\n   *\n   * 如果需要带参数，可传对象\n   *\n   * push({\n   *   path: '/index',\n   *   params: { },\n   *   query: { }\n   * })\n   *\n   * 如果路由配置了 name，可用 name 代替 path，如下：\n   *\n   * push({\n   *   name: 'index'\n   * })\n   *\n   */\n  push(target: routerType.Target) {\n\n    const instance = this, { mode } = instance\n\n    instance.setUrl(\n      toUrl(target, instance.name2Path),\n      env.EMPTY_FUNCTION,\n      env.EMPTY_FUNCTION,\n      function (location, pending) {\n        instance.pending = pending\n        if (mode.current() !== location.url) {\n          mode.push(location, instance.handler)\n        }\n        else {\n          instance.setRoute(location)\n        }\n      }\n    )\n\n  }\n\n  /**\n   * 不改变 URL，只修改路由组件\n   */\n  replace(target: routerType.Target) {\n\n    const instance = this\n\n    instance.setUrl(\n      toUrl(target, instance.name2Path),\n      function () {\n        instance.replaceHistory(instance.location as Location)\n      },\n      env.EMPTY_FUNCTION,\n      function (location, pending) {\n        instance.pending = pending\n        instance.setRoute(location)\n      }\n    )\n\n  }\n\n  /**\n   * 前进或后退 n 步\n   */\n  go(n: number) {\n\n    const instance = this,\n\n    { mode } = instance,\n\n    cursor = instance.cursor + n,\n\n    location = instance.history[cursor]\n\n    if (location) {\n      instance.setUrl(\n        stringifyUrl(location.path, location.params, location.query),\n        env.EMPTY_FUNCTION,\n        env.EMPTY_FUNCTION,\n        function (location, pending) {\n          pending.cursor = cursor\n          instance.pending = pending\n\n          if (mode.current() !== location.url) {\n            mode.go(n, instance.handler)\n          }\n          else {\n            instance.setHistory(location, cursor)\n            instance.setRoute(location)\n          }\n        }\n      )\n    }\n\n  }\n\n  /**\n   * 启动路由\n   */\n  start() {\n    this.mode.start(domApi, this.handler)\n  }\n\n  /**\n   * 停止路由\n   */\n  stop() {\n    this.mode.stop(domApi, this.handler)\n  }\n\n  /**\n   * 钩子函数\n   */\n  hook(route: routerType.LinkedRoute, componentHook: string, hook: string, isGuard?: boolean, callback?: routerType.Callback) {\n\n    const instance = this, { location, hooks, pending } = instance\n\n    hooks\n      .clear()\n      // 先调用组件的钩子\n      .add((route.component as YoxOptions)[componentHook], route.context)\n      // 再调用路由配置的钩子\n      .add(route.route[hook], route.route)\n      // 最后调用路由实例的钩子\n      .add(instance.options[hook], instance)\n\n    const next = function (value?: false | routerType.Target) {\n      if (value === env.UNDEFINED) {\n        hooks.next(next, isGuard, callback)\n      }\n      else {\n        // 只有前置守卫才有可能走进这里\n        // 此时 instance.location 还是旧地址\n        if (pending) {\n          pending.onAbort()\n          instance.pending = env.UNDEFINED\n        }\n        if (value === env.FALSE) {\n          if (location) {\n            instance.push(location)\n          }\n        }\n        else {\n          // 跳转到别的路由\n          instance.push(value)\n        }\n      }\n    }\n\n    next()\n\n  }\n\n  private setHistory(location: Location, index: number | void) {\n\n    const { history, cursor } = this\n\n    // 如果没传 cursor，表示 push\n    if (!Yox.is.number(index)) {\n      index = cursor + 1\n      // 确保下一个为空\n      // 如果不为空，肯定是调用过 go()，此时直接清掉后面的就行了\n      if (history[index]) {\n        history.length = index\n      }\n    }\n\n    history[index as number] = location\n\n    this.cursor = index as number\n\n  }\n\n  private replaceHistory(location: Location) {\n    const { history, cursor } = this\n    if (history[cursor]) {\n      history[cursor] = location\n    }\n  }\n\n  private setUrl(\n    url: string,\n    onComplete: routerType.RouteComplete,\n    onAbort: routerType.RouteAbort,\n    callback: (locaiton: Location, pending: routerType.Pending) => void\n  ) {\n\n    // 这里无需判断新旧 url 是否相同，因为存在 replace，即使它们相同也不等价于不用跳转\n    const instance = this\n\n    instance.parseLocation(\n      url,\n      function (location) {\n\n        if (location) {\n          callback(\n            location,\n            {\n              location,\n              onComplete,\n              onAbort,\n            }\n          )\n        }\n        else if (process.env.NODE_ENV === 'development') {\n          Yox.logger.error(`\"${url}\" can't match a route.`)\n        }\n\n      }\n    )\n\n  }\n\n  private parseLocation(url: string, callback: (location: Location | void) => void) {\n\n    let realpath: string, search: string | void, index = url.indexOf(constant.SEPARATOR_SEARCH)\n\n    if (index >= 0) {\n      realpath = url.slice(0, index)\n      search = url.slice(index + 1)\n    }\n    else {\n      realpath = url\n    }\n\n    // 匹配已注册的 route\n    const instance = this,\n\n    realpathTerms = realpath.split(constant.SEPARATOR_PATH),\n\n    length = realpathTerms.length,\n\n    matchRoute = function (\n      routes: routerType.LinkedRoute[],\n      callback: (route?: routerType.LinkedRoute, params?: type.data) => void\n    ) {\n\n      let index = 0, route: routerType.LinkedRoute | void\n\n      loop: while (route = routes[index++]) {\n        const path = route.path\n\n        // 动态路由\n        if (route.params) {\n          const pathTerms = path.split(constant.SEPARATOR_PATH)\n          // path 段数量必须一致，否则没有比较的意义\n          if (length === pathTerms.length) {\n            const params: type.data = {}\n            for (let i = 0; i < length; i++) {\n              if (Yox.string.startsWith(pathTerms[i], constant.PREFIX_PARAM)) {\n                params[pathTerms[i].substr(constant.PREFIX_PARAM.length)] = valueUtil.parse(Yox, realpathTerms[i])\n              }\n              // 非参数段不相同\n              else if (pathTerms[i] !== realpathTerms[i]) {\n                continue loop\n              }\n            }\n            callback(route, params)\n            return\n          }\n        }\n        // 懒加载路由，前缀匹配成功后，意味着懒加载回来的路由一定有我们想要的\n        else if (route.load && Yox.string.startsWith(realpath, path)) {\n          route.load(\n            function (lazyRoute) {\n              instance.remove(route as routerType.LinkedRoute)\n              matchRoute(\n                instance.add(lazyRoute),\n                callback\n              )\n            }\n          )\n          return\n        }\n        else if (path === realpath) {\n          callback(route)\n          return\n        }\n      }\n\n      callback()\n\n    }\n\n    matchRoute(\n      instance.routes,\n      function (route, params) {\n        if (route) {\n          const location: Location = {\n            url,\n            path: route.path\n          }\n          if (params) {\n            location.params = params\n          }\n          if (search) {\n            const query = queryUtil.parse(Yox, search)\n            if (query) {\n              location.query = query\n            }\n          }\n          callback(location)\n        }\n        else {\n          callback()\n        }\n      }\n    )\n\n  }\n\n  private diffRoute(\n    route: routerType.LinkedRoute,\n    oldRoute: routerType.LinkedRoute | void,\n    onComplete: routerType.DiffComplete,\n    startRoute: routerType.LinkedRoute | void,\n    childRoute: routerType.LinkedRoute | void,\n    oldTopRoute: routerType.LinkedRoute | void\n  ) {\n\n    // 更新链路\n    if (childRoute) {\n      route.child = childRoute\n      childRoute.parent = route\n    }\n\n    if (oldRoute) {\n      // 同级的两个组件不同，疑似起始更新的路由\n      if (oldRoute.component !== route.component) {\n        startRoute = route\n      }\n      else {\n        // 把上次的组件实例搞过来\n        route.context = oldRoute.context\n      }\n    }\n    else {\n      startRoute = route\n    }\n\n    if (route.parent) {\n      this.diffRoute(\n        Yox.object.copy(route.parent),\n        oldRoute ? oldRoute.parent : env.UNDEFINED,\n        onComplete,\n        startRoute,\n        route,\n        oldRoute || oldTopRoute\n      )\n      return\n    }\n\n    // 整个组件树全换掉\n    if (startRoute === route) {\n      let context: Yox | void\n      // 当层级较多的路由切换到层级较少的路由\n      if (oldRoute) {\n        while (oldRoute) {\n          context = oldRoute.context\n          oldRoute = oldRoute.parent\n        }\n      }\n      // 当层级较少的路由切换到层级较多的路由\n      else if (oldTopRoute) {\n        context = oldTopRoute.context\n      }\n      if (context) {\n        startRoute.context = context\n      }\n    }\n\n    // 到达根组件，结束\n    onComplete(route, startRoute)\n\n  }\n\n  private patchRoute(\n    route: routerType.LinkedRoute,\n    startRoute: routerType.LinkedRoute | void\n  ) {\n\n    const instance = this, location = instance.location as Location\n\n    // 从上往下更新 props\n    while (route) {\n\n      let { parent, context, component } = route\n\n      if (route === startRoute) {\n\n        if (parent) {\n\n          context = parent.context as Yox\n          context.forceUpdate(\n            filterProps(\n              parent,\n              location,\n              parent.component as YoxOptions\n            )\n          )\n\n          context = context[ROUTE_VIEW]\n          if (context) {\n            const props = {}, name = ROUTE_COMPONENT + (++guid)\n            props[ROUTE_COMPONENT] = name\n            context.component(name, component)\n            context.forceUpdate(props)\n          }\n\n        }\n        else {\n\n          if (context) {\n            context.destroy()\n          }\n\n          // 每层路由组件都有 $route 和 $router 属性\n          const extensions = {}\n          extensions[ROUTER] = instance\n          extensions[ROUTE] = route\n\n          route.context = new Yox(\n            Yox.object.extend(\n              {\n                el: instance.el,\n                props: filterProps(route, location, component as YoxOptions),\n                extensions,\n              },\n              component as YoxOptions\n            )\n          )\n\n        }\n\n      }\n\n      else if (context) {\n        if (context.$vnode) {\n          context[ROUTE] = route\n          context.forceUpdate(\n            filterProps(route, location, component as YoxOptions)\n          )\n        }\n        else {\n          route.context = env.UNDEFINED\n        }\n        if (route.child) {\n          route = route.child as routerType.LinkedRoute\n          continue\n        }\n      }\n      break\n    }\n  }\n\n  private setRoute(location: Location) {\n\n    let instance = this,\n\n    linkedRoute = instance.path2Route[location.path],\n\n    redirect = linkedRoute.route.redirect\n\n    if (redirect) {\n      if (Yox.is.func(redirect)) {\n        redirect = (redirect as routerType.Redirect)(location)\n      }\n      if (redirect) {\n        instance.push(redirect as routerType.Target)\n        return\n      }\n    }\n\n    const newRoute = Yox.object.copy(linkedRoute),\n\n    oldRoute = instance.route,\n\n    oldLocation = instance.location,\n\n    enterRoute = function () {\n      instance.diffRoute(\n        newRoute,\n        oldRoute,\n        function (route, startRoute) {\n          instance.hook(\n            newRoute,\n            startRoute ? config.HOOK_BEFORE_ROUTE_ENTER : config.HOOK_BEFORE_ROUTE_UPDATE,\n            startRoute ? constant.HOOK_BEFORE_ENTER : constant.HOOK_BEFORE_UPDATE,\n            env.TRUE,\n            function () {\n\n              instance.route = newRoute\n              instance.location = location\n\n              instance.patchRoute(route, startRoute)\n\n            }\n          )\n        }\n      )\n    }\n\n    instance.hooks.setLocation(location, oldLocation)\n\n    if (oldRoute && oldLocation && location.path !== oldLocation.path) {\n      instance.hook(\n        oldRoute,\n        config.HOOK_BEFORE_ROUTE_LEAVE,\n        constant.HOOK_BEFORE_LEAVE,\n        env.TRUE,\n        enterRoute\n      )\n      return\n    }\n\n    enterRoute()\n\n  }\n\n}\n\nconst directive = {\n  bind(node: HTMLElement | Yox, directive: Directive, vnode: VNode) {\n\n    // 当前组件如果是根组件，则没有 $root 属性\n    const $root = vnode.context.$root || vnode.context,\n\n    router = $root[ROUTER] as Router,\n\n    listener = vnode.data[directive.key] = function (_: CustomEvent) {\n      let { value, getter } = directive, target: any = value\n      if (value && getter && Yox.string.has(value as string, '{')) {\n        target = getter()\n      }\n      router[directive.name](target)\n    }\n\n    if (vnode.isComponent) {\n      (node as Yox).on(EVENT_CLICK, listener)\n    }\n    else {\n      domApi.on(node as HTMLElement, EVENT_CLICK, listener)\n    }\n\n  },\n  unbind(node: HTMLElement | Yox, directive: Directive, vnode: VNode) {\n    const listener = vnode.data[directive.key]\n    if (vnode.isComponent) {\n      (node as Yox).off(EVENT_CLICK, listener)\n    }\n    else {\n      domApi.off(node as HTMLElement, EVENT_CLICK, listener)\n    }\n  },\n},\n\nRouterView: YoxOptions = {\n  template: '<$' + ROUTE_COMPONENT + '/>',\n  beforeCreate(options) {\n\n    const $parent = options.parent as Yox,\n\n    route = $parent[ROUTE].child as routerType.LinkedRoute\n\n    if (route) {\n\n      $parent[ROUTE_VIEW] = this\n\n      const props = options.props = {},\n\n      components = options.components = {},\n\n      name = ROUTE_COMPONENT + (++guid)\n\n      props[ROUTE_COMPONENT] = name\n      components[name] = route.component\n\n    }\n\n  },\n  beforeDestroy() {\n    this.$parent[ROUTE_VIEW] = env.UNDEFINED\n  }\n}\n\n/**\n * 版本\n */\nexport const version = process.env.NODE_VERSION\n\n/**\n * 安装插件\n */\nexport function install(Class: YoxClass): void {\n\n  Yox = Class\n  domApi = Class.dom as API\n\n  Yox.directive({\n    push: directive,\n    replace: directive,\n    go: directive,\n  })\n\n  Yox.component('router-view', RouterView)\n\n  const { beforeCreate, afterMount, afterUpdate, afterDestroy } = Yox\n\n  Yox.beforeCreate = function (options) {\n\n    if (beforeCreate) {\n      beforeCreate(options)\n    }\n\n    let { parent } = options\n\n    // 处理 <router-view> 嵌入的组件\n    if (parent && options.beforeCreate !== RouterView.beforeCreate) {\n\n      // parent 是 <router-view> 实例，得再上一层才是路由组件\n      parent = parent.$parent\n      if (parent) {\n        const router = parent[ROUTER] as Router,\n        route = parent[ROUTE].child as routerType.LinkedRoute\n\n        if (router && route) {\n          const extensions = options.extensions = {}\n\n          extensions[ROUTER] = router\n          extensions[ROUTE] = route\n\n          if (router.location) {\n            options.props = filterProps(route, router.location, options)\n          }\n        }\n      }\n\n    }\n  }\n\n  Yox.afterMount = function (instance) {\n\n    updateRoute(instance, afterMount, config.HOOK_AFTER_ROUTE_ENTER, constant.HOOK_AFTER_ENTER, env.TRUE)\n\n  }\n  Yox.afterUpdate = function (instance) {\n\n    updateRoute(instance, afterUpdate, config.HOOK_AFTER_ROUTE_UPDATE, constant.HOOK_AFTER_UPDATE, env.TRUE)\n\n  }\n  Yox.afterDestroy = function (instance) {\n\n    updateRoute(instance, afterDestroy, config.HOOK_AFTER_ROUTE_LEAVE, constant.HOOK_AFTER_LEAVE)\n\n  }\n\n}\n","\nimport YoxClass from '../../../yox-type/src/interface/YoxClass'\n\nimport * as constant from '../constant'\nimport * as valueUtil from './value'\n\n/**\n * 把 GET 参数解析成对象\n */\nexport function parse(Yox: YoxClass, query: string) {\n  let result: Object | undefined\n  Yox.array.each(\n    query.split(constant.SEPARATOR_QUERY),\n    function (term) {\n\n      let terms = term.split(constant.SEPARATOR_PAIR),\n\n      key = Yox.string.trim(terms[0]),\n\n      value = terms[1]\n\n      if (key) {\n        if (!result) {\n          result = {}\n        }\n        value = valueUtil.parse(Yox, value)\n        if (Yox.string.endsWith(key, constant.FLAG_ARRAY)) {\n          key = Yox.string.slice(key, 0, -constant.FLAG_ARRAY.length)\n          Yox.array.push(\n            result[key] || (result[key] = []),\n            value\n          )\n        }\n        else {\n          result[key] = value\n        }\n      }\n\n    }\n  )\n  return result\n}\n\n/**\n * 把对象解析成 key1=value1&key2=value2\n */\nexport function stringify(Yox: YoxClass, query: Object) {\n  const result: string[] = []\n  for (let key in query) {\n    const value = query[key]\n    if (Yox.is.array(value)) {\n      Yox.array.each(\n        value,\n        function (value) {\n          result.push(\n            key + constant.FLAG_ARRAY + constant.SEPARATOR_PAIR + valueUtil.stringify(Yox, value)\n          )\n        }\n      )\n    }\n    else {\n      result.push(\n        key + constant.SEPARATOR_PAIR + valueUtil.stringify(Yox, value)\n      )\n    }\n  }\n  return result.join(constant.SEPARATOR_QUERY)\n}\n"],"names":["const","HOOK_AFTER_ROUTE_ENTER","HOOK_AFTER_ROUTE_UPDATE","HOOK_AFTER_ROUTE_LEAVE","TRUE","FALSE","NULL","UNDEFINED","RAW_TRUE","RAW_FALSE","RAW_NULL","RAW_UNDEFINED","EMPTY_FUNCTION","Object","freeze","Hooks","to","from","this","list","hook","ctx","push","fn","next","isGuard","callback","task","shift","call","WINDOW","window","LOCATION","location","HISTORY","history","PREFIX_PARAM","SEPARATOR_PATH","SEPARATOR_SEARCH","SEPARATOR_QUERY","SEPARATOR_PAIR","FLAG_ARRAY","HOOK_AFTER_ENTER","HOOK_AFTER_UPDATE","HOOK_AFTER_LEAVE","parse","Yox","value","result","is","numeric","string","env.RAW_TRUE","env.TRUE","env.RAW_FALSE","env.FALSE","env.RAW_NULL","env.NULL","env.RAW_UNDEFINED","env.UNDEFINED","decodeURIComponent","stringify","encodeURIComponent","number","boolean","toString","HASH_PREFIX","HASH_CHANGE","domApi","handler","on","constant.WINDOW","off","constant.LOCATION","hash","url","n","constant.HISTORY","go","href","index","indexOf","constant.SEPARATOR_PATH","substr","length","POP_STATE","isSupported","pushState","pathname","search","guid","ROUTER","ROUTE","formatPath","path","parentPath","startsWith","endsWith","slice","stringifyUrl","params","query","test","terms_1","array","each","split","item","constant.PREFIX_PARAM","join","queryStr","key","constant.FLAG_ARRAY","constant.SEPARATOR_PAIR","valueUtil.stringify","constant.SEPARATOR_QUERY","queryUtil.stringify","constant.SEPARATOR_SEARCH","toUrl","target","name2Path","route","name","filterProps","options","propTypes","props","routeParams","locationParams","object","copy","i","checkProp","updateRoute","instance","componentHookName","hookName","upsert","context","child","isLeafRoute","router","pending","onComplete","el","route404","find","mode","historyMode.isSupported","historyMode","hashMode","current","setHistory","cursor","setRoute","parseLocation","routes","path2Route","hooks","add","Router","routeOptions","newRoutes","pathStack","routeStack","addRoute","component","children","load","last","parentRoute","parent","pop","remove","setUrl","env.EMPTY_FUNCTION","replaceHistory","start","stop","componentHook","clear","onAbort","realpath","realpathTerms","matchRoute","loop","pathTerms","valueUtil.parse","lazyRoute","term","terms","trim","queryUtil.parse","oldRoute","startRoute","childRoute","oldTopRoute","diffRoute","forceUpdate","destroy","extensions","extend","$vnode","linkedRoute","redirect","func","newRoute","oldLocation","enterRoute","patchRoute","setLocation","directive","bind","node","vnode","$root","listener","data","_","getter","has","isComponent","unbind","RouterView","template","beforeCreate","$parent","components","beforeDestroy","Class","dom","replace","afterMount","afterUpdate","afterDestroy","config.HOOK_AFTER_ROUTE_ENTER","constant.HOOK_AFTER_ENTER","config.HOOK_AFTER_ROUTE_UPDATE","constant.HOOK_AFTER_UPDATE","config.HOOK_AFTER_ROUTE_LEAVE","constant.HOOK_AFTER_LEAVE"],"mappings":"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"}