{"version":3,"file":"yox-router.min.js","sources":["../../yox-common/src/util/env.ts","../src/Hooks.ts","../src/constant.ts","../src/value.ts","../src/location.ts","../src/query.ts","../src/index.ts"],"sourcesContent":["/**\n * 为了压缩，定义的常量\n */\nexport const TRUE = true\nexport const FALSE = false\nexport const NULL = null\nexport const UNDEFINED = void 0\n\nexport const RAW_TRUE = 'true'\nexport const RAW_FALSE = 'false'\nexport const RAW_NULL = 'null'\nexport const RAW_UNDEFINED = 'undefined'\n\nexport const RAW_KEY = 'key'\nexport const RAW_REF = 'ref'\nexport const RAW_SLOT = 'slot'\nexport const RAW_NAME = 'name'\n\nexport const RAW_FILTER = 'filter'\nexport const RAW_PARTIAL = 'partial'\nexport const RAW_COMPONENT = 'component'\nexport const RAW_DIRECTIVE = 'directive'\nexport const RAW_TRANSITION = 'transition'\n\nexport const RAW_THIS = 'this'\nexport const RAW_VALUE = 'value'\nexport const RAW_LENGTH = 'length'\nexport const RAW_FUNCTION = 'function'\nexport const RAW_TEMPLATE = 'template'\nexport const RAW_WILDCARD = '*'\n\nexport const KEYPATH_PARENT = '..'\nexport const KEYPATH_CURRENT = RAW_THIS\n\nexport const RAW_MINUS_ONE = -1\n\n/**\n * Single instance for window in browser\n */\nexport const WINDOW = typeof window !== RAW_UNDEFINED ? window : UNDEFINED\n\n/**\n * Single instance for document in browser\n */\nexport const DOCUMENT = typeof document !== RAW_UNDEFINED ? document : UNDEFINED\n\n/**\n * tap 事件\n *\n * 非常有用的抽象事件，比如 pc 端是 click 事件，移动端是 touchend 事件\n *\n * 这样只需 on-tap=\"handler\" 就可以完美兼容各端\n *\n * 框架未实现此事件，通过 Yox.dom.specialEvents 提供给外部扩展\n *\n */\nexport const EVENT_TAP = 'tap'\n\n/**\n * 点击事件\n */\nexport const EVENT_CLICK = 'click'\n\n/**\n * 输入事件\n */\nexport const EVENT_INPUT = 'input'\n\n/**\n * 变化事件\n */\nexport const EVENT_CHANGE = 'change'\n\n/**\n * 唯一内置的特殊事件：model\n */\nexport const EVENT_MODEL = 'model'\n\n/**\n * Single instance for noop function\n */\nexport const EMPTY_FUNCTION = function () {\n  /** yox */\n}\n\n/**\n * 空对象，很多地方会用到，比如 `a || EMPTY_OBJECT` 确保是个对象\n */\nexport const EMPTY_OBJECT = Object.freeze({})\n\n/**\n * 空数组\n */\nexport const EMPTY_ARRAY = Object.freeze([])\n\n/**\n * 空字符串\n */\nexport const EMPTY_STRING = ''","import Task from '../../yox-type/src/interface/Task'\nimport YoxOptions from '../../yox-type/src/options/Yox'\nimport { Router } from './index'\n\nimport * as type from './type'\n\nexport default class Hooks {\n\n  name: string\n\n  list: Task[]\n\n  to: type.Location\n\n  from: type.Location | void\n\n  setLocation(to: type.Location, from: type.Location | void) {\n    this.to = to\n    this.from = from\n    return this\n  }\n\n  setName(name: string) {\n    this.name = name\n    this.list = []\n    return this\n  }\n\n  add(target: YoxOptions | type.RouteOptions | Router, ctx: any) {\n    const { name, list } = this\n    if (target[name]) {\n      list.push({\n        fn: target[name],\n        ctx,\n      })\n    }\n    return this\n  }\n\n  next(next: type.Next, isGuard?: boolean, callback?: type.Callback) {\n    const task = this.list.shift()\n    if (task) {\n      if (isGuard) {\n        task.fn.call(task.ctx, this.to, this.from, next)\n      }\n      else {\n        task.fn.call(task.ctx, this.to, this.from)\n        next()\n      }\n    }\n    else if (callback) {\n      callback()\n    }\n  }\n\n}","// hash 前缀，Google 的规范是 #! 开头，如 #!/path/sub?key=value\nexport const PREFIX_HASH = '#!'\n\n// path 中的参数前缀，如 #!/user/:userId\nexport const PREFIX_PARAM = ':'\n\n// path 分隔符\nexport const SEPARATOR_PATH = '/'\n\n// path 和 search 的分隔符\nexport const SEPARATOR_SEARCH = '?'\n\n// query 分隔符\nexport const SEPARATOR_QUERY = '&'\n\n// 键值对分隔符\nexport const SEPARATOR_PAIR = '='\n\n// 参数中的数组标识\nexport const FLAG_ARRAY = '[]'\n\n// 导航钩子 - 路由进入之前\nexport const HOOK_BEFORE_ENTER = 'beforeEnter'\n\n// 导航钩子 - 路由进入之后\nexport const HOOK_AFTER_ENTER = 'afterEnter'\n\n// 导航钩子 - 路由离开之前\nexport const HOOK_BEFORE_LEAVE = 'beforeLeave'\n\n// 导航钩子 - 路由离开之后\nexport const HOOK_AFTER_LEAVE = 'afterLeave'","import * as env from '../../yox-common/src/util/env'\nimport YoxClass from '../../yox-type/src/interface/YoxClass'\n\n/**\n * 把字符串 value 解析成最合适的类型\n */\nexport function parse(Yox: YoxClass, value: string) {\n  let result: any\n  if (Yox.is.numeric(value)) {\n    result = +value\n  }\n  else if (Yox.is.string(value)) {\n    if (value === env.RAW_TRUE) {\n      result = env.TRUE\n    }\n    else if (value === env.RAW_FALSE) {\n      result = env.FALSE\n    }\n    else if (value === env.RAW_NULL) {\n      result = env.NULL\n    }\n    else if (value === env.RAW_UNDEFINED) {\n      result = env.UNDEFINED\n    }\n    else {\n      result = decodeURIComponent(value)\n    }\n  }\n  return result\n}\n\nexport function stringify(Yox: YoxClass, value: any): string {\n  if (Yox.is.string(value)) {\n    return encodeURIComponent(value)\n  }\n  else if (Yox.is.number(value) || Yox.is.boolean(value)) {\n    return value.toString()\n  }\n  else if (value === env.NULL) {\n    return env.RAW_NULL\n  }\n  return env.RAW_UNDEFINED\n}","import YoxClass from '../../yox-type/src/interface/YoxClass'\n\nimport * as type from './type'\nimport * as constant from './constant'\nimport * as valueUtil from './value'\nimport * as queryUtil from './query'\n\n/**\n * 解析 path 中的参数\n */\nfunction parseParams(Yox: YoxClass, path: string, realpath: string) {\n\n  let result: Object | undefined,\n\n  realpathTerms = realpath.split(constant.SEPARATOR_PATH),\n\n  pathTerms = path.split(constant.SEPARATOR_PATH)\n\n  if (realpathTerms.length === pathTerms.length) {\n    Yox.array.each(\n      pathTerms,\n      function (item, index) {\n        if (Yox.string.startsWith(item, constant.PREFIX_PARAM)) {\n          if (!result) {\n            result = {}\n          }\n          result[item.substr(constant.PREFIX_PARAM.length)] = valueUtil.parse(Yox, realpathTerms[index])\n        }\n      }\n    )\n  }\n\n  return result\n\n}\n\n/**\n * 通过 realpath 获取配置的路由\n */\nfunction getRouteByRealpath(Yox: YoxClass, routes: type.LinkedRoute[], realpath: string) {\n\n  let realpathTerms = realpath.split(constant.SEPARATOR_PATH),\n\n  length = realpathTerms.length,\n\n  i = 0,\n\n  route: type.LinkedRoute | void\n\n  loop: while (route = routes[i++]) {\n    if (route.params) {\n      const pathTerms = route.path.split(constant.SEPARATOR_PATH)\n      if (length === pathTerms.length) {\n        for (let l = 0; l < length; l++) {\n          // 非参数段不相同\n          if (!Yox.string.startsWith(pathTerms[l], constant.PREFIX_PARAM)\n            && pathTerms[l] !== realpathTerms[l]\n          ) {\n            continue loop\n          }\n        }\n        return route\n      }\n    }\n    else if (route.path === realpath) {\n      return route\n    }\n  }\n\n}\n\nexport function parse(Yox: YoxClass, routes: type.LinkedRoute[], hash: string) {\n\n  let realpath: string, search: string | void, index = hash.indexOf(constant.SEPARATOR_SEARCH)\n\n  if (index >= 0) {\n    realpath = hash.slice(0, index)\n    search = hash.slice(index + 1)\n  }\n  else {\n    realpath = hash\n  }\n\n  const route = getRouteByRealpath(Yox, routes, realpath)\n\n  if (route) {\n    const result: type.Location = {\n      hash,\n      path: route.path\n    }\n    if (route.params) {\n      const params = parseParams(Yox, route.path, realpath)\n      if (params) {\n        result.params = params\n      }\n    }\n    if (search) {\n      const query = queryUtil.parse(Yox, search)\n      if (query) {\n        result.query = query\n      }\n    }\n    return result\n  }\n\n}\n\n/**\n * 把结构化数据序列化成 hash\n */\nexport function stringify(Yox: YoxClass, location: type.Location) {\n\n  const { path, params, query } = location, terms: string[] = []\n\n  Yox.array.each(\n    path.split(constant.SEPARATOR_PATH),\n    function (item) {\n      terms.push(\n        Yox.string.startsWith(item, constant.PREFIX_PARAM) && params\n          ? params[item.substr(constant.PREFIX_PARAM.length)]\n          : item\n      )\n    }\n  )\n\n  let realpath = terms.join(constant.SEPARATOR_PATH)\n\n  if (query) {\n    const queryStr = queryUtil.stringify(Yox, query)\n    if (queryStr) {\n      realpath += constant.SEPARATOR_SEARCH + queryStr\n    }\n  }\n\n  return realpath\n\n}","\nimport YoxClass from '../../yox-type/src/interface/YoxClass'\n\nimport * as constant from './constant'\nimport * as valueUtil from './value'\n\n/**\n * 把 GET 参数解析成对象\n */\nexport function parse(Yox: YoxClass, query: string) {\n  let result: Object | undefined\n  Yox.array.each(\n    query.split(constant.SEPARATOR_QUERY),\n    function (term) {\n\n      let terms = term.split(constant.SEPARATOR_PAIR),\n\n      key = Yox.string.trim(terms[0]),\n\n      value = terms[1]\n\n      if (key) {\n        if (!result) {\n          result = {}\n        }\n        value = valueUtil.parse(Yox, value)\n        if (Yox.string.endsWith(key, constant.FLAG_ARRAY)) {\n          key = Yox.string.slice(key, 0, -constant.FLAG_ARRAY.length)\n          Yox.array.push(\n            result[key] || (result[key] = []),\n            value\n          )\n        }\n        else {\n          result[key] = value\n        }\n      }\n\n    }\n  )\n  return result\n}\n\n/**\n * 把对象解析成 key1=value1&key2=value2\n */\nexport function stringify(Yox: YoxClass, query: Object) {\n  const result: string[] = []\n  for (let key in query) {\n    const value = query[key]\n    if (Yox.is.array(value)) {\n      Yox.array.each(\n        value,\n        function (value) {\n          result.push(\n            key + constant.FLAG_ARRAY + constant.SEPARATOR_PAIR + valueUtil.stringify(Yox, value)\n          )\n        }\n      )\n    }\n    else {\n      result.push(\n        key + constant.SEPARATOR_PAIR + valueUtil.stringify(Yox, value)\n      )\n    }\n  }\n  return result.join(constant.SEPARATOR_QUERY)\n}\n","import * as type from '../../yox-type/src/type'\n\nimport * as env from '../../yox-common/src/util/env'\n\nimport API from '../../yox-type/src/interface/API'\nimport Yox from '../../yox-type/src/interface/Yox'\nimport YoxClass from '../../yox-type/src/interface/YoxClass'\n\nimport YoxOptions from '../../yox-type/src/options/Yox'\nimport VNode from '../../yox-type/src/vnode/VNode'\nimport Directive from '../../yox-type/src/vnode/Directive'\nimport CustomEvent from '../../yox-type/src/event/CustomEvent'\n\nimport Hooks from './Hooks'\nimport * as constant from './constant'\nimport * as typeUtil from './type'\nimport * as locationUtil from './location'\n\nlet Yox: YoxClass, domApi: API, guid = 0\n\nconst WINDOW = window,\n\nLOCATION = WINDOW.location,\n\nROUTER = '$router',\n\nROUTE = '$route',\n\nROUTE_VIEW = '$routeView',\n\nROUTE_COMPONENT = 'RouteComponent',\n\nEVENT_CLICK = 'click',\n\nEVENT_HASH_CHANGE = 'hashchange'\n\n/**\n * 格式化路径，确保它以 / 开头，不以 / 结尾\n */\nfunction formatPath(path: string, parentPath: string | void) {\n\n  // 如果 path 以 / 结尾，删掉它\n  // 比如 { path: 'index/' }\n  if (path !== constant.SEPARATOR_PATH\n    && Yox.string.endsWith(path, constant.SEPARATOR_PATH)\n  ) {\n    path = Yox.string.slice(path, 0, -1)\n  }\n\n  // 如果 path 不是以 / 开头，有两种情况：\n  // 1. 没有上级或上级是 ''，需要自动加 / 前缀\n  // 2. 相对上级的路径，自动替换最后一个 / 后面的路径\n  if (!Yox.string.startsWith(path, constant.SEPARATOR_PATH)) {\n\n    if (path) {\n      if (Yox.string.falsy(parentPath)) {\n        path = constant.SEPARATOR_PATH + path\n      }\n      else {\n        path = parentPath + constant.SEPARATOR_PATH + path\n      }\n    }\n    else if (parentPath) {\n      path = parentPath\n    }\n\n  }\n\n  return path\n}\n\nfunction toLocation(target: typeUtil.Target, name2Path: type.data): typeUtil.Location {\n\n  const location: typeUtil.Location = {\n    hash: env.EMPTY_STRING,\n    path: env.EMPTY_STRING\n  }\n\n  if (Yox.is.string(target)) {\n    location.path = formatPath(target as string)\n  }\n  else {\n    const route = target as typeUtil.RouteTarget, name = route.name\n    if (name) {\n      location.path = name2Path[name]\n      if (process.env.NODE_ENV === 'development') {\n        if (!Yox.is.string(location.path)) {\n          Yox.logger.error(`The route of name[${name}] is not found.`)\n        }\n      }\n    }\n    else {\n      location.path = formatPath(route.path as string)\n    }\n    if (route.params) {\n      location.params = route.params\n    }\n    if (route.query) {\n      location.query = route.query\n    }\n  }\n\n  return location\n\n}\n\n/**\n * 按照 propTypes 定义的外部数据格式过滤路由参数，这样有两个好处：\n *\n * 1. 避免传入不符预期的数据\n * 2. 避免覆盖 data 定义的数据\n */\nfunction filterProps(route: typeUtil.LinkedRoute, location: typeUtil.Location, options: YoxOptions) {\n  const result: type.data = {}, propTypes = options.propTypes\n  if (propTypes) {\n\n    let props = location.query,\n\n    routeParams = route.params,\n\n    locationParams = location.params\n\n    // 从 location.params 挑出 route.params 定义过的参数\n    if (routeParams && locationParams) {\n      props = props ? Yox.object.copy(props) : {}\n      for (let i = 0, key: string; key = routeParams[i]; i++) {\n        (props as type.data)[key] = locationParams[key]\n      }\n    }\n\n    if (props) {\n      for (let key in propTypes) {\n        result[key] = Yox.checkProp(key, props[key], propTypes[key])\n      }\n    }\n\n  }\n  return result\n}\n\n/**\n * 是否是叶子节点\n * 如果把叶子节点放在 if 中，会出现即使不是定义时的叶子节点，却是运行时的叶子节点\n */\nfunction isLeafRoute(route: typeUtil.LinkedRoute) {\n  const child = route.child\n  return !child || !child.context\n}\n\nfunction updateRoute(instance: Yox, hook: string | undefined, upsert?: boolean) {\n  const route = instance[ROUTE] as typeUtil.LinkedRoute\n  if (route) {\n    route.context = upsert ? instance : env.UNDEFINED\n    if (isLeafRoute(route)) {\n      const router = instance[ROUTER] as Router\n      if (hook) {\n        router.hook(route, hook)\n      }\n      if (upsert && router.loading) {\n        router.loading.onComplete()\n        router.loading = env.UNDEFINED\n      }\n    }\n  }\n}\n\nexport class Router {\n\n  el: Element\n\n  routes: typeUtil.LinkedRoute[]\n\n  route404: typeUtil.LinkedRoute\n\n  name2Path: Record<string, string>\n\n  path2Route: Record<string, typeUtil.LinkedRoute>\n\n  history: typeUtil.Location[]\n\n  cursor: number\n\n  loading: typeUtil.Loading | void\n\n  hooks: Hooks\n\n  // 路由或参数发生了变化会触发此函数\n  onHashChange: Function\n\n  // 当前渲染的路由\n  route?: typeUtil.LinkedRoute\n\n  // 当前地址栏的路径和参数\n  location?: typeUtil.Location\n\n  [constant.HOOK_BEFORE_LEAVE]?: typeUtil.BeforeHook\n\n  [constant.HOOK_BEFORE_ENTER]?: typeUtil.BeforeHook\n\n  [constant.HOOK_AFTER_ENTER]?: typeUtil.AfterHook\n\n  [constant.HOOK_AFTER_LEAVE]?: typeUtil.AfterHook\n\n  constructor(options: typeUtil.RouterOptions) {\n\n    const instance = this, { el, route404 } = options\n\n    instance.el = Yox.is.string(el)\n      ? domApi.find(el as string) as Element\n      : el as Element\n\n    if (process.env.NODE_ENV === 'development') {\n      if (!instance.el) {\n        Yox.logger.error(`router.el is not an element.`)\n        return\n      }\n      if (!route404) {\n        Yox.logger.error(`Route for 404 is required.`)\n        return\n      }\n    }\n\n    /**\n     * hashchange 事件处理函数\n     * 此函数必须写在实例上，不能写在类上\n     * 否则一旦解绑，所有实例都解绑了\n     */\n    instance.onHashChange = function () {\n\n      let hashStr = LOCATION.hash, { loading, routes, route404 } = instance\n\n      // 如果不以 PREFIX_HASH 开头，表示不合法\n      hashStr = hashStr !== constant.PREFIX_HASH\n        && Yox.string.startsWith(hashStr, constant.PREFIX_HASH)\n        ? hashStr.substr(constant.PREFIX_HASH.length)\n        : constant.SEPARATOR_PATH\n\n      if (loading) {\n        // 通过 push 或 go 触发\n        if (loading.location.hash === hashStr) {\n          instance.setRoute(loading.location)\n          return\n        }\n        instance.loading = env.UNDEFINED\n      }\n\n      // 直接修改地址栏触发\n      const location = locationUtil.parse(Yox, routes, hashStr)\n      if (location) {\n        instance.pushHistory(location)\n        instance.setRoute(location)\n        return\n      }\n\n      instance.push(route404)\n\n    }\n\n    instance.routes = []\n    instance.name2Path = {}\n    instance.path2Route = {}\n\n    instance.history = []\n    instance.cursor = -1\n\n    instance.hooks = new Hooks()\n\n    instance.add(options.routes)\n    instance.add([route404])\n\n    instance.route404 = Yox.array.last(instance.routes) as typeUtil.LinkedRoute\n\n  }\n\n  /**\n   * 添加新的路由\n   */\n  add(routes: typeUtil.RouteOptions[]) {\n\n    let instance = this,\n\n    pathStack: string[] = [],\n\n    routeStack: typeUtil.LinkedRoute[] = [],\n\n    callback = function (routeOptions: typeUtil.RouteOptions) {\n\n      let { name, component, children } = routeOptions,\n\n      parentPath = Yox.array.last(pathStack),\n\n      parentRoute = Yox.array.last(routeStack),\n\n      path = formatPath(routeOptions.path, parentPath),\n\n      route: typeUtil.LinkedRoute = { path, component, route: routeOptions },\n\n      params: string[] = []\n\n      Yox.array.each(\n        path.split(constant.SEPARATOR_PATH),\n        function (item) {\n          if (Yox.string.startsWith(item, constant.PREFIX_PARAM)) {\n            params.push(\n              item.substr(constant.PREFIX_PARAM.length)\n            )\n          }\n        }\n      )\n\n      if (params.length) {\n        route.params = params\n      }\n\n      if (parentRoute) {\n        route.parent = parentRoute\n      }\n\n      if (children) {\n        pathStack.push(path)\n        routeStack.push(route)\n        Yox.array.each(\n          children,\n          callback\n        )\n        routeStack.pop()\n        pathStack.pop()\n      }\n      else {\n\n        instance.routes.push(route)\n\n        if (name) {\n          if (process.env.NODE_ENV === 'development') {\n            if (Yox.object.has(instance.name2Path, name)) {\n              Yox.logger.error(`Name[${name}] of the route is existed.`)\n              return\n            }\n          }\n          instance.name2Path[name] = path\n        }\n\n        if (process.env.NODE_ENV === 'development') {\n          if (Yox.object.has(instance.path2Route, path)) {\n            Yox.logger.error(`path [${path}] of the route is existed.`)\n            return\n          }\n        }\n\n        instance.path2Route[path] = route\n\n      }\n\n    }\n\n    Yox.array.each(\n      routes,\n      callback\n    )\n\n  }\n\n  /**\n   * 真正执行路由切换操作的函数\n   *\n   * target 有 2 种格式：\n   *\n   * 如果只是简单的 path，直接传字符串\n   *\n   * push('/index')\n   *\n   * 如果需要带参数，可传对象\n   *\n   * push({\n   *   path: '/index',\n   *   params: { },\n   *   query: { }\n   * })\n   *\n   * 如果路由配置了 name，可用 name 代替 path，如下：\n   *\n   * push({\n   *   name: 'index'\n   * })\n   *\n   */\n  push(target: typeUtil.Target) {\n\n    const instance = this,\n\n    location = instance.setLocation(\n      toLocation(target, instance.name2Path),\n      function () {\n        instance.pushHistory(location as typeUtil.Location)\n      },\n      env.EMPTY_FUNCTION\n    )\n\n    if (location) {\n      instance.setHash(location)\n    }\n\n  }\n\n  replace(target: typeUtil.Target) {\n\n    const instance = this,\n\n    location = instance.setLocation(\n      toLocation(target, instance.name2Path),\n      function () {\n        const history = instance.history, cursor = instance.cursor\n        if (history[cursor]) {\n          history[cursor] = location as typeUtil.Location\n        }\n      },\n      env.EMPTY_FUNCTION\n    )\n\n    if (location) {\n      instance.setRoute(location)\n    }\n\n  }\n\n  go(offset: number) {\n\n    let instance = this,\n\n    cursor = instance.cursor + offset,\n\n    location: typeUtil.Location | void = instance.history[cursor]\n\n    if (location) {\n      location = instance.setLocation(\n        location,\n        function () {\n          instance.cursor = cursor\n        },\n        env.EMPTY_FUNCTION\n      )\n      if (location) {\n        instance.setHash(location)\n      }\n    }\n\n  }\n\n  /**\n   * 启动路由\n   */\n  start() {\n    domApi.on(WINDOW, EVENT_HASH_CHANGE, this.onHashChange as type.listener)\n    this.onHashChange()\n  }\n\n  /**\n   * 停止路由\n   */\n  stop() {\n    domApi.off(WINDOW, EVENT_HASH_CHANGE, this.onHashChange as type.listener)\n  }\n\n  /**\n   * 钩子函数\n   */\n  hook(route: typeUtil.LinkedRoute, name: string, isGuard?: boolean, callback?: typeUtil.Callback) {\n\n    const instance = this, { location, hooks, loading } = instance, { to, from } = hooks\n\n    if (!from || from.path !== to.path) {\n\n      hooks\n        .setName(name)\n        // 先调用组件的钩子\n        .add(route.component, route.context)\n        // 再调用路由配置的钩子\n        .add(route.route, route.route)\n        // 最后调用路由实例的钩子\n        .add(instance, instance)\n\n      const next = function (value?: false | typeUtil.Target) {\n        if (value === env.UNDEFINED) {\n          hooks.next(next, isGuard, callback)\n        }\n        else {\n          // 只有前置守卫才有可能走进这里\n          // 此时 instance.location 还是旧地址\n          if (loading) {\n            loading.onAbort()\n            instance.loading = env.UNDEFINED\n          }\n          if (value === env.FALSE) {\n            if (location) {\n              instance.replace(location)\n            }\n          }\n          else {\n            // 跳转到别的路由\n            instance.push(value)\n          }\n        }\n      }\n\n      next()\n\n    }\n    else if (callback) {\n      callback()\n    }\n\n  }\n\n  private pushHistory(location: typeUtil.Location) {\n    let { history, cursor } = this\n    cursor++\n    // 确保下一个为空\n    // 如果不为空，肯定是调用过 go()，此时直接清掉后面的就行了\n    if (history[cursor]) {\n      history.length = cursor\n    }\n    history[cursor] = location\n    this.cursor = cursor\n  }\n\n  private setHash(location: typeUtil.Location) {\n\n    const hash = constant.PREFIX_HASH + location.hash\n    if (LOCATION.hash !== hash) {\n      LOCATION.hash = hash\n    }\n    else {\n      this.setRoute(location)\n    }\n\n  }\n\n  private setLocation(\n    location: typeUtil.Location,\n    onComplete: typeUtil.RouteComplete,\n    onAbort: typeUtil.RouteAbort\n  ) {\n\n    let instance = this,\n\n    hash = locationUtil.stringify(Yox, location),\n\n    oldLocation = instance.location,\n\n    oldHash = oldLocation ? locationUtil.stringify(Yox, oldLocation) : env.UNDEFINED,\n\n    checkExisted = locationUtil.parse(Yox, instance.routes, hash)\n\n    if (checkExisted) {\n      location = checkExisted\n    }\n    else {\n      hash = instance.route404.path\n      location = {\n        hash,\n        path: hash\n      }\n    }\n\n    if (hash !== oldHash) {\n      instance.loading = {\n        location,\n        onComplete,\n        onAbort,\n      }\n      return location\n    }\n\n  }\n\n  private diffRoute(\n    route: typeUtil.LinkedRoute,\n    oldRoute: typeUtil.LinkedRoute | void,\n    onComplete: typeUtil.DiffComplete,\n    startRoute: typeUtil.LinkedRoute | void,\n    childRoute: typeUtil.LinkedRoute | void,\n    oldTopRoute: typeUtil.LinkedRoute | void\n  ) {\n\n    // 更新链路\n    if (childRoute) {\n      route.child = childRoute\n      childRoute.parent = route\n    }\n\n    if (oldRoute) {\n      // 同级的两个组件不同，疑似起始更新的路由\n      if (oldRoute.component !== route.component) {\n        startRoute = route\n      }\n      else {\n        // 把上次的组件实例搞过来\n        route.context = oldRoute.context\n      }\n    }\n    else {\n      startRoute = route\n    }\n\n    if (route.parent) {\n      this.diffRoute(\n        Yox.object.copy(route.parent),\n        oldRoute ? oldRoute.parent : env.UNDEFINED,\n        onComplete,\n        startRoute,\n        route,\n        oldRoute || oldTopRoute\n      )\n      return\n    }\n\n    // 整个组件树全换掉\n    if (startRoute === route) {\n      let context: Yox | void\n      // 当层级较多的路由切换到层级较少的路由\n      if (oldRoute) {\n        while (oldRoute) {\n          context = oldRoute.context\n          oldRoute = oldRoute.parent\n        }\n      }\n      // 当层级较少的路由切换到层级较多的路由\n      else if (oldTopRoute) {\n        context = oldTopRoute.context\n      }\n      if (context) {\n        startRoute.context = context\n      }\n    }\n\n    // 到达根组件，结束\n    onComplete(route, startRoute)\n\n  }\n\n  private updateRoute(\n    route: typeUtil.LinkedRoute,\n    startRoute: typeUtil.LinkedRoute | void\n  ) {\n\n    const instance = this, location = instance.location as typeUtil.Location\n\n    // 从上往下更新 props\n    while (route) {\n\n      let { parent, context, component } = route\n\n      if (route === startRoute) {\n\n        if (parent) {\n\n          context = parent.context as Yox\n          context.forceUpdate(\n            filterProps(\n              parent,\n              location,\n              parent.component\n            )\n          )\n\n          context = context[ROUTE_VIEW]\n          if (context) {\n            const props = {}, name = ROUTE_COMPONENT + (++guid)\n            props[ROUTE_COMPONENT] = name\n            context.component(name, component)\n            context.forceUpdate(props)\n          }\n\n        }\n        else {\n\n          if (context) {\n            context.destroy()\n          }\n\n          // 每层路由组件都有 $route 和 $router 属性\n          const extensions = {}\n          extensions[ROUTER] = instance\n          extensions[ROUTE] = route\n\n          route.context = new Yox(\n            Yox.object.extend(\n              {\n                el: instance.el,\n                props: filterProps(route, location, component),\n                extensions,\n              },\n              component\n            )\n          )\n\n        }\n\n      }\n\n      else if (context) {\n        if (context.$vnode) {\n          context[ROUTE] = route\n          context.forceUpdate(\n            filterProps(route, location, component)\n          )\n        }\n        else {\n          route.context = env.UNDEFINED\n        }\n        if (route.child) {\n          route = route.child as typeUtil.LinkedRoute\n          continue\n        }\n      }\n      break\n    }\n  }\n\n  private setRoute(location: typeUtil.Location) {\n\n    const instance = this,\n\n    newRoute = Yox.object.copy(instance.path2Route[location.path]),\n\n    oldRoute = instance.route,\n\n    enterRoute = function () {\n      instance.diffRoute(\n        newRoute,\n        oldRoute,\n        function (route, startRoute) {\n          instance.hook(\n            newRoute,\n            constant.HOOK_BEFORE_ENTER,\n            env.TRUE,\n            function () {\n\n              instance.route = newRoute\n              instance.location = location\n\n              instance.updateRoute(route, startRoute)\n\n            }\n          )\n        }\n      )\n    }\n\n    instance.hooks.setLocation(location, instance.location)\n\n    if (oldRoute) {\n      instance.hook(\n        oldRoute,\n        constant.HOOK_BEFORE_LEAVE,\n        env.TRUE,\n        enterRoute\n      )\n    }\n    else {\n      enterRoute()\n    }\n\n  }\n\n}\n\nconst directive = {\n  bind(node: HTMLElement | Yox, directive: Directive, vnode: VNode) {\n\n    // 当前组件如果是根组件，则没有 $root 属性\n    const $root = vnode.context.$root || vnode.context,\n\n    router = $root[ROUTER] as Router,\n\n    listener = vnode.data[directive.key] = function (_: CustomEvent) {\n      let { value, getter } = directive, target: any = value\n      if (value && getter && Yox.string.has(value as string, '{')) {\n        target = getter()\n      }\n      router[directive.name](target)\n    }\n\n    if (vnode.isComponent) {\n      (node as Yox).on(EVENT_CLICK, listener)\n    }\n    else {\n      domApi.on(node as HTMLElement, EVENT_CLICK, listener)\n    }\n\n  },\n  unbind(node: HTMLElement | Yox, directive: Directive, vnode: VNode) {\n    const listener = vnode.data[directive.key]\n    if (vnode.isComponent) {\n      (node as Yox).off(EVENT_CLICK, listener)\n    }\n    else {\n      domApi.off(node as HTMLElement, EVENT_CLICK, listener)\n    }\n  },\n},\n\nRouterView: YoxOptions = {\n  template: '<$' + ROUTE_COMPONENT + '/>',\n  beforeCreate(options) {\n\n    const $parent = options.parent as Yox,\n\n    route = $parent[ROUTE].child as typeUtil.LinkedRoute\n\n    if (route) {\n\n      $parent[ROUTE_VIEW] = this\n\n      const props = {}, components = {}, name = ROUTE_COMPONENT + (++guid)\n\n      props[ROUTE_COMPONENT] = name\n      components[name] = route.component\n\n      options.props = props\n      options.components = components\n\n    }\n\n  },\n  beforeDestroy() {\n    this.$parent[ROUTE_VIEW] = env.UNDEFINED\n  }\n}\n\n/**\n * 版本\n */\nexport const version = process.env.NODE_VERSION\n\n/**\n * 安装插件\n */\nexport function install(Class: YoxClass): void {\n\n  Yox = Class\n  domApi = Class.dom as API\n\n  Yox.directive({\n    push: directive,\n    replace: directive,\n  })\n\n  Yox.component('router-view', RouterView)\n\n  const { beforeCreate, afterMount, afterUpdate, afterDestroy } = Yox\n\n  Yox.beforeCreate = function (options) {\n\n    if (beforeCreate) {\n      beforeCreate(options)\n    }\n\n    let { parent } = options\n\n    // 处理 <router-view> 嵌入的组件\n    if (parent && options.beforeCreate !== RouterView.beforeCreate) {\n\n      // parent 是 <router-view> 实例，得再上一层才是路由组件\n      parent = parent.$parent\n      if (parent) {\n        const router = parent[ROUTER] as Router,\n        route = parent[ROUTE].child as typeUtil.LinkedRoute\n\n        if (router && route) {\n          const extensions = options.extensions = {}\n\n          extensions[ROUTER] = router\n          extensions[ROUTE] = route\n\n          if (router.location) {\n            options.props = filterProps(route, router.location, options)\n          }\n        }\n      }\n\n    }\n  }\n\n  Yox.afterMount = function (instance) {\n\n    if (afterMount) {\n      afterMount(instance)\n    }\n\n    updateRoute(instance, constant.HOOK_AFTER_ENTER, env.TRUE)\n\n  }\n  Yox.afterUpdate = function (instance) {\n\n    if (afterUpdate) {\n      afterUpdate(instance)\n    }\n\n    updateRoute(instance, env.UNDEFINED, env.TRUE)\n\n  }\n  Yox.afterDestroy = function (instance) {\n\n    if (afterDestroy) {\n      afterDestroy(instance)\n    }\n\n    updateRoute(instance, constant.HOOK_AFTER_LEAVE)\n\n  }\n\n}\n"],"names":["const","TRUE","FALSE","NULL","UNDEFINED","RAW_TRUE","RAW_FALSE","RAW_NULL","RAW_UNDEFINED","EMPTY_FUNCTION","EMPTY_STRING","Object","freeze","Hooks","to","from","this","name","list","target","ctx","push","fn","next","isGuard","callback","task","shift","call","PREFIX_HASH","PREFIX_PARAM","SEPARATOR_PATH","SEPARATOR_SEARCH","SEPARATOR_QUERY","SEPARATOR_PAIR","FLAG_ARRAY","HOOK_AFTER_ENTER","HOOK_AFTER_LEAVE","parse","Yox","value","result","is","numeric","string","env.RAW_TRUE","env.TRUE","env.RAW_FALSE","env.FALSE","env.RAW_NULL","env.NULL","env.RAW_UNDEFINED","env.UNDEFINED","decodeURIComponent","stringify","encodeURIComponent","number","boolean","toString","routes","hash","realpath","search","index","indexOf","constant.SEPARATOR_SEARCH","slice","route","realpathTerms","split","constant.SEPARATOR_PATH","length","i","loop","params","pathTerms","path","l","startsWith","constant.PREFIX_PARAM","getRouteByRealpath","array","each","item","substr","valueUtil.parse","parseParams","query","constant.SEPARATOR_QUERY","term","terms","constant.SEPARATOR_PAIR","key","trim","endsWith","constant.FLAG_ARRAY","queryUtil.parse","location","join","queryStr","valueUtil.stringify","queryUtil.stringify","domApi","guid","WINDOW","window","LOCATION","ROUTER","ROUTE","formatPath","parentPath","falsy","toLocation","name2Path","env.EMPTY_STRING","filterProps","options","propTypes","props","routeParams","locationParams","object","copy","checkProp","updateRoute","instance","hook","upsert","context","child","isLeafRoute","router","loading","onComplete","el","route404","find","onHashChange","hashStr","constant.PREFIX_HASH","setRoute","locationUtil.parse","pushHistory","path2Route","history","cursor","hooks","add","last","Router","pathStack","routeStack","routeOptions","component","children","parentRoute","parent","pop","setLocation","env.EMPTY_FUNCTION","setHash","offset","on","off","setName","next_1","onAbort","replace","locationUtil.stringify","oldLocation","oldHash","checkExisted","oldRoute","startRoute","childRoute","oldTopRoute","diffRoute","forceUpdate","destroy","extensions","extend","$vnode","newRoute","enterRoute","directive","bind","node","vnode","$root","listener","data","_","getter","has","isComponent","unbind","RouterView","template","beforeCreate","$parent","components","beforeDestroy","Class","dom","afterMount","afterUpdate","afterDestroy","constant.HOOK_AFTER_ENTER","constant.HOOK_AFTER_LEAVE"],"mappings":"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"}