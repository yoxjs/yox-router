{"version":3,"file":"yox-router.min.js","sources":["../src/constant.ts","../../yox-config/src/config.ts","../src/Hooks.ts","../src/util/value.ts","../src/mode/hash.ts","../src/mode/history.ts","../src/Router.ts","../src/util/query.ts"],"sourcesContent":["export const WINDOW = window\n\nexport const LOCATION = WINDOW.location\n\nexport const HISTORY = WINDOW.history\n\nexport const UNDEFINED = void 0\n\nexport const NULL = null\n\nexport const TRUE = true\n\nexport const FALSE = false\n\nexport const RAW_NULL = 'null'\n\nexport const RAW_TRUE = 'true'\n\nexport const RAW_FALSE = 'false'\n\n// path 中的参数前缀，如 /user/:userId\nexport const PREFIX_PARAM = ':'\n\n// path 分隔符\nexport const SEPARATOR_PATH = '/'\n\n// path 和 search 的分隔符\nexport const SEPARATOR_SEARCH = '?'\n\n// query 分隔符\nexport const SEPARATOR_QUERY = '&'\n\n// 键值对分隔符\nexport const SEPARATOR_PAIR = '='\n\n// 参数中的数组标识\nexport const FLAG_ARRAY = '[]'\n\n// history 模式\nexport const MODE_HISTORY = 'history'\n\n// 导航钩子 - 路由进入之前\nexport const ROUTER_HOOK_BEFORE_ENTER = 'beforeEnter'\n\n// 导航钩子 - 路由进入之后\nexport const ROUTER_HOOK_AFTER_ENTER = 'afterEnter'\n\n// 导航钩子 - 路由更新之前\nexport const ROUTER_HOOK_BEFORE_UPDATE = 'beforeUpdate'\n\n// 导航钩子 - 路由更新之后\nexport const ROUTER_HOOK_AFTER_UPDATE = 'afterUpdate'\n\n// 导航钩子 - 路由离开之前\nexport const ROUTER_HOOK_BEFORE_LEAVE = 'beforeLeave'\n\n// 导航钩子 - 路由离开之后\nexport const ROUTER_HOOK_AFTER_LEAVE = 'afterLeave'","export const SYNTAX_IF = '#if'\nexport const SYNTAX_ELSE = 'else'\nexport const SYNTAX_ELSE_IF = 'else if'\nexport const SYNTAX_EACH = '#each'\nexport const SYNTAX_PARTIAL = '#partial'\nexport const SYNTAX_IMPORT = '>'\nexport const SYNTAX_SPREAD = '...'\nexport const SYNTAX_COMMENT = /^!\\s/\n\nexport const SLOT_DATA_PREFIX = '$slot_'\nexport const SLOT_NAME_DEFAULT = 'children'\n\nexport const HINT_STRING = 1\nexport const HINT_NUMBER = 2\nexport const HINT_BOOLEAN = 3\n\nexport const DIRECTIVE_ON = 'on'\nexport const DIRECTIVE_LAZY = 'lazy'\nexport const DIRECTIVE_MODEL = 'model'\nexport const DIRECTIVE_EVENT = 'event'\nexport const DIRECTIVE_BINDING = 'binding'\nexport const DIRECTIVE_CUSTOM = 'o'\n\nexport const MODIFER_NATIVE = 'native'\n\nexport const MODEL_PROP_DEFAULT = 'value'\n\nexport const NAMESPACE_HOOK = '.hook'\n\nexport const HOOK_BEFORE_CREATE = 'beforeCreate'\nexport const HOOK_AFTER_CREATE = 'afterCreate'\nexport const HOOK_BEFORE_MOUNT = 'beforeMount'\nexport const HOOK_AFTER_MOUNT = 'afterMount'\nexport const HOOK_BEFORE_UPDATE = 'beforeUpdate'\nexport const HOOK_AFTER_UPDATE = 'afterUpdate'\nexport const HOOK_BEFORE_DESTROY = 'beforeDestroy'\nexport const HOOK_AFTER_DESTROY = 'afterDestroy'\n\n// 路由钩子\nexport const HOOK_BEFORE_ROUTE_ENTER = 'beforeRouteEnter'\nexport const HOOK_AFTER_ROUTE_ENTER = 'afterRouteEnter'\nexport const HOOK_BEFORE_ROUTE_UPDATE = 'beforeRouteUpdate'\nexport const HOOK_AFTER_ROUTE_UPDATE = 'afterRouteUpdate'\nexport const HOOK_BEFORE_ROUTE_LEAVE = 'beforeRouteLeave'\nexport const HOOK_AFTER_ROUTE_LEAVE = 'afterRouteLeave'\n","import {\n  Task,\n} from '../../yox-type/src/type'\n\nimport {\n  Location,\n} from '../../yox-type/src/router'\n\nexport default class Hooks {\n\n  list: Task[]\n\n  to: Location\n\n  from: Location | void\n\n  setLocation(to: Location, from: Location | void) {\n    this.to = to\n    this.from = from\n    return this\n  }\n\n  clear() {\n    this.list = []\n    return this\n  }\n\n  add(hook: Function | void, ctx: any) {\n    const { list } = this\n    if (hook) {\n      list.push({\n        fn: hook,\n        ctx,\n      })\n    }\n    return this\n  }\n\n  next(next: Function, isGuard?: boolean, callback?: Function) {\n    const task = this.list.shift()\n    if (task) {\n      if (isGuard) {\n        task.fn.call(task.ctx, this.to, this.from, next)\n      }\n      else {\n        task.fn.call(task.ctx, this.to, this.from)\n        next()\n      }\n    }\n    else if (callback) {\n      callback()\n    }\n  }\n\n}","import {\n  API,\n} from '../type'\n\nimport {\n  NULL,\n  TRUE,\n  FALSE,\n  RAW_NULL,\n  RAW_TRUE,\n  RAW_FALSE,\n} from '../constant'\n\n/**\n * 把字符串 value 解析成最合适的类型\n */\nexport function parse(API: API, value: string) {\n  let result: any\n  if (API.is.numeric(value)) {\n    result = +value\n  }\n  else if (API.is.string(value)) {\n    if (value === RAW_TRUE) {\n      result = TRUE\n    }\n    else if (value === RAW_FALSE) {\n      result = FALSE\n    }\n    else if (value === RAW_NULL) {\n      result = NULL\n    }\n    else {\n      result = decodeURIComponent(value)\n    }\n  }\n  return result\n}\n\nexport function stringify(API: API, value: any): string | void {\n  if (API.is.string(value)) {\n    return encodeURIComponent(value)\n  }\n  else if (API.is.number(value) || API.is.boolean(value)) {\n    return value.toString()\n  }\n  else if (value === NULL) {\n    return RAW_NULL\n  }\n}","import {\n  Location,\n} from '../../../yox-type/src/router'\n\nimport {\n  DomApi,\n} from '../../../yox-type/src/api'\n\nimport {\n  Listener,\n} from '../../../yox-type/src/type'\n\nimport {\n  WINDOW,\n  HISTORY,\n  LOCATION,\n  SEPARATOR_PATH,\n} from '../constant'\n\n// hash 前缀，Google 的规范是 #! 开头，如 #!/path/sub?key=value\nconst HASH_PREFIX = '#!',\n\nHASH_CHANGE = 'hashchange'\n\nexport function start(api: DomApi, handler: Function) {\n  api.on(WINDOW, HASH_CHANGE, handler as Listener)\n  handler()\n}\n\nexport function stop(api: DomApi, handler: Function) {\n  api.off(WINDOW, HASH_CHANGE, handler)\n}\n\nexport function push(location: Location, handler: Function) {\n  LOCATION.hash = HASH_PREFIX + location.url\n}\n\nexport function go(n: number) {\n  HISTORY.go(n)\n}\n\nexport function current() {\n\n  // 不能直接读取 window.location.hash\n  // 因为 Firefox 会做 pre-decode\n  const href = LOCATION.href, index = href.indexOf(HASH_PREFIX)\n\n  return index > 0\n    ? href.substr(index + HASH_PREFIX.length)\n    : SEPARATOR_PATH\n\n}\n","import {\n  Location,\n} from '../../../yox-type/src/router'\n\nimport {\n  DomApi,\n} from '../../../yox-type/src/api'\n\nimport {\n  Listener,\n} from '../../../yox-type/src/type'\n\nimport {\n  WINDOW,\n  HISTORY,\n  LOCATION,\n} from '../constant'\n\nconst POP_STATE = 'popstate'\n\nexport const isSupported = 'pushState' in HISTORY\n\nexport function start(api: DomApi, handler: Function) {\n  api.on(WINDOW, POP_STATE, handler as Listener)\n  handler()\n}\n\nexport function stop(api: DomApi, handler: Function) {\n  api.off(WINDOW, POP_STATE, handler)\n}\n\nexport function push(location: Location, handler: Function) {\n  // 调用 pushState 不会触发 popstate 事件\n  // 因此这里需要手动调用一次 handler\n  HISTORY.pushState({}, '', location.url)\n  handler()\n}\n\nexport function go(n: number) {\n  HISTORY.go(n)\n}\n\nexport function current() {\n  return LOCATION.pathname + LOCATION.search\n}\n","import {\n  Data,\n  Listener,\n} from '../../yox-type/src/type'\n\nimport {\n  Location,\n  RouteTarget,\n} from '../../yox-type/src/router'\n\nimport {\n  VNode,\n  Directive,\n} from '../../yox-type/src/vnode'\n\nimport {\n  ComponentOptions,\n} from '../../yox-type/src/options'\n\nimport {\n  CustomEventInterface,\n} from '../../yox-type/src/emitter'\n\nimport {\n  YoxInterface,\n} from '../../yox-type/src/yox'\n\nimport {\n  TRUE,\n  FALSE,\n  UNDEFINED,\n\n  MODE_HISTORY,\n  PREFIX_PARAM,\n  SEPARATOR_PATH,\n  SEPARATOR_SEARCH,\n\n  ROUTER_HOOK_BEFORE_ENTER,\n  ROUTER_HOOK_AFTER_ENTER,\n  ROUTER_HOOK_BEFORE_UPDATE,\n  ROUTER_HOOK_AFTER_UPDATE,\n  ROUTER_HOOK_BEFORE_LEAVE,\n  ROUTER_HOOK_AFTER_LEAVE,\n} from './constant'\n\nimport {\n  API,\n  Mode,\n  Target,\n  RouterOptions,\n  RouteOptions,\n  LinkedRoute,\n  RoutePending,\n  Redirect,\n  RouteCallback,\n} from './type'\n\nimport {\n  HOOK_BEFORE_ROUTE_ENTER,\n  HOOK_AFTER_ROUTE_ENTER,\n  HOOK_BEFORE_ROUTE_UPDATE,\n  HOOK_AFTER_ROUTE_UPDATE,\n  HOOK_BEFORE_ROUTE_LEAVE,\n  HOOK_AFTER_ROUTE_LEAVE,\n} from '../../yox-config/src/config'\n\nimport Hooks from './Hooks'\n\nimport * as queryUtil from './util/query'\nimport * as valueUtil from './util/value'\n\nimport * as hashMode from './mode/hash'\nimport * as historyMode from './mode/history'\n\nlet API: API, hookEvents: Record<string, Listener>, guid = 0\n\nconst ROUTER = '$router',\n\nROUTE = '$route',\n\nROUTE_VIEW = '$routeView',\n\nROUTE_COMPONENT = 'RouteComponent',\n\nEVENT_CLICK = 'click',\n\nEMPTY_FUNCTION = new Function()\n\n/**\n * 格式化路径，确保它以 / 开头，不以 / 结尾\n */\nfunction formatPath(path: string, parentPath: string | void) {\n\n  // 如果不是 / 开头，表示是相对路径\n  if (!API.string.startsWith(path, SEPARATOR_PATH)) {\n    // 确保 parentPath 以 / 结尾\n    if (parentPath) {\n      if (!API.string.endsWith(parentPath, SEPARATOR_PATH)) {\n        parentPath += SEPARATOR_PATH\n      }\n    }\n    else {\n      parentPath = SEPARATOR_PATH\n    }\n    path = parentPath + path\n  }\n\n  // 如果 path 以 / 结尾，删掉它\n  if (path !== SEPARATOR_PATH\n    && API.string.endsWith(path, SEPARATOR_PATH)\n  ) {\n    path = API.string.slice(path, 0, -SEPARATOR_PATH.length)\n  }\n\n  return path\n\n}\n\n/**\n * 把结构化数据序列化成 url\n */\nfunction stringifyUrl(path: string, params: Data | void, query: Data | void) {\n\n  if (/\\/\\:\\w+/.test(path)) {\n\n    const terms: string[] = []\n\n    API.array.each(\n      path.split(SEPARATOR_PATH),\n      function (item) {\n        terms.push(\n          API.string.startsWith(item, PREFIX_PARAM) && params\n            ? params[item.substr(PREFIX_PARAM.length)]\n            : item\n        )\n      }\n    )\n\n    path = terms.join(SEPARATOR_PATH)\n\n  }\n\n  if (query) {\n    const queryStr = queryUtil.stringify(API, query)\n    if (queryStr) {\n      path += SEPARATOR_SEARCH + queryStr\n    }\n  }\n\n  return path\n\n}\n\nfunction toUrl(target: Target, name2Path: Data): string {\n\n  if (API.is.string(target)) {\n    return formatPath(target as string)\n  }\n\n  let route = target as RouteTarget, name = route.name, path: string\n  if (name) {\n    path = name2Path[name]\n    if (process.env.NODE_ENV === 'development') {\n      if (!API.is.string(path)) {\n        API.logger.error(`The route of name \"${name}\" is not found.`)\n      }\n    }\n  }\n  else {\n    path = formatPath(route.path as string)\n  }\n\n  return stringifyUrl(path, route.params, route.query)\n\n}\n\n/**\n * 按照 propTypes 定义的外部数据格式过滤路由参数，这样有两个好处：\n *\n * 1. 避免传入不符预期的数据\n * 2. 避免覆盖 data 定义的数据\n */\nfunction filterProps(route: LinkedRoute, location: Location, options: ComponentOptions) {\n  const result: Data = {}, propTypes = options.propTypes\n  if (propTypes) {\n\n    let props = location.query,\n\n    routeParams = route.params,\n\n    locationParams = location.params\n\n    // 从 location.params 挑出 route.params 定义过的参数\n    if (routeParams && locationParams) {\n      props = props ? API.object.copy(props) : {}\n      for (let i = 0, length = routeParams.length; i < length; i++) {\n        (props as Data)[routeParams[i]] = locationParams[routeParams[i]]\n      }\n    }\n\n    if (props) {\n      for (let key in propTypes) {\n        let value = props[key]\n        if (value !== UNDEFINED) {\n          result[key] = value\n        }\n      }\n    }\n\n  }\n  return result\n}\n\n/**\n * 是否是叶子节点\n * 如果把叶子节点放在 if 中，会出现即使不是定义时的叶子节点，却是运行时的叶子节点\n */\nfunction isLeafRoute(route: LinkedRoute) {\n  const child = route.child\n  return !child || !child.context\n}\n\nfunction updateRoute(instance: YoxInterface, componentHookName: string | void, hookName: string | undefined, upsert?: boolean) {\n  const route = instance[ROUTE] as LinkedRoute\n  if (route) {\n    route.context = upsert ? instance : UNDEFINED\n    if (isLeafRoute(route)) {\n      const router = instance[ROUTER] as Router\n      if (componentHookName && hookName) {\n        router.hook(route, componentHookName, hookName)\n      }\n      if (upsert) {\n        const { pending } = router\n        if (pending) {\n          pending.onComplete()\n          router.pending = UNDEFINED\n        }\n      }\n    }\n  }\n}\n\nexport class Router {\n\n  el: Element\n\n  options: RouterOptions\n\n  routes: LinkedRoute[]\n\n  route404: LinkedRoute\n\n  name2Path: Record<string, string>\n\n  path2Route: Record<string, LinkedRoute>\n\n  mode: Mode\n\n  history: Location[]\n\n  cursor: number\n\n  pending?: RoutePending\n\n  // 路由钩子\n  hooks: Hooks\n\n  // 路由或参数发生了变化会触发此函数\n  handler: Function\n\n  // 当前渲染的路由\n  route?: LinkedRoute\n\n  // 当前地址栏的路径和参数\n  location?: Location\n\n  constructor(options: RouterOptions) {\n\n    const instance = this, el = options.el, route404 = options.route404 || default404\n\n    instance.options = options\n\n    instance.el = API.is.string(el)\n      ? API.dom.find(el as string) as Element\n      : el as Element\n\n    if (process.env.NODE_ENV === 'development') {\n      if (!instance.el) {\n        API.logger.error(`The \"el\" option must be an element or a selector.`)\n        return\n      }\n    }\n\n    instance.mode = options.mode === MODE_HISTORY && historyMode.isSupported\n      ? historyMode\n      : hashMode\n\n    instance.handler = function () {\n\n      const url = instance.mode.current(), { pending } = instance\n\n      if (pending) {\n        const { location } = pending\n        // 通过 push 或 go 触发\n        if (location.url === url) {\n          instance.setHistory(location, pending.cursor)\n          instance.setRoute(location)\n          return\n        }\n        instance.pending = UNDEFINED\n      }\n\n      // 直接修改地址栏触发\n      instance.parseLocation(\n        url,\n        function (location) {\n          if (location) {\n            instance.setHistory(location)\n            instance.setRoute(location)\n          }\n          else {\n            instance.push(instance.route404)\n          }\n        }\n      )\n    }\n\n    instance.routes = []\n    instance.name2Path = {}\n    instance.path2Route = {}\n\n    instance.history = []\n    instance.cursor = -1\n\n    instance.hooks = new Hooks()\n\n    API.array.each(\n      options.routes,\n      function (route) {\n        instance.add(route)\n      }\n    )\n\n    instance.route404 = instance.add(route404)[0]\n\n  }\n\n  /**\n   * 添加一个新的路由\n   */\n  add(routeOptions: RouteOptions) {\n\n    const instance = this,\n\n    newRoutes: LinkedRoute[] = [],\n\n    pathStack: string[] = [],\n\n    routeStack: LinkedRoute[] = [],\n\n    addRoute = function (routeOptions: RouteOptions) {\n\n      let { name, component, children, load } = routeOptions,\n\n      parentPath = API.array.last(pathStack),\n\n      parentRoute = API.array.last(routeStack),\n\n      path = formatPath(routeOptions.path, parentPath),\n\n      route: LinkedRoute = { path, route: routeOptions },\n\n      params: string[] = []\n\n      API.array.each(\n        path.split(SEPARATOR_PATH),\n        function (item) {\n          if (API.string.startsWith(item, PREFIX_PARAM)) {\n            params.push(\n              item.substr(PREFIX_PARAM.length)\n            )\n          }\n        }\n      )\n\n      if (params.length) {\n        route.params = params\n      }\n\n      if (name) {\n        route.name = name\n      }\n\n      // component 和 load 二选一\n      if (component) {\n        route.component = component\n      }\n      else if (load) {\n        route.load = load\n      }\n\n      if (parentRoute) {\n        route.parent = parentRoute\n      }\n\n      if (children) {\n        pathStack.push(path)\n        routeStack.push(route)\n        API.array.each(\n          children,\n          addRoute\n        )\n        routeStack.pop()\n        pathStack.pop()\n      }\n      else {\n\n        newRoutes.push(route)\n        instance.routes.push(route)\n\n        if (name) {\n          if (process.env.NODE_ENV === 'development') {\n            if (API.object.has(instance.name2Path, name)) {\n              API.logger.error(`The name \"${name}\" of the route is existed.`)\n              return\n            }\n          }\n          instance.name2Path[name] = path\n        }\n\n        if (process.env.NODE_ENV === 'development') {\n          if (API.object.has(instance.path2Route, path)) {\n            API.logger.error(`The path \"${path}\" of the route is existed.`)\n            return\n          }\n        }\n\n        instance.path2Route[path] = route\n\n      }\n\n    }\n\n    addRoute(routeOptions)\n\n    return newRoutes\n\n  }\n\n  /**\n   * 删除一个已注册的路由\n   */\n  remove(route: LinkedRoute) {\n\n    const instance = this\n\n    API.array.remove(instance.routes, route)\n\n    if (route.name) {\n      delete instance.name2Path[route.name]\n    }\n\n    delete instance.path2Route[route.path]\n\n  }\n\n  /**\n   * target 有 3 种格式：\n   *\n   * 如果只是简单的 path，直接传字符串\n   *\n   * push('/index')\n   *\n   * 如果需要带参数，可传对象\n   *\n   * push({\n   *   path: '/index',\n   *   params: { },\n   *   query: { }\n   * })\n   *\n   * 如果路由配置了 name，可用 name 代替 path，如下：\n   *\n   * push({\n   *   name: 'index'\n   * })\n   *\n   */\n  push(target: Target) {\n\n    const instance = this, { mode } = instance\n\n    instance.setUrl(\n      toUrl(target, instance.name2Path),\n      EMPTY_FUNCTION,\n      EMPTY_FUNCTION,\n      function (location, pending) {\n        instance.pending = pending\n        if (mode.current() !== location.url) {\n          mode.push(location, instance.handler)\n        }\n        else {\n          instance.setRoute(location)\n        }\n      }\n    )\n\n  }\n\n  /**\n   * 不改变 URL，只修改路由组件\n   */\n  replace(target: Target) {\n\n    const instance = this\n\n    instance.setUrl(\n      toUrl(target, instance.name2Path),\n      function () {\n        instance.replaceHistory(instance.location as Location)\n      },\n      EMPTY_FUNCTION,\n      function (location, pending) {\n        instance.pending = pending\n        instance.setRoute(location)\n      }\n    )\n\n  }\n\n  /**\n   * 前进或后退 n 步\n   */\n  go(n: number) {\n\n    const instance = this,\n\n    { mode } = instance,\n\n    cursor = instance.cursor + n,\n\n    location = instance.history[cursor]\n\n    if (location) {\n      instance.setUrl(\n        stringifyUrl(location.path, location.params, location.query),\n        EMPTY_FUNCTION,\n        EMPTY_FUNCTION,\n        function (location, pending) {\n          pending.cursor = cursor\n          instance.pending = pending\n\n          if (mode.current() !== location.url) {\n            mode.go(n)\n          }\n          else {\n            instance.setHistory(location, cursor)\n            instance.setRoute(location)\n          }\n        }\n      )\n    }\n\n  }\n\n  /**\n   * 启动路由\n   */\n  start() {\n    this.mode.start(API.dom, this.handler)\n  }\n\n  /**\n   * 停止路由\n   */\n  stop() {\n    this.mode.stop(API.dom, this.handler)\n  }\n\n  /**\n   * 钩子函数\n   */\n  hook(route: LinkedRoute, componentHook: string, hook: string, isGuard?: boolean, callback?: Function) {\n\n    const instance = this, { location, hooks, pending } = instance\n\n    hooks\n      .clear()\n      // 先调用组件的钩子\n      .add((route.component as ComponentOptions)[componentHook], route.context)\n      // 再调用路由配置的钩子\n      .add(route.route[hook], route.route)\n      // 最后调用路由实例的钩子\n      .add(instance.options[hook], instance)\n\n    const next = function (value?: false | Target) {\n      if (value === UNDEFINED) {\n        hooks.next(next, isGuard, callback)\n      }\n      else {\n        // 只有前置守卫才有可能走进这里\n        // 此时 instance.location 还是旧地址\n        if (pending) {\n          pending.onAbort()\n          instance.pending = UNDEFINED\n        }\n        if (value === FALSE) {\n          if (location) {\n            instance.push(location)\n          }\n        }\n        else {\n          // 跳转到别的路由\n          instance.push(value)\n        }\n      }\n    }\n\n    next()\n\n  }\n\n  private setHistory(location: Location, index: number | void) {\n\n    const { history, cursor } = this\n\n    // 如果没传 cursor，表示 push\n    if (!API.is.number(index)) {\n      index = cursor + 1\n      // 确保下一个为空\n      // 如果不为空，肯定是调用过 go()，此时直接清掉后面的就行了\n      if (history[index]) {\n        history.length = index\n      }\n    }\n\n    history[index as number] = location\n\n    this.cursor = index as number\n\n  }\n\n  private replaceHistory(location: Location) {\n    const { history, cursor } = this\n    if (history[cursor]) {\n      history[cursor] = location\n    }\n  }\n\n  private setUrl(\n    url: string,\n    onComplete: Function,\n    onAbort: Function,\n    callback: (locaiton: Location, pending: RoutePending) => void\n  ) {\n\n    // 这里无需判断新旧 url 是否相同，因为存在 replace，即使它们相同也不等价于不用跳转\n    const instance = this\n\n    instance.parseLocation(\n      url,\n      function (location) {\n\n        if (location) {\n          callback(\n            location,\n            {\n              location,\n              onComplete,\n              onAbort,\n            }\n          )\n        }\n        else if (process.env.NODE_ENV === 'development') {\n          API.logger.error(`The url \"${url}\" can't match a route.`)\n        }\n\n      }\n    )\n\n  }\n\n  private parseLocation(url: string, callback: (location?: Location) => void) {\n\n    let realpath: string, search: string | void, index = url.indexOf(SEPARATOR_SEARCH)\n\n    if (index >= 0) {\n      realpath = url.slice(0, index)\n      search = url.slice(index + 1)\n    }\n    else {\n      realpath = url\n    }\n\n    // 匹配已注册的 route\n    const instance = this,\n\n    realpathTerms = realpath.split(SEPARATOR_PATH),\n\n    length = realpathTerms.length,\n\n    matchRoute = function (\n      routes: LinkedRoute[],\n      callback: (route?: LinkedRoute, params?: Data) => void\n    ) {\n\n      let index = 0, route: LinkedRoute | void\n\n      loop: while (route = routes[index++]) {\n        const path = route.path\n\n        // 动态路由\n        if (route.params) {\n          const pathTerms = path.split(SEPARATOR_PATH)\n          // path 段数量必须一致，否则没有比较的意义\n          if (length === pathTerms.length) {\n            const params: Data = {}\n            for (let i = 0; i < length; i++) {\n              if (API.string.startsWith(pathTerms[i], PREFIX_PARAM)) {\n                params[pathTerms[i].substr(PREFIX_PARAM.length)] = valueUtil.parse(API, realpathTerms[i])\n              }\n              // 非参数段不相同\n              else if (pathTerms[i] !== realpathTerms[i]) {\n                continue loop\n              }\n            }\n            callback(route, params)\n            return\n          }\n        }\n        // 懒加载路由，前缀匹配成功后，意味着懒加载回来的路由一定有我们想要的\n        else if (route.load && API.string.startsWith(realpath, path)) {\n          const routeCallback: RouteCallback = function (lazyRoute) {\n            instance.remove(route as LinkedRoute)\n            matchRoute(\n              instance.add(lazyRoute['default'] || lazyRoute),\n              callback\n            )\n          }\n          const promise = route.load(routeCallback)\n          if (promise) {\n            promise.then(routeCallback)\n          }\n          return\n        }\n        else if (path === realpath) {\n          callback(route)\n          return\n        }\n      }\n\n      callback()\n\n    }\n\n    matchRoute(\n      instance.routes,\n      function (route, params) {\n        if (route) {\n          const location: Location = {\n            url,\n            path: route.path\n          }\n          if (params) {\n            location.params = params\n          }\n          if (search) {\n            const query = queryUtil.parse(API, search)\n            if (query) {\n              location.query = query\n            }\n          }\n          callback(location)\n        }\n        else {\n          callback()\n        }\n      }\n    )\n\n  }\n\n  private diffRoute(\n    route: LinkedRoute,\n    oldRoute: LinkedRoute | void,\n    onComplete: (route: LinkedRoute, startRoute: LinkedRoute | void) => void,\n    startRoute: LinkedRoute | void,\n    childRoute: LinkedRoute | void,\n    oldTopRoute: LinkedRoute | void\n  ) {\n\n    // 更新链路\n    if (childRoute) {\n      route.child = childRoute\n      childRoute.parent = route\n    }\n\n    if (oldRoute) {\n      // 同级的两个组件不同，疑似起始更新的路由\n      if (oldRoute.component !== route.component) {\n        startRoute = route\n      }\n      else {\n        // 把上次的组件实例搞过来\n        route.context = oldRoute.context\n      }\n    }\n    else {\n      startRoute = route\n    }\n\n    if (route.parent) {\n      this.diffRoute(\n        API.object.copy(route.parent),\n        oldRoute ? oldRoute.parent : UNDEFINED,\n        onComplete,\n        startRoute,\n        route,\n        oldRoute || oldTopRoute\n      )\n      return\n    }\n\n    // 整个组件树全换掉\n    if (startRoute === route) {\n      let context: YoxInterface | void\n      // 当层级较多的路由切换到层级较少的路由\n      if (oldRoute) {\n        while (oldRoute) {\n          context = oldRoute.context\n          oldRoute = oldRoute.parent\n        }\n      }\n      // 当层级较少的路由切换到层级较多的路由\n      else if (oldTopRoute) {\n        context = oldTopRoute.context\n      }\n      if (context) {\n        startRoute.context = context\n      }\n    }\n\n    // 到达根组件，结束\n    onComplete(route, startRoute)\n\n  }\n\n  private patchRoute(\n    route: LinkedRoute,\n    startRoute: LinkedRoute | void\n  ) {\n\n    const instance = this, location = instance.location as Location\n\n    // 从上往下更新 props\n    while (route) {\n\n      let { parent, context, component } = route\n\n      if (route === startRoute) {\n\n        if (parent) {\n\n          context = parent.context as YoxInterface\n          context.forceUpdate(\n            filterProps(\n              parent,\n              location,\n              parent.component as ComponentOptions\n            )\n          )\n\n          context = context[ROUTE_VIEW]\n          if (context) {\n            const props = {}, name = ROUTE_COMPONENT + (++guid)\n            props[ROUTE_COMPONENT] = name\n            context.component(name, component)\n            context.forceUpdate(props)\n          }\n\n        }\n        else {\n\n          if (context) {\n            context.destroy()\n          }\n\n          // 每层路由组件都有 $route 和 $router 属性\n          const extensions = {}\n          extensions[ROUTER] = instance\n          extensions[ROUTE] = route\n\n          const options: ComponentOptions = API.object.extend(\n            {\n              el: instance.el,\n              props: filterProps(route, location, component as ComponentOptions),\n              extensions,\n            },\n            component as ComponentOptions\n          )\n\n          options.events = options.events\n            ? API.object.extend(options.events, hookEvents)\n            : hookEvents\n\n          route.context = new API(options)\n\n        }\n\n      }\n\n      else if (context) {\n        if (context.$vnode) {\n          context[ROUTE] = route\n          context.forceUpdate(\n            filterProps(route, location, component as ComponentOptions)\n          )\n        }\n        else {\n          route.context = UNDEFINED\n        }\n        if (route.child) {\n          route = route.child as LinkedRoute\n          continue\n        }\n      }\n      break\n    }\n  }\n\n  private setRoute(location: Location) {\n\n    let instance = this,\n\n    linkedRoute = instance.path2Route[location.path],\n\n    redirect = linkedRoute.route.redirect\n\n    if (redirect) {\n      if (API.is.func(redirect)) {\n        redirect = (redirect as Redirect)(location)\n      }\n      if (redirect) {\n        instance.push(redirect as Target)\n        return\n      }\n    }\n\n    const newRoute = API.object.copy(linkedRoute),\n\n    oldRoute = instance.route,\n\n    oldLocation = instance.location,\n\n    enterRoute = function () {\n      instance.diffRoute(\n        newRoute,\n        oldRoute,\n        function (route, startRoute) {\n          instance.hook(\n            newRoute,\n            startRoute ? HOOK_BEFORE_ROUTE_ENTER : HOOK_BEFORE_ROUTE_UPDATE,\n            startRoute ? ROUTER_HOOK_BEFORE_ENTER : ROUTER_HOOK_BEFORE_UPDATE,\n            TRUE,\n            function () {\n\n              instance.route = newRoute\n              instance.location = location\n\n              instance.patchRoute(route, startRoute)\n\n            }\n          )\n        }\n      )\n    }\n\n    instance.hooks.setLocation(location, oldLocation)\n\n    if (oldRoute && oldLocation && location.path !== oldLocation.path) {\n      instance.hook(\n        oldRoute,\n        HOOK_BEFORE_ROUTE_LEAVE,\n        ROUTER_HOOK_BEFORE_LEAVE,\n        TRUE,\n        enterRoute\n      )\n      return\n    }\n\n    enterRoute()\n\n  }\n\n}\n\nconst default404 = {\n  path: '/404',\n  component: {\n    template: '<div>This is a default 404 page, please set \"route404\" for your own 404 page.</div>'\n  }\n},\n\ndirective = {\n  bind(node: HTMLElement | YoxInterface, directive: Directive, vnode: VNode) {\n\n    // 当前组件如果是根组件，则没有 $root 属性\n    const $root = vnode.context.$root || vnode.context,\n\n    router = $root[ROUTER] as Router,\n\n    listener = vnode.data[directive.key] = function (_: CustomEventInterface) {\n      let { value, getter } = directive, target: any = value\n      if (value && getter && API.string.has(value as string, '{')) {\n        target = getter()\n      }\n      router[directive.name](target)\n    }\n\n    if (vnode.isComponent) {\n      (node as YoxInterface).on(EVENT_CLICK, listener)\n    }\n    else {\n      API.dom.on(node as HTMLElement, EVENT_CLICK, listener)\n    }\n\n  },\n  unbind(node: HTMLElement | YoxInterface, directive: Directive, vnode: VNode) {\n    const listener = vnode.data[directive.key]\n    if (vnode.isComponent) {\n      (node as YoxInterface).off(EVENT_CLICK, listener)\n    }\n    else {\n      API.dom.off(node as HTMLElement, EVENT_CLICK, listener)\n    }\n  },\n},\n\nRouterView: ComponentOptions = {\n  template: '<$' + ROUTE_COMPONENT + '/>',\n  beforeCreate(options) {\n\n    const context = options.context as YoxInterface,\n\n    route = context[ROUTE].child as LinkedRoute\n\n    if (route) {\n\n      context[ROUTE_VIEW] = this\n\n      const props = options.props = {}, components = options.components = {},\n\n      name = ROUTE_COMPONENT + (++guid)\n\n      props[ROUTE_COMPONENT] = name\n      components[name] = route.component\n\n    }\n\n  },\n  beforeDestroy() {\n    this.$context[ROUTE_VIEW] = UNDEFINED\n  }\n}\n\n/**\n * 版本\n */\nexport const version = process.env.NODE_VERSION\n\n/**\n * 安装插件\n */\nexport function install(Yox: API): void {\n\n  API = Yox\n\n  Yox.directive({\n    push: directive,\n    replace: directive,\n    go: directive,\n  })\n\n  Yox.component('router-view', RouterView)\n\n  hookEvents = {\n    'beforeCreate.hook': function (event: CustomEventInterface, data?: Data) {\n      if (data) {\n        let options = data as ComponentOptions, { context } = options\n        // 当前组件是 <router-view> 中的动态组件\n        if (context && context.$options.beforeCreate === RouterView.beforeCreate) {\n          // 找到渲染 <router-view> 的父级组件，它是一定存在的\n          context = context.$context as YoxInterface\n\n          const router = context[ROUTER] as Router,\n          route = context[ROUTE].child as LinkedRoute\n\n          if (route) {\n            const extensions = options.extensions = {}\n            extensions[ROUTER] = router\n            extensions[ROUTE] = route\n\n            if (router.location) {\n              options.props = filterProps(route, router.location, options)\n            }\n          }\n        }\n      }\n    },\n    'afterMount.hook': function (event: CustomEventInterface) {\n      updateRoute(\n        event.target as YoxInterface,\n        HOOK_AFTER_ROUTE_ENTER,\n        ROUTER_HOOK_AFTER_ENTER,\n        TRUE\n      )\n    },\n    'afterUpdate.hook': function (event: CustomEventInterface) {\n      updateRoute(\n        event.target as YoxInterface,\n        HOOK_AFTER_ROUTE_UPDATE,\n        ROUTER_HOOK_AFTER_UPDATE,\n        TRUE\n      )\n    },\n    'afterDestroy.hook': function (event: CustomEventInterface) {\n      updateRoute(\n        event.target as YoxInterface,\n        HOOK_AFTER_ROUTE_LEAVE,\n        ROUTER_HOOK_AFTER_LEAVE\n      )\n    }\n  }\n\n}\n","import {\n  API,\n} from '../type'\n\nimport {\n  SEPARATOR_QUERY,\n  SEPARATOR_PAIR,\n  FLAG_ARRAY,\n} from '../constant'\n\nimport * as valueUtil from './value'\n\n/**\n * 把 GET 参数解析成对象\n */\nexport function parse(API: API, query: string) {\n  let result: object | undefined\n  API.array.each(\n    query.split(SEPARATOR_QUERY),\n    function (term) {\n\n      let terms = term.split(SEPARATOR_PAIR),\n\n      key = API.string.trim(terms[0]),\n\n      value = terms[1]\n\n      if (key) {\n        if (!result) {\n          result = {}\n        }\n        value = valueUtil.parse(API, value)\n        if (API.string.endsWith(key, FLAG_ARRAY)) {\n          key = API.string.slice(key, 0, -FLAG_ARRAY.length)\n          API.array.push(\n            result[key] || (result[key] = []),\n            value\n          )\n        }\n        else {\n          result[key] = value\n        }\n      }\n\n    }\n  )\n  return result\n}\n\n/**\n * 把对象解析成 key1=value1&key2=value2\n */\nexport function stringify(API: API, query: object) {\n  const result: string[] = []\n  for (let key in query) {\n    const value = query[key]\n    if (API.is.array(value)) {\n      API.array.each(\n        value,\n        function (value) {\n          const str = valueUtil.stringify(API, value)\n          if (API.is.string(str)) {\n            result.push(\n              key + FLAG_ARRAY + SEPARATOR_PAIR + str\n            )\n          }\n        }\n      )\n    }\n    else {\n      const str = valueUtil.stringify(API, value)\n      if (API.is.string(str)) {\n        result.push(\n          key + SEPARATOR_PAIR + str\n        )\n      }\n    }\n  }\n  return result.join(SEPARATOR_QUERY)\n}\n"],"names":["WINDOW","window","LOCATION","location","HISTORY","history","UNDEFINED","NULL","TRUE","FALSE","RAW_NULL","RAW_TRUE","RAW_FALSE","PREFIX_PARAM","SEPARATOR_PATH","SEPARATOR_SEARCH","SEPARATOR_QUERY","SEPARATOR_PAIR","FLAG_ARRAY","MODE_HISTORY","ROUTER_HOOK_AFTER_ENTER","ROUTER_HOOK_AFTER_UPDATE","ROUTER_HOOK_AFTER_LEAVE","HOOK_AFTER_ROUTE_ENTER","HOOK_AFTER_ROUTE_UPDATE","HOOK_AFTER_ROUTE_LEAVE","Hooks","to","from","this","list","hook","ctx","push","fn","next","isGuard","callback","task","shift","call","parse","API","value","result","is","numeric","string","decodeURIComponent","stringify","encodeURIComponent","number","boolean","toString","HASH_PREFIX","HASH_CHANGE","api","handler","on","off","hash","url","n","go","href","index","indexOf","substr","length","POP_STATE","isSupported","hookEvents","pushState","pathname","search","guid","ROUTER","ROUTE","EMPTY_FUNCTION","Function","formatPath","path","parentPath","startsWith","endsWith","slice","stringifyUrl","params","query","test","terms_1","array","each","split","item","join","queryStr","key","str","valueUtil.stringify","queryUtil.stringify","toUrl","target","name2Path","route","name","filterProps","options","propTypes","props","routeParams","locationParams","object","copy","i","updateRoute","instance","componentHookName","hookName","upsert","context","child","isLeafRoute","router","pending","onComplete","el","route404","default404","dom","find","mode","historyMode.isSupported","historyMode","hashMode","current","setHistory","cursor","setRoute","parseLocation","routes","path2Route","hooks","add","Router","routeOptions","newRoutes","pathStack","routeStack","addRoute","component","children","load","last","parentRoute","parent","pop","remove","setUrl","replaceHistory","start","stop","componentHook","clear","onAbort","realpath","realpathTerms","matchRoute","loop","pathTerms","valueUtil.parse","routeCallback","lazyRoute","promise","then","term","terms","trim","queryUtil.parse","oldRoute","startRoute","childRoute","oldTopRoute","diffRoute","forceUpdate","destroy","extensions","extend","events","$vnode","linkedRoute","redirect","func","newRoute","oldLocation","enterRoute","patchRoute","setLocation","template","directive","bind","node","vnode","$root","listener","data","_","getter","has","isComponent","unbind","RouterView","beforeCreate","components","beforeDestroy","$context","Yox","replace","beforeCreate.hook","event","$options","afterMount.hook","afterUpdate.hook","afterDestroy.hook"],"mappings":"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"}