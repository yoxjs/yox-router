{"version":3,"file":"yox-router.min.js","sources":["../../yox-common/src/util/env.ts","../src/Hooks.ts","../src/constant.ts","../src/value.ts","../src/query.ts","../src/index.ts","../src/location.ts"],"sourcesContent":["/**\n * 为了压缩，定义的常量\n */\nexport const TRUE = true\nexport const FALSE = false\nexport const NULL = null\nexport const UNDEFINED = void 0\n\nexport const RAW_TRUE = 'true'\nexport const RAW_FALSE = 'false'\nexport const RAW_NULL = 'null'\nexport const RAW_UNDEFINED = 'undefined'\n\nexport const RAW_KEY = 'key'\nexport const RAW_REF = 'ref'\nexport const RAW_SLOT = 'slot'\nexport const RAW_NAME = 'name'\n\nexport const RAW_FILTER = 'filter'\nexport const RAW_PARTIAL = 'partial'\nexport const RAW_COMPONENT = 'component'\nexport const RAW_DIRECTIVE = 'directive'\nexport const RAW_TRANSITION = 'transition'\n\nexport const RAW_THIS = 'this'\nexport const RAW_VALUE = 'value'\nexport const RAW_LENGTH = 'length'\nexport const RAW_FUNCTION = 'function'\nexport const RAW_TEMPLATE = 'template'\nexport const RAW_WILDCARD = '*'\n\nexport const KEYPATH_PARENT = '..'\nexport const KEYPATH_CURRENT = RAW_THIS\n\nexport const RAW_MINUS_ONE = -1\n\n/**\n * Single instance for window in browser\n */\nexport const WINDOW = typeof window !== RAW_UNDEFINED ? window : UNDEFINED\n\n/**\n * Single instance for document in browser\n */\nexport const DOCUMENT = typeof document !== RAW_UNDEFINED ? document : UNDEFINED\n\n/**\n * tap 事件\n *\n * 非常有用的抽象事件，比如 pc 端是 click 事件，移动端是 touchend 事件\n *\n * 这样只需 on-tap=\"handler\" 就可以完美兼容各端\n *\n * 框架未实现此事件，通过 Yox.dom.specialEvents 提供给外部扩展\n *\n */\nexport const EVENT_TAP = 'tap'\n\n/**\n * 点击事件\n */\nexport const EVENT_CLICK = 'click'\n\n/**\n * 输入事件\n */\nexport const EVENT_INPUT = 'input'\n\n/**\n * 变化事件\n */\nexport const EVENT_CHANGE = 'change'\n\n/**\n * 唯一内置的特殊事件：model\n */\nexport const EVENT_MODEL = 'model'\n\n/**\n * Single instance for noop function\n */\nexport const EMPTY_FUNCTION = function () {\n  /** yox */\n}\n\n/**\n * 空对象，很多地方会用到，比如 `a || EMPTY_OBJECT` 确保是个对象\n */\nexport const EMPTY_OBJECT = Object.freeze({})\n\n/**\n * 空数组\n */\nexport const EMPTY_ARRAY = Object.freeze([])\n\n/**\n * 空字符串\n */\nexport const EMPTY_STRING = ''","import Task from '../../yox-type/src/interface/Task'\nimport YoxOptions from '../../yox-type/src/options/Yox'\nimport { Router } from './index'\n\nimport * as typeUtil from './type'\n\nexport default class Hooks {\n\n  name: string\n\n  list: Task[]\n\n  to: typeUtil.Location\n\n  from: typeUtil.Location | void\n\n  setLocation(to: typeUtil.Location, from: typeUtil.Location | void) {\n    this.to = to\n    this.from = from\n    return this\n  }\n\n  setName(name: string) {\n    this.name = name\n    this.list = []\n    return this\n  }\n\n  add(target: YoxOptions | typeUtil.RouteOptions | Router | void, ctx: any) {\n    const { name, list } = this\n    if (target && target[name]) {\n      list.push({\n        fn: target[name],\n        ctx,\n      })\n    }\n    return this\n  }\n\n  next(next: typeUtil.Next, isGuard?: boolean, callback?: typeUtil.Callback) {\n    const task = this.list.shift()\n    if (task) {\n      if (isGuard) {\n        task.fn.call(task.ctx, this.to, this.from, next)\n      }\n      else {\n        task.fn.call(task.ctx, this.to, this.from)\n        next()\n      }\n    }\n    else if (callback) {\n      callback()\n    }\n  }\n\n}","// hash 前缀，Google 的规范是 #! 开头，如 #!/path/sub?key=value\nexport const PREFIX_HASH = '#!'\n\n// path 中的参数前缀，如 #!/user/:userId\nexport const PREFIX_PARAM = ':'\n\n// path 分隔符\nexport const SEPARATOR_PATH = '/'\n\n// path 和 search 的分隔符\nexport const SEPARATOR_SEARCH = '?'\n\n// 导航钩子 - 路由进入之前\nexport const HOOK_BEFORE_ENTER = 'beforeEnter'\n\n// 导航钩子 - 路由进入之后\nexport const HOOK_AFTER_ENTER = 'afterEnter'\n\n// 导航钩子 - 路由离开之前\nexport const HOOK_BEFORE_LEAVE = 'beforeLeave'\n\n// 导航钩子 - 路由离开之后\nexport const HOOK_AFTER_LEAVE = 'afterLeave'","import * as env from '../../yox-common/src/util/env'\nimport YoxClass from '../../yox-type/src/interface/YoxClass'\n\n/**\n * 把字符串 value 解析成最合适的类型\n */\nexport function parse(Yox: YoxClass, value: string) {\n  let result: any\n  if (Yox.is.numeric(value)) {\n    result = +value\n  }\n  else if (Yox.is.string(value)) {\n    if (value === env.RAW_TRUE) {\n      result = env.TRUE\n    }\n    else if (value === env.RAW_FALSE) {\n      result = env.FALSE\n    }\n    else if (value === env.RAW_NULL) {\n      result = env.NULL\n    }\n    else if (value === env.RAW_UNDEFINED) {\n      result = env.UNDEFINED\n    }\n    else {\n      result = decodeURIComponent(value)\n    }\n  }\n  return result\n}\n\nexport function stringify(Yox: YoxClass, value: any): string {\n  if (Yox.is.string(value)) {\n    return encodeURIComponent(value)\n  }\n  else if (Yox.is.number(value) || Yox.is.boolean(value)) {\n    return value.toString()\n  }\n  else if (value === env.NULL) {\n    return env.RAW_NULL\n  }\n  return env.RAW_UNDEFINED\n}","\nimport YoxClass from '../../yox-type/src/interface/YoxClass'\n\nimport * as valueUtil from './value'\n\n// query 分隔符\nconst SEPARATOR_QUERY = '&',\n\n// 键值对分隔符\nSEPARATOR_PAIR = '=',\n\n// 参数中的数组标识\nFLAG_ARRAY = '[]'\n\n/**\n * 把 GET 参数解析成对象\n */\nexport function parse(Yox: YoxClass, query: string) {\n  let result: Object | undefined\n  Yox.array.each(\n    query.split(SEPARATOR_QUERY),\n    function (term) {\n\n      let terms = term.split(SEPARATOR_PAIR),\n\n      key = Yox.string.trim(terms[0]),\n\n      value = terms[1]\n\n      if (key) {\n        if (!result) {\n          result = {}\n        }\n        value = valueUtil.parse(Yox, value)\n        if (Yox.string.endsWith(key, FLAG_ARRAY)) {\n          key = Yox.string.slice(key, 0, -FLAG_ARRAY.length)\n          Yox.array.push(\n            result[key] || (result[key] = []),\n            value\n          )\n        }\n        else {\n          result[key] = value\n        }\n      }\n\n    }\n  )\n  return result\n}\n\n/**\n * 把对象解析成 key1=value1&key2=value2\n */\nexport function stringify(Yox: YoxClass, query: Object) {\n  const result: string[] = []\n  for (let key in query) {\n    const value = query[key]\n    if (Yox.is.array(value)) {\n      Yox.array.each(\n        value,\n        function (value) {\n          result.push(\n            key + FLAG_ARRAY + SEPARATOR_PAIR + valueUtil.stringify(Yox, value)\n          )\n        }\n      )\n    }\n    else {\n      result.push(\n        key + SEPARATOR_PAIR + valueUtil.stringify(Yox, value)\n      )\n    }\n  }\n  return result.join(SEPARATOR_QUERY)\n}\n","import * as type from '../../yox-type/src/type'\n\nimport * as env from '../../yox-common/src/util/env'\n\nimport API from '../../yox-type/src/interface/API'\nimport Yox from '../../yox-type/src/interface/Yox'\nimport YoxClass from '../../yox-type/src/interface/YoxClass'\n\nimport YoxOptions from '../../yox-type/src/options/Yox'\nimport VNode from '../../yox-type/src/vnode/VNode'\nimport Directive from '../../yox-type/src/vnode/Directive'\nimport CustomEvent from '../../yox-type/src/event/CustomEvent'\n\nimport Hooks from './Hooks'\nimport * as constant from './constant'\nimport * as typeUtil from './type'\nimport * as locationUtil from './location'\n\nlet Yox: YoxClass, registry: Yox, domApi: API\n\nconst WINDOW = window,\n\nLOCATION = WINDOW.location,\n\nROUTER = '$router',\n\nROUTE = '$route',\n\nROUTE_VIEW = '$routeView',\n\nROUTE_COMPONENT = 'RouteComponent',\n\nEVENT_CLICK = 'click'\n\n/**\n * 格式化路径，确保它以 / 开头，不以 / 结尾\n */\nfunction formatPath(path: string, parentPath: string | void) {\n\n  // 如果 path 以 / 结尾，删掉它\n  // 比如 { path: 'index/' }\n  if (Yox.string.endsWith(path, constant.SEPARATOR_PATH)) {\n    path = Yox.string.slice(path, 0, -1)\n  }\n\n  // 如果 path 不是以 / 开头，有两种情况：\n  // 1. 没有上级或上级是 ''，需要自动加 / 前缀\n  // 2. 相对上级的路径，自动替换最后一个 / 后面的路径\n  if (!Yox.string.startsWith(path, constant.SEPARATOR_PATH)) {\n\n    if (path) {\n      if (Yox.string.falsy(parentPath)) {\n        path = constant.SEPARATOR_PATH + path\n      }\n      else {\n        path = parentPath + constant.SEPARATOR_PATH + path\n      }\n    }\n    else if (parentPath) {\n      path = parentPath\n    }\n\n  }\n\n  return path\n}\n\nfunction toLocation(target: typeUtil.Target, name2Path: type.data): typeUtil.Location {\n\n  const location: typeUtil.Location = {\n    path: env.EMPTY_STRING\n  }\n\n  if (Yox.is.string(target)) {\n    location.path = formatPath(target as string)\n  }\n  else {\n    const route = target as typeUtil.RouteTarget, name = route.name\n    if (name) {\n      location.path = name2Path[name]\n      if (process.env.NODE_ENV === 'dev') {\n        if (!Yox.is.string(location.path)) {\n          Yox.logger.error(`The route of name[${name}] is not found.`)\n        }\n      }\n    }\n    else {\n      location.path = formatPath(route.path as string)\n    }\n    if (route.params) {\n      location.params = route.params\n    }\n    if (route.query) {\n      location.query = route.query\n    }\n  }\n\n  return location\n\n}\n\n/**\n * 按照 propTypes 定义的外部数据格式过滤路由参数，这样有两个好处：\n *\n * 1. 避免传入不符预期的数据\n * 2. 避免覆盖 data 定义的数据\n */\nfunction filterProps(route: typeUtil.LinkedRoute, location: typeUtil.Location, options: YoxOptions) {\n  const result: type.data = {}, propTypes = options.propTypes\n  if (propTypes) {\n\n    let props = location.query,\n\n    routeParams = route.params,\n\n    locationParams = location.params\n\n    // 从 location.params 挑出 route.params 定义过的参数\n    if (routeParams && locationParams) {\n      props = props ? Yox.object.copy(props) : {}\n      for (let i = 0, key: string; key = routeParams[i]; i++) {\n        (props as type.data)[key] = locationParams[key]\n      }\n    }\n\n    if (props) {\n      for (let key in propTypes) {\n        result[key] = Yox.checkProp(key, props[key], propTypes[key])\n      }\n    }\n\n  }\n  return result\n}\n\nexport class Router {\n\n  el: Element\n\n  routes: typeUtil.LinkedRoute[]\n\n  route404: typeUtil.LinkedRoute\n\n  name2Path: Record<string, string>\n\n  path2Route: Record<string, typeUtil.LinkedRoute>\n\n  history: typeUtil.Location[]\n\n  cursor: number\n\n  loading: typeUtil.Loading | void\n\n  hooks: Hooks\n\n  // 路由或参数发生了变化会触发此函数\n  onChange: Function\n\n  // 当前渲染的路由\n  route?: typeUtil.LinkedRoute\n\n  // 当前地址栏的路径和参数\n  location?: typeUtil.Location\n\n  [constant.HOOK_BEFORE_LEAVE]?: typeUtil.BeforeHook\n\n  [constant.HOOK_BEFORE_ENTER]?: typeUtil.BeforeHook\n\n  [constant.HOOK_AFTER_ENTER]?: typeUtil.AfterHook\n\n  [constant.HOOK_AFTER_LEAVE]?: typeUtil.AfterHook\n\n  constructor(options: typeUtil.RouterOptions) {\n\n    const instance = this, route404 = options.route404\n\n    instance.el = options.el\n\n    /**\n     * hashchange 事件处理函数\n     * 此函数必须写在实例上，不能写在类上\n     * 否则一旦解绑，所有实例都解绑了\n     */\n    instance.onChange = function () {\n\n      let hashStr = LOCATION.hash, { loading, routes, route404 } = instance\n\n      // 通过 push 或 replace 触发的\n      if (loading) {\n        if (loading.hash === hashStr) {\n          instance.setRoute(\n            loading.location,\n            loading.route\n          )\n          return\n        }\n        instance.loading = env.UNDEFINED\n      }\n\n      // 如果不以 PREFIX_HASH 开头，表示不合法\n      hashStr = hashStr.indexOf(constant.PREFIX_HASH) === 0\n        ? hashStr.substr(constant.PREFIX_HASH.length)\n        : ''\n\n      // 直接修改地址栏触发\n      const location = locationUtil.parse(Yox, routes, hashStr)\n      if (location) {\n        instance.setRoute(location, instance.path2Route[location.path])\n      }\n      else {\n        instance.replace(route404)\n      }\n\n    }\n\n    if (process.env.NODE_ENV === 'dev') {\n      if (!route404) {\n        Yox.logger.error(`Route for 404 is required.`)\n        return\n      }\n    }\n\n    instance.routes = []\n    instance.name2Path = {}\n    instance.path2Route = {}\n\n    instance.history = []\n    instance.cursor = -1\n\n    instance.hooks = new Hooks()\n\n    instance.add(options.routes)\n    instance.add([route404])\n\n    instance.route404 = Yox.array.last(instance.routes) as typeUtil.LinkedRoute\n\n  }\n\n  /**\n   * 添加新的路由\n   */\n  add(routes: typeUtil.RouteOptions[]) {\n\n    let instance = this, pathStack: any = [], routeStack: any = [],\n\n    callback = function (routeOptions: typeUtil.RouteOptions) {\n\n      let { name, path, component, children } = routeOptions,\n\n      parentPath: string | void = pathStack[pathStack.length - 1],\n\n      parentRoute: typeUtil.LinkedRoute | void = routeStack[routeStack.length - 1]\n\n      path = formatPath(path, parentPath)\n\n      const route: typeUtil.LinkedRoute = { path, component, route: routeOptions },\n\n      params: string[] = []\n\n      Yox.array.each(\n        path.split(constant.SEPARATOR_PATH),\n        function (item) {\n          if (Yox.string.startsWith(item, constant.PREFIX_PARAM)) {\n            params.push(\n              item.substr(constant.PREFIX_PARAM.length)\n            )\n          }\n        }\n      )\n\n      if (params.length) {\n        route.params = params\n      }\n\n      if (parentRoute) {\n        route.parent = parentRoute\n      }\n\n      if (children) {\n        pathStack.push(path)\n        routeStack.push(route)\n        Yox.array.each(\n          children,\n          callback\n        )\n        routeStack.pop()\n        pathStack.pop()\n      }\n      else {\n\n        instance.routes.push(route)\n\n        if (name) {\n          if (process.env.NODE_ENV === 'dev') {\n            if (Yox.object.has(instance.name2Path, name)) {\n              Yox.logger.error(`Name[${name}] of the route is existed.`)\n              return\n            }\n          }\n          instance.name2Path[name] = path\n        }\n\n        if (process.env.NODE_ENV === 'dev') {\n          if (Yox.object.has(instance.path2Route, path)) {\n            Yox.logger.error(`path [${path}] of the route is existed.`)\n            return\n          }\n        }\n\n        instance.path2Route[path] = route\n\n      }\n\n    }\n\n    Yox.array.each(\n      routes,\n      callback\n    )\n\n    pathStack = routeStack = env.UNDEFINED\n\n  }\n\n  /**\n   * 真正执行路由切换操作的函数\n   *\n   * target 有 2 种格式：\n   *\n   * 如果只是简单的 path，直接传字符串\n   *\n   * push('/index')\n   *\n   * 如果需要带参数，可传对象\n   *\n   * push({\n   *   path: '/index',\n   *   params: { },\n   *   query: { }\n   * })\n   *\n   * 如果路由配置了 name，可用 name 代替 path，如下：\n   *\n   * push({\n   *   name: 'index'\n   * })\n   *\n   */\n  push(target: typeUtil.Target) {\n\n    const instance = this, location = toLocation(target, instance.name2Path)\n\n    instance.setHash(\n      location,\n      function () {\n        const history = instance.history, cursor = instance.cursor + 1\n        // 确保下一个为空\n        // 如果不为空，肯定是调用过 go()，此时直接清掉后面的就行了\n        if (history[cursor]) {\n          history.length = cursor\n        }\n        history[cursor] = location\n        instance.cursor = cursor\n      },\n      env.EMPTY_FUNCTION\n    )\n\n  }\n\n  replace(target: typeUtil.Target) {\n\n    const instance = this, location = toLocation(target, instance.name2Path)\n\n    instance.setHash(\n      location,\n      function () {\n        const history = instance.history, cursor = instance.cursor\n        if (history[cursor]) {\n          history[cursor] = location\n        }\n      },\n      env.EMPTY_FUNCTION\n    )\n\n  }\n\n  go(offset: number) {\n\n    const instance = this,\n\n    cursor = instance.cursor + offset,\n\n    location = instance.history[cursor]\n\n    if (location) {\n      instance.setHash(\n        location,\n        function () {\n          instance.cursor = cursor\n        },\n        env.EMPTY_FUNCTION\n      )\n    }\n\n  }\n\n  /**\n   * 启动路由\n   */\n  start() {\n    domApi.on(window, 'hashchange', this.onChange as type.listener)\n    this.onChange()\n  }\n\n  /**\n   * 停止路由\n   */\n  stop() {\n    domApi.off(window, 'hashchange', this.onChange as type.listener)\n  }\n\n  /**\n   * 路由守卫\n   */\n  guard(route: typeUtil.LinkedRoute, name: string, isGuard?: boolean, callback?: typeUtil.Callback) {\n\n    // 必须是叶子节点\n    // 如果把叶子节点放在 if 中，会出现即使不是定义时的叶子节点，却是运行时的叶子节点\n    const child = route.child\n    if (child && child.context) {\n      return\n    }\n\n    const instance = this, { location, hooks, loading } = instance, { to, from } = hooks\n\n    if (!from || from.path !== to.path) {\n\n      hooks\n        .setName(name)\n        // 先调用组件的钩子\n        .add(route.options, route.context)\n        // 再调用路由配置的钩子\n        .add(route.route, route.route)\n        // 最后调用路由实例的钩子\n        .add(instance, instance)\n\n      const next = function (value?: false | typeUtil.Target) {\n        if (value === env.UNDEFINED) {\n          hooks.next(next, isGuard, callback)\n        }\n        else {\n          // 只有前置守卫才有可能走进这里\n          // 此时 instance.location 还是旧地址\n          if (loading) {\n            loading.onAbort()\n            instance.loading = env.UNDEFINED\n          }\n          if (value === env.FALSE) {\n            if (location) {\n              instance.replace(location)\n            }\n          }\n          else {\n            // 跳转到别的路由\n            instance.push(value)\n          }\n        }\n      }\n\n      next()\n\n    }\n    else if (callback) {\n      callback()\n    }\n\n  }\n\n  private setHash(\n    location: typeUtil.Location,\n    onComplete: typeUtil.RouteComplete,\n    onAbort: typeUtil.RouteAbort\n  ) {\n\n    let instance = this,\n\n    route = instance.path2Route[location.path],\n\n    hash: string\n\n    if (route) {\n      hash = locationUtil.stringify(Yox, location)\n    }\n    else {\n      route = instance.route404\n      hash = route.path\n    }\n\n    hash = constant.PREFIX_HASH + hash\n\n    if (hash === LOCATION.hash) {\n      return\n    }\n\n    instance.loading = {\n      location,\n      route,\n      hash,\n      onComplete,\n      onAbort,\n    }\n\n    LOCATION.hash = hash\n\n  }\n\n  private diffRoute(\n    route: typeUtil.LinkedRoute,\n    oldRoute: typeUtil.LinkedRoute | void,\n    complete: typeUtil.DiffComplete,\n    startRoute: typeUtil.LinkedRoute | void,\n    childRoute: typeUtil.LinkedRoute | void,\n  ) {\n    const instance = this\n    // 不论是同步还是异步组件，都可以通过 registry.loadComponent 取到 options\n    registry.loadComponent(\n      route.component,\n      function (options) {\n\n        route.options = options\n\n        // 更新链路\n        if (childRoute) {\n          route.child = childRoute\n          childRoute.parent = route\n        }\n\n        if (oldRoute) {\n          // 同级的两个组件不同，疑似起始更新的路由\n          if (oldRoute.options !== options) {\n            startRoute = route\n          }\n          else {\n            // 把上次的组件实例搞过来\n            route.context = oldRoute.context\n          }\n        }\n        else {\n          startRoute = route\n        }\n\n        if (route.parent) {\n          instance.diffRoute(\n            Yox.object.copy(route.parent),\n            oldRoute ? oldRoute.parent : env.UNDEFINED,\n            complete,\n            startRoute,\n            route,\n          )\n          return\n        }\n\n        // 到达根组件，结束\n        complete(route, startRoute)\n\n      }\n    )\n  }\n\n  private updateRoute(\n    route: typeUtil.LinkedRoute,\n    startRoute: typeUtil.LinkedRoute | void\n  ) {\n\n    const instance = this, location = instance.location as typeUtil.Location\n\n    // 从上往下更新 props\n    while (env.TRUE) {\n\n      let { parent, context, component, options } = route\n\n      if (route === startRoute) {\n\n        if (parent) {\n\n          context = parent.context as Yox\n          context.forceUpdate(\n            filterProps(\n              parent,\n              location,\n              parent.options as YoxOptions\n            )\n          )\n\n          context = context[ROUTE_VIEW]\n          if (context) {\n            const props = {}\n            props[ROUTE_COMPONENT] = component\n            context.component(component, options)\n            context.forceUpdate(props)\n          }\n\n        }\n        else {\n\n          if (context) {\n            context.destroy()\n          }\n\n          // 每层路由组件都有 $route 和 $router 属性\n          const extensions = {}\n          extensions[ROUTER] = instance\n          extensions[ROUTE] = route\n\n          route.context = new Yox(\n            Yox.object.extend(\n              {\n                el: instance.el,\n                props: filterProps(route, location, options as YoxOptions),\n                extensions,\n              },\n              options as YoxOptions\n            )\n          )\n\n        }\n\n      }\n\n      else if (context) {\n        context[ROUTE] = route\n        context.forceUpdate(\n          filterProps(route, location, options as YoxOptions)\n        )\n        // 如果 <router-view> 定义在 if 里\n        // 当 router-view 从无到有时，这里要读取最新的 child\n        // 当 router-view 从有到无时，这里要判断它是否存在\n        if (context[ROUTE_VIEW] && route.child) {\n          route = route.child as typeUtil.LinkedRoute\n          continue\n        }\n      }\n      break\n    }\n  }\n\n  private setRoute(\n    location: typeUtil.Location,\n    route: typeUtil.LinkedRoute\n  ) {\n\n    const instance = this,\n\n    newRoute = Yox.object.copy(route),\n\n    oldRoute = instance.route,\n\n    enterRoute = function () {\n      instance.diffRoute(\n        newRoute,\n        oldRoute,\n        function (route, startRoute) {\n          instance.guard(\n            newRoute,\n            constant.HOOK_BEFORE_ENTER,\n            env.TRUE,\n            function () {\n\n              instance.route = newRoute\n              instance.location = location\n\n              instance.updateRoute(route, startRoute)\n\n            }\n          )\n        }\n      )\n    }\n\n    instance.hooks.setLocation(location, instance.location)\n\n    if (oldRoute) {\n      instance.guard(\n        oldRoute,\n        constant.HOOK_BEFORE_LEAVE,\n        env.TRUE,\n        enterRoute\n      )\n    }\n    else {\n      enterRoute()\n    }\n\n  }\n\n}\n\nconst directive = {\n  bind(node: HTMLElement | Yox, directive: Directive, vnode: VNode) {\n\n    // 当前组件如果是根组件，则没有 $root 属性\n    const $root = vnode.context.$root || vnode.context,\n\n    router = $root[ROUTER] as Router,\n\n    listener = function (_: CustomEvent) {\n      const value = directive.getter && directive.getter()\n      router.push(value != env.NULL ? value : directive.value)\n    }\n\n    if (vnode.isComponent) {\n      (node as Yox).on(EVENT_CLICK, listener)\n      vnode.data[directive.key] = function () {\n        (node as Yox).off(EVENT_CLICK, listener)\n      }\n    }\n    else {\n      domApi.on(node as HTMLElement, EVENT_CLICK, listener)\n      vnode.data[directive.key] = function () {\n        domApi.off(node as HTMLElement, EVENT_CLICK, listener)\n      }\n    }\n\n  },\n  unbind(node: HTMLElement | Yox, directive: Directive, vnode: VNode) {\n    vnode.data[directive.key]()\n  },\n}\n\nconst RouterView: YoxOptions = {\n  template: '<$' + ROUTE_COMPONENT + '/>',\n  beforeCreate(options) {\n\n    const $parent = options.parent as Yox,\n\n    route = $parent[ROUTE].child as typeUtil.LinkedRoute\n\n    if (route) {\n\n      $parent[ROUTE_VIEW] = this\n\n      const props = {}, components = {}\n\n      props[ROUTE_COMPONENT] = route.component\n      components[route.component] = route.options\n\n      options.props = props\n      options.components = components\n\n    }\n\n  },\n  beforeDestroy() {\n    this.$parent[ROUTE_VIEW] = env.UNDEFINED\n  }\n}\n\n/**\n * 版本\n */\nexport const version = process.env.NODE_VERSION\n\n/**\n * 注册全局组件，路由实例可共享\n */\nexport function register(\n  name: string | Record<string, type.component>,\n  component?: type.component\n): void {\n  registry.component(name, component)\n}\n\n/**\n * 安装插件\n */\nexport function install(Class: YoxClass): void {\n\n  Yox = Class\n  registry = new Class()\n  domApi = Class.dom as API\n\n  Yox.directive('href', directive)\n\n  // 提供两种风格\n  Yox.component({\n    RouterView: RouterView,\n    'router-view': RouterView,\n  })\n\n  const { beforeCreate, afterMount, afterDestroy } = Yox\n\n  Yox.beforeCreate = function (options) {\n\n    if (beforeCreate) {\n      beforeCreate(options)\n    }\n\n    let parent = options.parent\n\n    // 处理 <router-view> 嵌入的组件\n    if (parent && options.beforeCreate !== RouterView.beforeCreate) {\n\n      // parent 是 <router-view> 实例，得再上一层才是路由组件\n      parent = parent.$parent\n      if (parent) {\n        const router = parent[ROUTER] as Router,\n        route = parent[ROUTE].child as typeUtil.LinkedRoute\n\n        if (router && route) {\n          const extensions = options.extensions = {}\n\n          extensions[ROUTER] = router\n          extensions[ROUTE] = route\n\n          if (router.location) {\n            options.props = filterProps(route, router.location, options)\n          }\n        }\n      }\n\n    }\n  }\n  Yox.afterMount = function (instance) {\n\n    if (afterMount) {\n      afterMount(instance)\n    }\n\n    const route = instance[ROUTE] as typeUtil.LinkedRoute\n    if (route) {\n      const router = instance[ROUTER] as Router\n      route.context = instance\n      router.guard(route, constant.HOOK_AFTER_ENTER)\n\n      const loading = router.loading\n      if (loading) {\n        loading.onComplete()\n        router.loading = env.UNDEFINED\n      }\n    }\n  }\n\n  Yox.afterDestroy = function (instance) {\n\n    if (afterDestroy) {\n      afterDestroy(instance)\n    }\n\n    const route = instance[ROUTE] as typeUtil.LinkedRoute\n    if (route) {\n      const router = instance[ROUTER] as Router\n      route.context = env.UNDEFINED\n      router.guard(route, constant.HOOK_AFTER_LEAVE)\n    }\n\n  }\n\n}\n","import * as env from '../../yox-common/src/util/env'\nimport YoxClass from '../../yox-type/src/interface/YoxClass'\n\nimport * as type from './type'\nimport * as constant from './constant'\nimport * as valueUtil from './value'\nimport * as queryUtil from './query'\n\n/**\n * 解析 path 中的参数\n */\nfunction parseParams(Yox: YoxClass, realpath: string, path: string) {\n\n  let result: Object | undefined,\n\n  realpathTerms = realpath.split(constant.SEPARATOR_PATH),\n\n  pathTerms = path.split(constant.SEPARATOR_PATH)\n\n  if (realpathTerms.length === pathTerms.length) {\n    Yox.array.each(\n      pathTerms,\n      function (item, index) {\n        if (Yox.string.startsWith(item, constant.PREFIX_PARAM)) {\n          if (!result) {\n            result = {}\n          }\n          result[item.substr(constant.PREFIX_PARAM.length)] = valueUtil.parse(Yox, realpathTerms[index])\n        }\n      }\n    )\n  }\n\n  return result\n\n}\n\n/**\n * 通过 realpath 获取配置的路由\n */\nfunction getRouteByRealpath(Yox: YoxClass, routes: type.LinkedRoute[], realpath: string) {\n\n  let result: type.LinkedRoute | undefined,\n\n  realpathTerms = realpath.split(constant.SEPARATOR_PATH),\n\n  length = realpathTerms.length\n\n  Yox.array.each(\n    routes,\n    function (route) {\n      if (route.params) {\n        const pathTerms = route.path.split(constant.SEPARATOR_PATH)\n        if (length === pathTerms.length) {\n          for (let i = 0; i < length; i++) {\n            // 非参数段不相同\n            if (!Yox.string.startsWith(pathTerms[i], constant.PREFIX_PARAM)\n              && pathTerms[i] !== realpathTerms[i]\n            ) {\n              return\n            }\n          }\n          result = route\n          return env.FALSE\n        }\n      }\n      else if (route.path === realpath) {\n        result = route\n        return env.FALSE\n      }\n    }\n  )\n\n  return result\n\n}\n\nexport function parse(Yox: YoxClass, routes: type.LinkedRoute[], hash: string) {\n\n  let realpath: string, search: string | void, index = hash.indexOf(constant.SEPARATOR_SEARCH)\n\n  if (index >= 0) {\n    realpath = hash.slice(0, index)\n    search = hash.slice(index + 1)\n  }\n  else {\n    realpath = hash\n  }\n\n  const route = getRouteByRealpath(Yox, routes, realpath)\n\n  if (route) {\n    const result: type.Location = {\n      path: route.path\n    }\n    if (route.params) {\n      const params = parseParams(Yox, realpath, route.path)\n      if (params) {\n        result.params = params\n      }\n    }\n    if (search) {\n      const query = queryUtil.parse(Yox, search)\n      if (query) {\n        result.query = query\n      }\n    }\n    return result\n  }\n\n}\n\n/**\n * 把结构化数据序列化成 hash\n */\nexport function stringify(Yox: YoxClass, location: type.Location) {\n\n  const { path, params, query } = location, terms: string[] = []\n\n  Yox.array.each(\n    path.split(constant.SEPARATOR_PATH),\n    function (item) {\n      terms.push(\n        Yox.string.startsWith(item, constant.PREFIX_PARAM) && params\n          ? params[item.substr(constant.PREFIX_PARAM.length)]\n          : item\n      )\n    }\n  )\n\n  let realpath = terms.join(constant.SEPARATOR_PATH)\n\n  if (query) {\n    const queryStr = queryUtil.stringify(Yox, query)\n    if (queryStr) {\n      realpath += constant.SEPARATOR_SEARCH + queryStr\n    }\n  }\n\n  return realpath\n\n}"],"names":["const","TRUE","FALSE","NULL","UNDEFINED","RAW_TRUE","RAW_FALSE","RAW_NULL","RAW_UNDEFINED","EMPTY_FUNCTION","EMPTY_STRING","Object","freeze","Hooks","to","from","this","name","list","target","ctx","push","fn","next","isGuard","callback","task","shift","call","PREFIX_HASH","PREFIX_PARAM","SEPARATOR_PATH","SEPARATOR_SEARCH","HOOK_AFTER_ENTER","HOOK_AFTER_LEAVE","parse","Yox","value","result","is","numeric","string","env.RAW_TRUE","env.TRUE","env.RAW_FALSE","env.FALSE","env.RAW_NULL","env.NULL","env.RAW_UNDEFINED","env.UNDEFINED","decodeURIComponent","stringify","encodeURIComponent","number","boolean","toString","registry","domApi","SEPARATOR_QUERY","SEPARATOR_PAIR","FLAG_ARRAY","routes","hash","realpath","search","index","indexOf","constant.SEPARATOR_SEARCH","slice","route","realpathTerms","split","constant.SEPARATOR_PATH","length","array","each","params","pathTerms","path","i","startsWith","constant.PREFIX_PARAM","getRouteByRealpath","item","substr","valueUtil.parse","parseParams","query","term","terms","key","trim","endsWith","queryUtil.parse","location","join","queryStr","valueUtil.stringify","queryUtil.stringify","LOCATION","window","ROUTER","ROUTE","formatPath","parentPath","falsy","toLocation","name2Path","env.EMPTY_STRING","filterProps","options","propTypes","props","routeParams","locationParams","object","copy","checkProp","instance","route404","el","onChange","hashStr","loading","setRoute","constant.PREFIX_HASH","locationUtil.parse","path2Route","replace","history","cursor","hooks","add","last","Router","pathStack","routeStack","routeOptions","component","children","parentRoute","parent","pop","setHash","env.EMPTY_FUNCTION","offset","on","off","child","context","setName","next_1","onAbort","onComplete","locationUtil.stringify","oldRoute","complete","startRoute","childRoute","loadComponent","diffRoute","forceUpdate","destroy","extensions","extend","newRoute","enterRoute","guard","updateRoute","setLocation","directive","bind","node","vnode","router","$root","listener","_","getter","isComponent","data","unbind","RouterView","template","beforeCreate","$parent","components","beforeDestroy","Class","dom","router-view","afterMount","afterDestroy","constant.HOOK_AFTER_ENTER","constant.HOOK_AFTER_LEAVE"],"mappings":"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"}