{"version":3,"file":"yox-router.min.js","sources":["../src/constant.ts","../../yox-config/src/config.ts","../../yox-common/src/util/env.ts","../src/Hooks.ts","../src/util/value.ts","../src/mode/hash.ts","../src/mode/history.ts","../src/Router.ts","../src/util/query.ts"],"sourcesContent":["export const WINDOW = window\n\nexport const LOCATION = WINDOW.location\nexport const HISTORY = WINDOW.history\n\n// path 中的参数前缀，如 /user/:userId\nexport const PREFIX_PARAM = ':'\n\n// path 分隔符\nexport const SEPARATOR_PATH = '/'\n\n// path 和 search 的分隔符\nexport const SEPARATOR_SEARCH = '?'\n\n// query 分隔符\nexport const SEPARATOR_QUERY = '&'\n\n// 键值对分隔符\nexport const SEPARATOR_PAIR = '='\n\n// 参数中的数组标识\nexport const FLAG_ARRAY = '[]'\n\n// 导航钩子 - 路由进入之前\nexport const ROUTER_HOOK_BEFORE_ENTER = 'beforeEnter'\n\n// 导航钩子 - 路由进入之后\nexport const ROUTER_HOOK_AFTER_ENTER = 'afterEnter'\n\n// 导航钩子 - 路由更新之前\nexport const ROUTER_HOOK_BEFORE_UPDATE = 'beforeUpdate'\n\n// 导航钩子 - 路由更新之后\nexport const ROUTER_HOOK_AFTER_UPDATE = 'afterUpdate'\n\n// 导航钩子 - 路由离开之前\nexport const ROUTER_HOOK_BEFORE_LEAVE = 'beforeLeave'\n\n// 导航钩子 - 路由离开之后\nexport const ROUTER_HOOK_AFTER_LEAVE = 'afterLeave'","export const SYNTAX_IF = '#if'\nexport const SYNTAX_ELSE = 'else'\nexport const SYNTAX_ELSE_IF = 'else if'\nexport const SYNTAX_EACH = '#each'\nexport const SYNTAX_PARTIAL = '#partial'\nexport const SYNTAX_IMPORT = '>'\nexport const SYNTAX_SPREAD = '...'\nexport const SYNTAX_COMMENT = /^!\\s/\n\nexport const SLOT_DATA_PREFIX = '$slot_'\nexport const SLOT_NAME_DEFAULT = 'children'\n\nexport const HINT_STRING = 1\nexport const HINT_NUMBER = 2\nexport const HINT_BOOLEAN = 3\n\nexport const DIRECTIVE_ON = 'on'\nexport const DIRECTIVE_LAZY = 'lazy'\nexport const DIRECTIVE_MODEL = 'model'\nexport const DIRECTIVE_EVENT = 'event'\nexport const DIRECTIVE_BINDING = 'binding'\nexport const DIRECTIVE_CUSTOM = 'o'\n\nexport const MODIFER_NATIVE = 'native'\n\nexport const MODEL_PROP_DEFAULT = 'value'\n\nexport const NAMESPACE_HOOK = '.hook'\n\nexport const HOOK_BEFORE_CREATE = 'beforeCreate'\nexport const HOOK_AFTER_CREATE = 'afterCreate'\nexport const HOOK_BEFORE_MOUNT = 'beforeMount'\nexport const HOOK_AFTER_MOUNT = 'afterMount'\nexport const HOOK_BEFORE_UPDATE = 'beforeUpdate'\nexport const HOOK_AFTER_UPDATE = 'afterUpdate'\nexport const HOOK_BEFORE_DESTROY = 'beforeDestroy'\nexport const HOOK_AFTER_DESTROY = 'afterDestroy'\n\n// 路由钩子\nexport const HOOK_BEFORE_ROUTE_ENTER = 'beforeRouteEnter'\nexport const HOOK_AFTER_ROUTE_ENTER = 'afterRouteEnter'\nexport const HOOK_BEFORE_ROUTE_UPDATE = 'beforeRouteUpdate'\nexport const HOOK_AFTER_ROUTE_UPDATE = 'afterRouteUpdate'\nexport const HOOK_BEFORE_ROUTE_LEAVE = 'beforeRouteLeave'\nexport const HOOK_AFTER_ROUTE_LEAVE = 'afterRouteLeave'\n","/**\n * 为了压缩，定义的常量\n */\nexport const TRUE = true\nexport const FALSE = false\nexport const NULL = null\nexport const UNDEFINED = void 0\nexport const MINUS_ONE = -1\n\nexport const RAW_TRUE = 'true'\nexport const RAW_FALSE = 'false'\nexport const RAW_NULL = 'null'\nexport const RAW_UNDEFINED = 'undefined'\n\nexport const RAW_KEY = 'key'\nexport const RAW_REF = 'ref'\nexport const RAW_SLOT = 'slot'\nexport const RAW_NAME = 'name'\n\nexport const RAW_FILTER = 'filter'\nexport const RAW_PARTIAL = 'partial'\nexport const RAW_COMPONENT = 'component'\nexport const RAW_DIRECTIVE = 'directive'\nexport const RAW_TRANSITION = 'transition'\n\nexport const RAW_THIS = 'this'\nexport const RAW_VALUE = 'value'\nexport const RAW_LENGTH = 'length'\nexport const RAW_FUNCTION = 'function'\nexport const RAW_TEMPLATE = 'template'\nexport const RAW_WILDCARD = '*'\nexport const RAW_DOT = '.'\n\nexport const KEYPATH_PARENT = '..'\nexport const KEYPATH_CURRENT = RAW_THIS\n\n/**\n * Single instance for window in browser\n */\nexport const WINDOW = typeof window !== RAW_UNDEFINED ? window : UNDEFINED\n\n/**\n * Single instance for document in browser\n */\nexport const DOCUMENT = typeof document !== RAW_UNDEFINED ? document : UNDEFINED\n\n/**\n * Single instance for global in nodejs or browser\n */\nexport const GLOBAL = typeof global !== RAW_UNDEFINED ? global : WINDOW\n\n/**\n * tap 事件\n *\n * 非常有用的抽象事件，比如 pc 端是 click 事件，移动端是 touchend 事件\n *\n * 这样只需 on-tap=\"handler\" 就可以完美兼容各端\n *\n * 框架未实现此事件，通过 Yox.dom.addSpecialEvent 提供给外部扩展\n *\n */\nexport const EVENT_TAP = 'tap'\n\n/**\n * 点击事件\n */\nexport const EVENT_CLICK = 'click'\n\n/**\n * 输入事件\n */\nexport const EVENT_INPUT = 'input'\n\n/**\n * 变化事件\n */\nexport const EVENT_CHANGE = 'change'\n\n/**\n * 唯一内置的特殊事件：model\n */\nexport const EVENT_MODEL = 'model'\n\n/**\n * Single instance for noop function\n */\nexport const EMPTY_FUNCTION = function () {\n  /** yox */\n}\n\n/**\n * 空对象，很多地方会用到，比如 `a || EMPTY_OBJECT` 确保是个对象\n */\nexport const EMPTY_OBJECT = Object.freeze({})\n\n/**\n * 空数组\n */\nexport const EMPTY_ARRAY = Object.freeze([])\n\n/**\n * 空字符串\n */\nexport const EMPTY_STRING = ''\n","import {\n  Task,\n} from '../../yox-type/src/type'\n\nimport {\n  Location,\n} from '../../yox-type/src/router'\n\nimport {\n  Callback,\n} from './type'\n\nexport default class Hooks {\n\n  list: Task[]\n\n  to: Location\n\n  from: Location | void\n\n  setLocation(to: Location, from: Location | void) {\n    this.to = to\n    this.from = from\n    return this\n  }\n\n  clear() {\n    this.list = []\n    return this\n  }\n\n  add(hook: Function | void, ctx: any) {\n    const { list } = this\n    if (hook) {\n      list.push({\n        fn: hook,\n        ctx,\n      })\n    }\n    return this\n  }\n\n  next(next: Function, isGuard?: boolean, callback?: Callback) {\n    const task = this.list.shift()\n    if (task) {\n      if (isGuard) {\n        task.fn.call(task.ctx, this.to, this.from, next)\n      }\n      else {\n        task.fn.call(task.ctx, this.to, this.from)\n        next()\n      }\n    }\n    else if (callback) {\n      callback()\n    }\n  }\n\n}","import { API } from '../type'\n\nimport * as env from '../../../yox-common/src/util/env'\n\n/**\n * 把字符串 value 解析成最合适的类型\n */\nexport function parse(API: API, value: string) {\n  let result: any\n  if (API.is.numeric(value)) {\n    result = +value\n  }\n  else if (API.is.string(value)) {\n    if (value === env.RAW_TRUE) {\n      result = env.TRUE\n    }\n    else if (value === env.RAW_FALSE) {\n      result = env.FALSE\n    }\n    else if (value === env.RAW_NULL) {\n      result = env.NULL\n    }\n    else {\n      result = decodeURIComponent(value)\n    }\n  }\n  return result\n}\n\nexport function stringify(API: API, value: any): string | void {\n  if (API.is.string(value)) {\n    return encodeURIComponent(value)\n  }\n  else if (API.is.number(value) || API.is.boolean(value)) {\n    return value.toString()\n  }\n  else if (value === env.NULL) {\n    return env.RAW_NULL\n  }\n}","import {\n  Location,\n} from '../../../yox-type/src/router'\n\nimport {\n  DomApi,\n} from '../../../yox-type/src/api'\n\nimport {\n  Listener,\n} from '../../../yox-type/src/type'\n\nimport * as constant from '../constant'\n\n// hash 前缀，Google 的规范是 #! 开头，如 #!/path/sub?key=value\nconst HASH_PREFIX = '#!',\n\nHASH_CHANGE = 'hashchange'\n\nexport function start(domApi: DomApi, handler: Function) {\n  domApi.on(constant.WINDOW, HASH_CHANGE, handler as Listener)\n  handler()\n}\n\nexport function stop(domApi: DomApi, handler: Function) {\n  domApi.off(constant.WINDOW, HASH_CHANGE, handler as Listener)\n}\n\nexport function push(location: Location, handler: Function) {\n  constant.LOCATION.hash = HASH_PREFIX + location.url\n}\n\nexport function go(n: number) {\n  constant.HISTORY.go(n)\n}\n\nexport function current() {\n\n  // 不能直接读取 window.location.hash\n  // 因为 Firefox 会做 pre-decode\n  const href = constant.LOCATION.href, index = href.indexOf(HASH_PREFIX)\n\n  return index > 0\n    ? href.substr(index + HASH_PREFIX.length)\n    : constant.SEPARATOR_PATH\n\n}\n","import {\n  Location,\n} from '../../../yox-type/src/router'\n\nimport {\n  DomApi,\n} from '../../../yox-type/src/api'\n\nimport {\n  Listener,\n} from '../../../yox-type/src/type'\n\nimport * as constant from '../constant'\n\nconst POP_STATE = 'popstate'\n\nexport const isSupported = 'pushState' in constant.HISTORY\n\nexport function start(domApi: DomApi, handler: Function) {\n  domApi.on(constant.WINDOW, POP_STATE, handler as Listener)\n  handler()\n}\n\nexport function stop(domApi: DomApi, handler: Function) {\n  domApi.off(constant.WINDOW, POP_STATE, handler as Listener)\n}\n\nexport function push(location: Location, handler: Function) {\n  // 调用 pushState 不会触发 popstate 事件\n  // 因此这里需要手动调用一次 handler\n  constant.HISTORY.pushState({}, '', location.url)\n  handler()\n}\n\nexport function go(n: number) {\n  constant.HISTORY.go(n)\n}\n\nexport function current() {\n  return constant.LOCATION.pathname + constant.LOCATION.search\n}\n","import {\n  Data,\n  Listener,\n} from '../../yox-type/src/type'\n\nimport {\n  Location,\n  RouteTarget,\n} from '../../yox-type/src/router'\n\nimport {\n  VNode,\n  Directive,\n} from '../../yox-type/src/vnode'\n\nimport {\n  ComponentOptions,\n} from '../../yox-type/src/options'\n\nimport {\n  CustomEventInterface,\n} from '../../yox-type/src/emitter'\n\nimport {\n  YoxInterface,\n} from '../../yox-type/src/yox'\n\nimport {\n  ROUTER_HOOK_BEFORE_ENTER,\n  ROUTER_HOOK_AFTER_ENTER,\n  ROUTER_HOOK_BEFORE_UPDATE,\n  ROUTER_HOOK_AFTER_UPDATE,\n  ROUTER_HOOK_BEFORE_LEAVE,\n  ROUTER_HOOK_AFTER_LEAVE,\n  SEPARATOR_PATH,\n  PREFIX_PARAM,\n  SEPARATOR_SEARCH,\n} from './constant'\n\nimport {\n  API,\n  Mode,\n  Target,\n  RouterOptions,\n  RouteOptions,\n  LinkedRoute,\n  Pending,\n  Callback,\n  Redirect,\n  RouteCallback,\n} from './type'\n\nimport * as config from '../../yox-config/src/config'\n\nimport * as env from '../../yox-common/src/util/env'\n\nimport Hooks from './Hooks'\nimport * as queryUtil from './util/query'\nimport * as valueUtil from './util/value'\n\nimport * as hashMode from './mode/hash'\nimport * as historyMode from './mode/history'\n\nlet API: API, hookEvents: Record<string, Listener>, guid = 0\n\nconst ROUTER = '$router',\n\nROUTE = '$route',\n\nROUTE_VIEW = '$routeView',\n\nROUTE_COMPONENT = 'RouteComponent',\n\nEVENT_CLICK = 'click'\n\n/**\n * 格式化路径，确保它以 / 开头，不以 / 结尾\n */\nfunction formatPath(path: string, parentPath: string | void) {\n\n  // 如果不是 / 开头，表示是相对路径\n  if (!API.string.startsWith(path, SEPARATOR_PATH)) {\n    // 确保 parentPath 以 / 结尾\n    if (parentPath) {\n      if (!API.string.endsWith(parentPath, SEPARATOR_PATH)) {\n        parentPath += SEPARATOR_PATH\n      }\n    }\n    else {\n      parentPath = SEPARATOR_PATH\n    }\n    path = parentPath + path\n  }\n\n  // 如果 path 以 / 结尾，删掉它\n  if (path !== SEPARATOR_PATH\n    && API.string.endsWith(path, SEPARATOR_PATH)\n  ) {\n    path = API.string.slice(path, 0, -SEPARATOR_PATH.length)\n  }\n\n  return path\n\n}\n\n/**\n * 把结构化数据序列化成 url\n */\nfunction stringifyUrl(path: string, params: Data | void, query: Data | void) {\n\n  if (/\\/\\:\\w+/.test(path)) {\n\n    const terms: string[] = []\n\n    API.array.each(\n      path.split(SEPARATOR_PATH),\n      function (item) {\n        terms.push(\n          API.string.startsWith(item, PREFIX_PARAM) && params\n            ? params[item.substr(PREFIX_PARAM.length)]\n            : item\n        )\n      }\n    )\n\n    path = terms.join(SEPARATOR_PATH)\n\n  }\n\n  if (query) {\n    const queryStr = queryUtil.stringify(API, query)\n    if (queryStr) {\n      path += SEPARATOR_SEARCH + queryStr\n    }\n  }\n\n  return path\n\n}\n\nfunction toUrl(target: Target, name2Path: Data): string {\n\n  if (API.is.string(target)) {\n    return formatPath(target as string)\n  }\n\n  let route = target as RouteTarget, name = route.name, path: string\n  if (name) {\n    path = name2Path[name]\n    if (process.env.NODE_ENV === 'development') {\n      if (!API.is.string(path)) {\n        API.logger.error(`The route of name[${name}] is not found.`)\n      }\n    }\n  }\n  else {\n    path = formatPath(route.path as string)\n  }\n\n  return stringifyUrl(path, route.params, route.query)\n\n}\n\n/**\n * 按照 propTypes 定义的外部数据格式过滤路由参数，这样有两个好处：\n *\n * 1. 避免传入不符预期的数据\n * 2. 避免覆盖 data 定义的数据\n */\nfunction filterProps(route: LinkedRoute, location: Location, options: ComponentOptions) {\n  const result: Data = {}, propTypes = options.propTypes\n  if (propTypes) {\n\n    let props = location.query,\n\n    routeParams = route.params,\n\n    locationParams = location.params\n\n    // 从 location.params 挑出 route.params 定义过的参数\n    if (routeParams && locationParams) {\n      props = props ? API.object.copy(props) : {}\n      for (let i = 0, length = routeParams.length; i < length; i++) {\n        (props as Data)[routeParams[i]] = locationParams[routeParams[i]]\n      }\n    }\n\n    if (props) {\n      for (let key in propTypes) {\n        let value = props[key]\n        if (value !== env.UNDEFINED) {\n          result[key] = value\n        }\n      }\n    }\n\n  }\n  return result\n}\n\n/**\n * 是否是叶子节点\n * 如果把叶子节点放在 if 中，会出现即使不是定义时的叶子节点，却是运行时的叶子节点\n */\nfunction isLeafRoute(route: LinkedRoute) {\n  const child = route.child\n  return !child || !child.context\n}\n\nfunction updateRoute(instance: YoxInterface, componentHookName: string | void, hookName: string | undefined, upsert?: boolean) {\n  const route = instance[ROUTE] as LinkedRoute\n  if (route) {\n    route.context = upsert ? instance : env.UNDEFINED\n    if (isLeafRoute(route)) {\n      const router = instance[ROUTER] as Router\n      if (componentHookName && hookName) {\n        router.hook(route, componentHookName, hookName)\n      }\n      if (upsert) {\n        const { pending } = router\n        if (pending) {\n          pending.onComplete()\n          router.pending = env.UNDEFINED\n        }\n      }\n    }\n  }\n}\n\nexport class Router {\n\n  el: Element\n\n  options: RouterOptions\n\n  routes: LinkedRoute[]\n\n  route404: LinkedRoute\n\n  name2Path: Record<string, string>\n\n  path2Route: Record<string, LinkedRoute>\n\n  mode: Mode\n\n  history: Location[]\n\n  cursor: number\n\n  pending?: Pending\n\n  // 路由钩子\n  hooks: Hooks\n\n  // 路由或参数发生了变化会触发此函数\n  handler: Function\n\n  // 当前渲染的路由\n  route?: LinkedRoute\n\n  // 当前地址栏的路径和参数\n  location?: Location\n\n  constructor(options: RouterOptions) {\n\n    const instance = this, el = options.el, route404 = options.route404 || default404\n\n    instance.options = options\n\n    instance.el = API.is.string(el)\n      ? API.dom.find(el as string) as Element\n      : el as Element\n\n    if (process.env.NODE_ENV === 'development') {\n      if (!instance.el) {\n        API.logger.error(`router.el is not an element.`)\n        return\n      }\n    }\n\n    instance.mode = options.mode === 'history' && historyMode.isSupported ? historyMode : hashMode\n\n    instance.handler = function () {\n\n      const url = instance.mode.current(), { pending } = instance\n\n      if (pending) {\n        const { location } = pending\n        // 通过 push 或 go 触发\n        if (location.url === url) {\n          instance.setHistory(location, pending.cursor)\n          instance.setRoute(location)\n          return\n        }\n        instance.pending = env.UNDEFINED\n      }\n\n      // 直接修改地址栏触发\n      instance.parseLocation(\n        url,\n        function (location) {\n          if (location) {\n            instance.setHistory(location)\n            instance.setRoute(location)\n          }\n          else {\n            instance.push(instance.route404)\n          }\n        }\n      )\n    }\n\n    instance.routes = []\n    instance.name2Path = {}\n    instance.path2Route = {}\n\n    instance.history = []\n    instance.cursor = -1\n\n    instance.hooks = new Hooks()\n\n    API.array.each(\n      options.routes,\n      function (route) {\n        instance.add(route)\n      }\n    )\n\n    instance.route404 = instance.add(route404)[0]\n\n  }\n\n  /**\n   * 添加一个新的路由\n   */\n  add(routeOptions: RouteOptions) {\n\n    const instance = this,\n\n    newRoutes: LinkedRoute[] = [],\n\n    pathStack: string[] = [],\n\n    routeStack: LinkedRoute[] = [],\n\n    addRoute = function (routeOptions: RouteOptions) {\n\n      let { name, component, children, load } = routeOptions,\n\n      parentPath = API.array.last(pathStack),\n\n      parentRoute = API.array.last(routeStack),\n\n      path = formatPath(routeOptions.path, parentPath),\n\n      route: LinkedRoute = { path, route: routeOptions },\n\n      params: string[] = []\n\n      API.array.each(\n        path.split(SEPARATOR_PATH),\n        function (item) {\n          if (API.string.startsWith(item, PREFIX_PARAM)) {\n            params.push(\n              item.substr(PREFIX_PARAM.length)\n            )\n          }\n        }\n      )\n\n      if (params.length) {\n        route.params = params\n      }\n\n      if (name) {\n        route.name = name\n      }\n\n      // component 和 load 二选一\n      if (component) {\n        route.component = component\n      }\n      else if (load) {\n        route.load = load\n      }\n\n      if (parentRoute) {\n        route.parent = parentRoute\n      }\n\n      if (children) {\n        pathStack.push(path)\n        routeStack.push(route)\n        API.array.each(\n          children,\n          addRoute\n        )\n        routeStack.pop()\n        pathStack.pop()\n      }\n      else {\n\n        newRoutes.push(route)\n        instance.routes.push(route)\n\n        if (name) {\n          if (process.env.NODE_ENV === 'development') {\n            if (API.object.has(instance.name2Path, name)) {\n              API.logger.error(`Name[${name}] of the route is existed.`)\n              return\n            }\n          }\n          instance.name2Path[name] = path\n        }\n\n        if (process.env.NODE_ENV === 'development') {\n          if (API.object.has(instance.path2Route, path)) {\n            API.logger.error(`path [${path}] of the route is existed.`)\n            return\n          }\n        }\n\n        instance.path2Route[path] = route\n\n      }\n\n    }\n\n    addRoute(routeOptions)\n\n    return newRoutes\n\n  }\n\n  /**\n   * 删除一个已注册的路由\n   */\n  remove(route: LinkedRoute) {\n\n    const instance = this\n\n    API.array.remove(instance.routes, route)\n\n    if (route.name) {\n      delete instance.name2Path[route.name]\n    }\n\n    delete instance.path2Route[route.path]\n\n  }\n\n  /**\n   * target 有 3 种格式：\n   *\n   * 如果只是简单的 path，直接传字符串\n   *\n   * push('/index')\n   *\n   * 如果需要带参数，可传对象\n   *\n   * push({\n   *   path: '/index',\n   *   params: { },\n   *   query: { }\n   * })\n   *\n   * 如果路由配置了 name，可用 name 代替 path，如下：\n   *\n   * push({\n   *   name: 'index'\n   * })\n   *\n   */\n  push(target: Target) {\n\n    const instance = this, { mode } = instance\n\n    instance.setUrl(\n      toUrl(target, instance.name2Path),\n      env.EMPTY_FUNCTION,\n      env.EMPTY_FUNCTION,\n      function (location, pending) {\n        instance.pending = pending\n        if (mode.current() !== location.url) {\n          mode.push(location, instance.handler)\n        }\n        else {\n          instance.setRoute(location)\n        }\n      }\n    )\n\n  }\n\n  /**\n   * 不改变 URL，只修改路由组件\n   */\n  replace(target: Target) {\n\n    const instance = this\n\n    instance.setUrl(\n      toUrl(target, instance.name2Path),\n      function () {\n        instance.replaceHistory(instance.location as Location)\n      },\n      env.EMPTY_FUNCTION,\n      function (location, pending) {\n        instance.pending = pending\n        instance.setRoute(location)\n      }\n    )\n\n  }\n\n  /**\n   * 前进或后退 n 步\n   */\n  go(n: number) {\n\n    const instance = this,\n\n    { mode } = instance,\n\n    cursor = instance.cursor + n,\n\n    location = instance.history[cursor]\n\n    if (location) {\n      instance.setUrl(\n        stringifyUrl(location.path, location.params, location.query),\n        env.EMPTY_FUNCTION,\n        env.EMPTY_FUNCTION,\n        function (location, pending) {\n          pending.cursor = cursor\n          instance.pending = pending\n\n          if (mode.current() !== location.url) {\n            mode.go(n)\n          }\n          else {\n            instance.setHistory(location, cursor)\n            instance.setRoute(location)\n          }\n        }\n      )\n    }\n\n  }\n\n  /**\n   * 启动路由\n   */\n  start() {\n    this.mode.start(API.dom, this.handler)\n  }\n\n  /**\n   * 停止路由\n   */\n  stop() {\n    this.mode.stop(API.dom, this.handler)\n  }\n\n  /**\n   * 钩子函数\n   */\n  hook(route: LinkedRoute, componentHook: string, hook: string, isGuard?: boolean, callback?: Callback) {\n\n    const instance = this, { location, hooks, pending } = instance\n\n    hooks\n      .clear()\n      // 先调用组件的钩子\n      .add((route.component as ComponentOptions)[componentHook], route.context)\n      // 再调用路由配置的钩子\n      .add(route.route[hook], route.route)\n      // 最后调用路由实例的钩子\n      .add(instance.options[hook], instance)\n\n    const next = function (value?: false | Target) {\n      if (value === env.UNDEFINED) {\n        hooks.next(next, isGuard, callback)\n      }\n      else {\n        // 只有前置守卫才有可能走进这里\n        // 此时 instance.location 还是旧地址\n        if (pending) {\n          pending.onAbort()\n          instance.pending = env.UNDEFINED\n        }\n        if (value === env.FALSE) {\n          if (location) {\n            instance.push(location)\n          }\n        }\n        else {\n          // 跳转到别的路由\n          instance.push(value)\n        }\n      }\n    }\n\n    next()\n\n  }\n\n  private setHistory(location: Location, index: number | void) {\n\n    const { history, cursor } = this\n\n    // 如果没传 cursor，表示 push\n    if (!API.is.number(index)) {\n      index = cursor + 1\n      // 确保下一个为空\n      // 如果不为空，肯定是调用过 go()，此时直接清掉后面的就行了\n      if (history[index]) {\n        history.length = index\n      }\n    }\n\n    history[index as number] = location\n\n    this.cursor = index as number\n\n  }\n\n  private replaceHistory(location: Location) {\n    const { history, cursor } = this\n    if (history[cursor]) {\n      history[cursor] = location\n    }\n  }\n\n  private setUrl(\n    url: string,\n    onComplete: Callback,\n    onAbort: Callback,\n    callback: (locaiton: Location, pending: Pending) => void\n  ) {\n\n    // 这里无需判断新旧 url 是否相同，因为存在 replace，即使它们相同也不等价于不用跳转\n    const instance = this\n\n    instance.parseLocation(\n      url,\n      function (location) {\n\n        if (location) {\n          callback(\n            location,\n            {\n              location,\n              onComplete,\n              onAbort,\n            }\n          )\n        }\n        else if (process.env.NODE_ENV === 'development') {\n          API.logger.error(`\"${url}\" can't match a route.`)\n        }\n\n      }\n    )\n\n  }\n\n  private parseLocation(url: string, callback: (location?: Location) => void) {\n\n    let realpath: string, search: string | void, index = url.indexOf(SEPARATOR_SEARCH)\n\n    if (index >= 0) {\n      realpath = url.slice(0, index)\n      search = url.slice(index + 1)\n    }\n    else {\n      realpath = url\n    }\n\n    // 匹配已注册的 route\n    const instance = this,\n\n    realpathTerms = realpath.split(SEPARATOR_PATH),\n\n    length = realpathTerms.length,\n\n    matchRoute = function (\n      routes: LinkedRoute[],\n      callback: (route?: LinkedRoute, params?: Data) => void\n    ) {\n\n      let index = 0, route: LinkedRoute | void\n\n      loop: while (route = routes[index++]) {\n        const path = route.path\n\n        // 动态路由\n        if (route.params) {\n          const pathTerms = path.split(SEPARATOR_PATH)\n          // path 段数量必须一致，否则没有比较的意义\n          if (length === pathTerms.length) {\n            const params: Data = {}\n            for (let i = 0; i < length; i++) {\n              if (API.string.startsWith(pathTerms[i], PREFIX_PARAM)) {\n                params[pathTerms[i].substr(PREFIX_PARAM.length)] = valueUtil.parse(API, realpathTerms[i])\n              }\n              // 非参数段不相同\n              else if (pathTerms[i] !== realpathTerms[i]) {\n                continue loop\n              }\n            }\n            callback(route, params)\n            return\n          }\n        }\n        // 懒加载路由，前缀匹配成功后，意味着懒加载回来的路由一定有我们想要的\n        else if (route.load && API.string.startsWith(realpath, path)) {\n          const routeCallback: RouteCallback = function (lazyRoute) {\n            instance.remove(route as LinkedRoute)\n            matchRoute(\n              instance.add(lazyRoute['default'] || lazyRoute),\n              callback\n            )\n          }\n          const promise = route.load(routeCallback)\n          if (promise) {\n            promise.then(routeCallback)\n          }\n          return\n        }\n        else if (path === realpath) {\n          callback(route)\n          return\n        }\n      }\n\n      callback()\n\n    }\n\n    matchRoute(\n      instance.routes,\n      function (route, params) {\n        if (route) {\n          const location: Location = {\n            url,\n            path: route.path\n          }\n          if (params) {\n            location.params = params\n          }\n          if (search) {\n            const query = queryUtil.parse(API, search)\n            if (query) {\n              location.query = query\n            }\n          }\n          callback(location)\n        }\n        else {\n          callback()\n        }\n      }\n    )\n\n  }\n\n  private diffRoute(\n    route: LinkedRoute,\n    oldRoute: LinkedRoute | void,\n    onComplete: (route: LinkedRoute, startRoute: LinkedRoute | void) => void,\n    startRoute: LinkedRoute | void,\n    childRoute: LinkedRoute | void,\n    oldTopRoute: LinkedRoute | void\n  ) {\n\n    // 更新链路\n    if (childRoute) {\n      route.child = childRoute\n      childRoute.parent = route\n    }\n\n    if (oldRoute) {\n      // 同级的两个组件不同，疑似起始更新的路由\n      if (oldRoute.component !== route.component) {\n        startRoute = route\n      }\n      else {\n        // 把上次的组件实例搞过来\n        route.context = oldRoute.context\n      }\n    }\n    else {\n      startRoute = route\n    }\n\n    if (route.parent) {\n      this.diffRoute(\n        API.object.copy(route.parent),\n        oldRoute ? oldRoute.parent : env.UNDEFINED,\n        onComplete,\n        startRoute,\n        route,\n        oldRoute || oldTopRoute\n      )\n      return\n    }\n\n    // 整个组件树全换掉\n    if (startRoute === route) {\n      let context: YoxInterface | void\n      // 当层级较多的路由切换到层级较少的路由\n      if (oldRoute) {\n        while (oldRoute) {\n          context = oldRoute.context\n          oldRoute = oldRoute.parent\n        }\n      }\n      // 当层级较少的路由切换到层级较多的路由\n      else if (oldTopRoute) {\n        context = oldTopRoute.context\n      }\n      if (context) {\n        startRoute.context = context\n      }\n    }\n\n    // 到达根组件，结束\n    onComplete(route, startRoute)\n\n  }\n\n  private patchRoute(\n    route: LinkedRoute,\n    startRoute: LinkedRoute | void\n  ) {\n\n    const instance = this, location = instance.location as Location\n\n    // 从上往下更新 props\n    while (route) {\n\n      let { parent, context, component } = route\n\n      if (route === startRoute) {\n\n        if (parent) {\n\n          context = parent.context as YoxInterface\n          context.forceUpdate(\n            filterProps(\n              parent,\n              location,\n              parent.component as ComponentOptions\n            )\n          )\n\n          context = context[ROUTE_VIEW]\n          if (context) {\n            const props = {}, name = ROUTE_COMPONENT + (++guid)\n            props[ROUTE_COMPONENT] = name\n            context.component(name, component)\n            context.forceUpdate(props)\n          }\n\n        }\n        else {\n\n          if (context) {\n            context.destroy()\n          }\n\n          // 每层路由组件都有 $route 和 $router 属性\n          const extensions = {}\n          extensions[ROUTER] = instance\n          extensions[ROUTE] = route\n\n          const options: ComponentOptions = API.object.extend(\n            {\n              el: instance.el,\n              props: filterProps(route, location, component as ComponentOptions),\n              extensions,\n            },\n            component as ComponentOptions\n          )\n\n          options.events = options.events\n            ? API.object.extend(options.events, hookEvents)\n            : hookEvents\n\n          route.context = new API(options)\n\n        }\n\n      }\n\n      else if (context) {\n        if (context.$vnode) {\n          context[ROUTE] = route\n          context.forceUpdate(\n            filterProps(route, location, component as ComponentOptions)\n          )\n        }\n        else {\n          route.context = env.UNDEFINED\n        }\n        if (route.child) {\n          route = route.child as LinkedRoute\n          continue\n        }\n      }\n      break\n    }\n  }\n\n  private setRoute(location: Location) {\n\n    let instance = this,\n\n    linkedRoute = instance.path2Route[location.path],\n\n    redirect = linkedRoute.route.redirect\n\n    if (redirect) {\n      if (API.is.func(redirect)) {\n        redirect = (redirect as Redirect)(location)\n      }\n      if (redirect) {\n        instance.push(redirect as Target)\n        return\n      }\n    }\n\n    const newRoute = API.object.copy(linkedRoute),\n\n    oldRoute = instance.route,\n\n    oldLocation = instance.location,\n\n    enterRoute = function () {\n      instance.diffRoute(\n        newRoute,\n        oldRoute,\n        function (route, startRoute) {\n          instance.hook(\n            newRoute,\n            startRoute ? config.HOOK_BEFORE_ROUTE_ENTER : config.HOOK_BEFORE_ROUTE_UPDATE,\n            startRoute ? ROUTER_HOOK_BEFORE_ENTER : ROUTER_HOOK_BEFORE_UPDATE,\n            env.TRUE,\n            function () {\n\n              instance.route = newRoute\n              instance.location = location\n\n              instance.patchRoute(route, startRoute)\n\n            }\n          )\n        }\n      )\n    }\n\n    instance.hooks.setLocation(location, oldLocation)\n\n    if (oldRoute && oldLocation && location.path !== oldLocation.path) {\n      instance.hook(\n        oldRoute,\n        config.HOOK_BEFORE_ROUTE_LEAVE,\n        ROUTER_HOOK_BEFORE_LEAVE,\n        env.TRUE,\n        enterRoute\n      )\n      return\n    }\n\n    enterRoute()\n\n  }\n\n}\n\nconst default404 = {\n  path: '/404',\n  component: {\n    template: '<div>This is a default 404 page, please set \"route404\" for your own 404 page.</div>'\n  }\n},\n\ndirective = {\n  bind(node: HTMLElement | YoxInterface, directive: Directive, vnode: VNode) {\n\n    // 当前组件如果是根组件，则没有 $root 属性\n    const $root = vnode.context.$root || vnode.context,\n\n    router = $root[ROUTER] as Router,\n\n    listener = vnode.data[directive.key] = function (_: CustomEventInterface) {\n      let { value, getter } = directive, target: any = value\n      if (value && getter && API.string.has(value as string, '{')) {\n        target = getter()\n      }\n      router[directive.name](target)\n    }\n\n    if (vnode.isComponent) {\n      (node as YoxInterface).on(EVENT_CLICK, listener)\n    }\n    else {\n      API.dom.on(node as HTMLElement, EVENT_CLICK, listener)\n    }\n\n  },\n  unbind(node: HTMLElement | YoxInterface, directive: Directive, vnode: VNode) {\n    const listener = vnode.data[directive.key]\n    if (vnode.isComponent) {\n      (node as YoxInterface).off(EVENT_CLICK, listener)\n    }\n    else {\n      API.dom.off(node as HTMLElement, EVENT_CLICK, listener)\n    }\n  },\n},\n\nRouterView: ComponentOptions = {\n  template: '<$' + ROUTE_COMPONENT + '/>',\n  beforeCreate(options) {\n\n    const context = options.context as YoxInterface,\n\n    route = context[ROUTE].child as LinkedRoute\n\n    if (route) {\n\n      context[ROUTE_VIEW] = this\n\n      const props = options.props = {}, components = options.components = {},\n\n      name = ROUTE_COMPONENT + (++guid)\n\n      props[ROUTE_COMPONENT] = name\n      components[name] = route.component\n\n    }\n\n  },\n  beforeDestroy() {\n    this.$context[ROUTE_VIEW] = env.UNDEFINED\n  }\n}\n\n/**\n * 版本\n */\nexport const version = process.env.NODE_VERSION\n\n/**\n * 安装插件\n */\nexport function install(Yox: API): void {\n\n  API = Yox\n\n  Yox.directive({\n    push: directive,\n    replace: directive,\n    go: directive,\n  })\n\n  Yox.component('router-view', RouterView)\n\n  hookEvents = {\n    'beforeCreate.hook': function (event: CustomEventInterface, data?: Data) {\n      if (data) {\n        let options = data as ComponentOptions, { context } = options\n        // 当前组件是 <router-view> 中的动态组件\n        if (context && context.$options.beforeCreate === RouterView.beforeCreate) {\n          // 找到渲染 <router-view> 的父级组件，它是一定存在的\n          context = context.$context as YoxInterface\n\n          const router = context[ROUTER] as Router,\n          route = context[ROUTE].child as LinkedRoute\n\n          if (route) {\n            const extensions = options.extensions = {}\n            extensions[ROUTER] = router\n            extensions[ROUTE] = route\n\n            if (router.location) {\n              options.props = filterProps(route, router.location, options)\n            }\n          }\n        }\n      }\n    },\n    'afterMount.hook': function (event: CustomEventInterface) {\n      updateRoute(\n        event.target as YoxInterface,\n        config.HOOK_AFTER_ROUTE_ENTER,\n        ROUTER_HOOK_AFTER_ENTER,\n        env.TRUE\n      )\n    },\n    'afterUpdate.hook': function (event: CustomEventInterface) {\n      updateRoute(\n        event.target as YoxInterface,\n        config.HOOK_AFTER_ROUTE_UPDATE,\n        ROUTER_HOOK_AFTER_UPDATE,\n        env.TRUE\n      )\n    },\n    'afterDestroy.hook': function (event: CustomEventInterface) {\n      updateRoute(\n        event.target as YoxInterface,\n        config.HOOK_AFTER_ROUTE_LEAVE,\n        ROUTER_HOOK_AFTER_LEAVE\n      )\n    }\n  }\n\n}\n","import { API } from '../type'\n\nimport * as constant from '../constant'\nimport * as valueUtil from './value'\n\n/**\n * 把 GET 参数解析成对象\n */\nexport function parse(API: API, query: string) {\n  let result: object | undefined\n  API.array.each(\n    query.split(constant.SEPARATOR_QUERY),\n    function (term) {\n\n      let terms = term.split(constant.SEPARATOR_PAIR),\n\n      key = API.string.trim(terms[0]),\n\n      value = terms[1]\n\n      if (key) {\n        if (!result) {\n          result = {}\n        }\n        value = valueUtil.parse(API, value)\n        if (API.string.endsWith(key, constant.FLAG_ARRAY)) {\n          key = API.string.slice(key, 0, -constant.FLAG_ARRAY.length)\n          API.array.push(\n            result[key] || (result[key] = []),\n            value\n          )\n        }\n        else {\n          result[key] = value\n        }\n      }\n\n    }\n  )\n  return result\n}\n\n/**\n * 把对象解析成 key1=value1&key2=value2\n */\nexport function stringify(API: API, query: object) {\n  const result: string[] = []\n  for (let key in query) {\n    const value = query[key]\n    if (API.is.array(value)) {\n      API.array.each(\n        value,\n        function (value) {\n          const str = valueUtil.stringify(API, value)\n          if (API.is.string(str)) {\n            result.push(\n              key + constant.FLAG_ARRAY + constant.SEPARATOR_PAIR + str\n            )\n          }\n        }\n      )\n    }\n    else {\n      const str = valueUtil.stringify(API, value)\n      if (API.is.string(str)) {\n        result.push(\n          key + constant.SEPARATOR_PAIR + str\n        )\n      }\n    }\n  }\n  return result.join(constant.SEPARATOR_QUERY)\n}\n"],"names":["WINDOW","window","LOCATION","location","HISTORY","history","PREFIX_PARAM","SEPARATOR_PATH","SEPARATOR_SEARCH","SEPARATOR_QUERY","SEPARATOR_PAIR","FLAG_ARRAY","ROUTER_HOOK_AFTER_ENTER","ROUTER_HOOK_AFTER_UPDATE","ROUTER_HOOK_AFTER_LEAVE","HOOK_AFTER_ROUTE_ENTER","HOOK_AFTER_ROUTE_UPDATE","HOOK_AFTER_ROUTE_LEAVE","TRUE","FALSE","NULL","UNDEFINED","RAW_TRUE","RAW_FALSE","RAW_NULL","EMPTY_FUNCTION","Object","freeze","Hooks","to","from","this","list","hook","ctx","push","fn","next","isGuard","callback","task","shift","call","parse","API","value","result","is","numeric","string","env.RAW_TRUE","env.TRUE","env.RAW_FALSE","env.FALSE","env.RAW_NULL","env.NULL","decodeURIComponent","stringify","encodeURIComponent","number","boolean","toString","HASH_PREFIX","HASH_CHANGE","domApi","handler","on","constant.WINDOW","off","constant.LOCATION","hash","url","n","constant.HISTORY","go","href","index","indexOf","substr","length","constant.SEPARATOR_PATH","POP_STATE","isSupported","hookEvents","pushState","pathname","search","guid","ROUTER","ROUTE","formatPath","path","parentPath","startsWith","endsWith","slice","stringifyUrl","params","query","test","terms_1","array","each","split","item","join","queryStr","key","str","valueUtil.stringify","constant.FLAG_ARRAY","constant.SEPARATOR_PAIR","constant.SEPARATOR_QUERY","queryUtil.stringify","toUrl","target","name2Path","route","name","filterProps","options","propTypes","props","routeParams","locationParams","object","copy","i","env.UNDEFINED","updateRoute","instance","componentHookName","hookName","upsert","context","child","isLeafRoute","router","pending","onComplete","el","route404","default404","dom","find","mode","historyMode.isSupported","historyMode","hashMode","current","setHistory","cursor","setRoute","parseLocation","routes","path2Route","hooks","add","Router","routeOptions","newRoutes","pathStack","routeStack","addRoute","component","children","load","last","parentRoute","parent","pop","remove","setUrl","env.EMPTY_FUNCTION","replaceHistory","start","stop","componentHook","clear","onAbort","realpath","realpathTerms","matchRoute","loop","pathTerms","valueUtil.parse","routeCallback","lazyRoute","promise","then","term","terms","trim","queryUtil.parse","oldRoute","startRoute","childRoute","oldTopRoute","diffRoute","forceUpdate","destroy","extensions","extend","events","$vnode","linkedRoute","redirect","func","newRoute","oldLocation","enterRoute","patchRoute","setLocation","template","directive","bind","node","vnode","$root","listener","data","_","getter","has","isComponent","unbind","RouterView","beforeCreate","components","beforeDestroy","$context","Yox","replace","beforeCreate.hook","event","$options","afterMount.hook","config.HOOK_AFTER_ROUTE_ENTER","afterUpdate.hook","config.HOOK_AFTER_ROUTE_UPDATE","afterDestroy.hook","config.HOOK_AFTER_ROUTE_LEAVE"],"mappings":"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"}