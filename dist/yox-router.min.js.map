{"version":3,"file":"yox-router.min.js","sources":["../../yox-common/src/util/env.ts","../src/Hooks.ts","../src/constant.ts","../src/value.ts","../src/index.ts","../src/query.ts"],"sourcesContent":["/**\n * 为了压缩，定义的常量\n */\nexport const TRUE = true\nexport const FALSE = false\nexport const NULL = null\nexport const UNDEFINED = void 0\n\nexport const RAW_TRUE = 'true'\nexport const RAW_FALSE = 'false'\nexport const RAW_NULL = 'null'\nexport const RAW_UNDEFINED = 'undefined'\n\nexport const RAW_KEY = 'key'\nexport const RAW_REF = 'ref'\nexport const RAW_SLOT = 'slot'\nexport const RAW_NAME = 'name'\n\nexport const RAW_FILTER = 'filter'\nexport const RAW_PARTIAL = 'partial'\nexport const RAW_COMPONENT = 'component'\nexport const RAW_DIRECTIVE = 'directive'\nexport const RAW_TRANSITION = 'transition'\n\nexport const RAW_THIS = 'this'\nexport const RAW_VALUE = 'value'\nexport const RAW_LENGTH = 'length'\nexport const RAW_FUNCTION = 'function'\nexport const RAW_TEMPLATE = 'template'\nexport const RAW_WILDCARD = '*'\n\nexport const KEYPATH_PARENT = '..'\nexport const KEYPATH_CURRENT = RAW_THIS\n\nexport const RAW_MINUS_ONE = -1\n\n/**\n * Single instance for window in browser\n */\nexport const WINDOW = typeof window !== RAW_UNDEFINED ? window : UNDEFINED\n\n/**\n * Single instance for document in browser\n */\nexport const DOCUMENT = typeof document !== RAW_UNDEFINED ? document : UNDEFINED\n\n/**\n * tap 事件\n *\n * 非常有用的抽象事件，比如 pc 端是 click 事件，移动端是 touchend 事件\n *\n * 这样只需 on-tap=\"handler\" 就可以完美兼容各端\n *\n * 框架未实现此事件，通过 Yox.dom.specialEvents 提供给外部扩展\n *\n */\nexport const EVENT_TAP = 'tap'\n\n/**\n * 点击事件\n */\nexport const EVENT_CLICK = 'click'\n\n/**\n * 输入事件\n */\nexport const EVENT_INPUT = 'input'\n\n/**\n * 变化事件\n */\nexport const EVENT_CHANGE = 'change'\n\n/**\n * 唯一内置的特殊事件：model\n */\nexport const EVENT_MODEL = 'model'\n\n/**\n * Single instance for noop function\n */\nexport const EMPTY_FUNCTION = function () {\n  /** yox */\n}\n\n/**\n * 空对象，很多地方会用到，比如 `a || EMPTY_OBJECT` 确保是个对象\n */\nexport const EMPTY_OBJECT = Object.freeze({})\n\n/**\n * 空数组\n */\nexport const EMPTY_ARRAY = Object.freeze([])\n\n/**\n * 空字符串\n */\nexport const EMPTY_STRING = ''","import Task from '../../yox-type/src/interface/Task'\n\nimport * as type from './type'\n\nexport default class Hooks {\n\n  list: Task[]\n\n  to: type.Location\n\n  from: type.Location | void\n\n  setLocation(to: type.Location, from: type.Location | void) {\n    this.to = to\n    this.from = from\n    return this\n  }\n\n  clear() {\n    this.list = []\n    return this\n  }\n\n  add(hook: Function | void, ctx: any) {\n    const { list } = this\n    if (hook) {\n      list.push({\n        fn: hook,\n        ctx,\n      })\n    }\n    return this\n  }\n\n  next(next: type.Next, isGuard?: boolean, callback?: type.Callback) {\n    const task = this.list.shift()\n    if (task) {\n      if (isGuard) {\n        task.fn.call(task.ctx, this.to, this.from, next)\n      }\n      else {\n        task.fn.call(task.ctx, this.to, this.from)\n        next()\n      }\n    }\n    else if (callback) {\n      callback()\n    }\n  }\n\n}","// hash 前缀，Google 的规范是 #! 开头，如 #!/path/sub?key=value\nexport const PREFIX_HASH = '#!'\n\n// path 中的参数前缀，如 #!/user/:userId\nexport const PREFIX_PARAM = ':'\n\n// path 分隔符\nexport const SEPARATOR_PATH = '/'\n\n// path 和 search 的分隔符\nexport const SEPARATOR_SEARCH = '?'\n\n// query 分隔符\nexport const SEPARATOR_QUERY = '&'\n\n// 键值对分隔符\nexport const SEPARATOR_PAIR = '='\n\n// 参数中的数组标识\nexport const FLAG_ARRAY = '[]'\n\n// 导航钩子 - 路由进入之前\nexport const HOOK_BEFORE_ENTER = 'beforeEnter'\nexport const HOOK_BEFORE_ROUTE_ENTER = 'beforeRouteEnter'\n\n// 导航钩子 - 路由进入之后\nexport const HOOK_AFTER_ENTER = 'afterEnter'\nexport const HOOK_AFTER_ROUTE_ENTER = 'afterRouteEnter'\n\n// 导航钩子 - 路由更新之前\nexport const HOOK_BEFORE_UPDATE = 'beforeUpdate'\nexport const HOOK_BEFORE_ROUTE_UPDATE = 'beforeRouteUpdate'\n\n// 导航钩子 - 路由更新之后\nexport const HOOK_AFTER_UPDATE = 'afterUpdate'\nexport const HOOK_AFTER_ROUTE_UPDATE = 'afterRouteUpdate'\n\n// 导航钩子 - 路由离开之前\nexport const HOOK_BEFORE_LEAVE = 'beforeLeave'\nexport const HOOK_BEFORE_ROUTE_LEAVE = 'beforeRouteLeave'\n\n// 导航钩子 - 路由离开之后\nexport const HOOK_AFTER_LEAVE = 'afterLeave'\nexport const HOOK_AFTER_ROUTE_LEAVE = 'afterRouteLeave'","import * as env from '../../yox-common/src/util/env'\nimport YoxClass from '../../yox-type/src/interface/YoxClass'\n\n/**\n * 把字符串 value 解析成最合适的类型\n */\nexport function parse(Yox: YoxClass, value: string) {\n  let result: any\n  if (Yox.is.numeric(value)) {\n    result = +value\n  }\n  else if (Yox.is.string(value)) {\n    if (value === env.RAW_TRUE) {\n      result = env.TRUE\n    }\n    else if (value === env.RAW_FALSE) {\n      result = env.FALSE\n    }\n    else if (value === env.RAW_NULL) {\n      result = env.NULL\n    }\n    else if (value === env.RAW_UNDEFINED) {\n      result = env.UNDEFINED\n    }\n    else {\n      result = decodeURIComponent(value)\n    }\n  }\n  return result\n}\n\nexport function stringify(Yox: YoxClass, value: any): string {\n  if (Yox.is.string(value)) {\n    return encodeURIComponent(value)\n  }\n  else if (Yox.is.number(value) || Yox.is.boolean(value)) {\n    return value.toString()\n  }\n  else if (value === env.NULL) {\n    return env.RAW_NULL\n  }\n  return env.RAW_UNDEFINED\n}","import * as type from '../../yox-type/src/type'\nimport * as routerType from './type'\n\nimport * as env from '../../yox-common/src/util/env'\n\nimport API from '../../yox-type/src/interface/API'\nimport Yox from '../../yox-type/src/interface/Yox'\nimport YoxClass from '../../yox-type/src/interface/YoxClass'\n\nimport YoxOptions from '../../yox-type/src/options/Yox'\nimport VNode from '../../yox-type/src/vnode/VNode'\nimport Directive from '../../yox-type/src/vnode/Directive'\nimport CustomEvent from '../../yox-type/src/event/CustomEvent'\n\nimport Hooks from './Hooks'\nimport * as constant from './constant'\nimport * as queryUtil from './query'\nimport * as valueUtil from './value'\n\nlet Yox: YoxClass, domApi: API, guid = 0\n\nconst WINDOW = window,\n\nLOCATION = WINDOW.location,\n\nROUTER = '$router',\n\nROUTE = '$route',\n\nROUTE_VIEW = '$routeView',\n\nROUTE_COMPONENT = 'RouteComponent',\n\nEVENT_CLICK = 'click',\n\nEVENT_HASH_CHANGE = 'hashchange'\n\n/**\n * 格式化路径，确保它以 / 开头，不以 / 结尾\n */\nfunction formatPath(path: string, parentPath: string | void) {\n\n  if (!Yox.string.startsWith(path, constant.SEPARATOR_PATH)) {\n    // 确保 parentPath 以 / 结尾\n    if (parentPath) {\n      if (!Yox.string.endsWith(parentPath, constant.SEPARATOR_PATH)) {\n        parentPath += constant.SEPARATOR_PATH\n      }\n    }\n    else {\n      parentPath = constant.SEPARATOR_PATH\n    }\n    path = parentPath + path\n  }\n\n  // 如果 path 以 / 结尾，删掉它\n  if (path !== constant.SEPARATOR_PATH\n    && Yox.string.endsWith(path, constant.SEPARATOR_PATH)\n  ) {\n    path = Yox.string.slice(path, 0, -constant.SEPARATOR_PATH.length)\n  }\n\n  return path\n\n}\n\nfunction toLocation(target: routerType.Target, name2Path: type.data): routerType.Location {\n\n  const location: routerType.Location = {\n    hash: env.EMPTY_STRING,\n    path: env.EMPTY_STRING\n  }\n\n  if (Yox.is.string(target)) {\n    location.path = formatPath(target as string)\n  }\n  else {\n    const route = target as routerType.RouteTarget, name = route.name\n    if (name) {\n      location.path = name2Path[name]\n      if (process.env.NODE_ENV === 'development') {\n        if (!Yox.is.string(location.path)) {\n          Yox.logger.error(`The route of name[${name}] is not found.`)\n        }\n      }\n    }\n    else {\n      location.path = formatPath(route.path as string)\n    }\n    if (route.params) {\n      location.params = route.params\n    }\n    if (route.query) {\n      location.query = route.query\n    }\n  }\n\n  return location\n\n}\n\n/**\n * 按照 propTypes 定义的外部数据格式过滤路由参数，这样有两个好处：\n *\n * 1. 避免传入不符预期的数据\n * 2. 避免覆盖 data 定义的数据\n */\nfunction filterProps(route: routerType.LinkedRoute, location: routerType.Location, options: YoxOptions | void) {\n  const result: type.data = {}, propTypes = options && options.propTypes\n  if (propTypes) {\n\n    let props = location.query,\n\n    routeParams = route.params,\n\n    locationParams = location.params\n\n    // 从 location.params 挑出 route.params 定义过的参数\n    if (routeParams && locationParams) {\n      props = props ? Yox.object.copy(props) : {}\n      for (let i = 0, key: string; key = routeParams[i]; i++) {\n        (props as type.data)[key] = locationParams[key]\n      }\n    }\n\n    if (props) {\n      for (let key in propTypes) {\n        result[key] = Yox.checkProp(key, props[key], propTypes[key])\n      }\n    }\n\n  }\n  return result\n}\n\n/**\n * 是否是叶子节点\n * 如果把叶子节点放在 if 中，会出现即使不是定义时的叶子节点，却是运行时的叶子节点\n */\nfunction isLeafRoute(route: routerType.LinkedRoute) {\n  const child = route.child\n  return !child || !child.context\n}\n\nfunction updateRoute(instance: Yox, componentHook: string | void, hook: string | undefined, upsert?: boolean) {\n  const route = instance[ROUTE] as routerType.LinkedRoute\n  if (route) {\n    route.context = upsert ? instance : env.UNDEFINED\n    if (isLeafRoute(route)) {\n      const router = instance[ROUTER] as Router\n      if (componentHook && hook) {\n        router.hook(route, componentHook, hook)\n      }\n      if (upsert) {\n        const { pending } = router\n        if (pending) {\n          pending.onComplete()\n          router.pending = env.UNDEFINED\n        }\n      }\n    }\n  }\n}\n\nexport class Router {\n\n  el: Element\n\n  routes: routerType.LinkedRoute[]\n\n  route404: routerType.LinkedRoute\n\n  name2Path: Record<string, string>\n\n  path2Route: Record<string, routerType.LinkedRoute>\n\n  history: routerType.Location[]\n\n  cursor: number\n\n  pending: routerType.Pending | void\n\n  hooks: Hooks\n\n  // 路由或参数发生了变化会触发此函数\n  onHashChange: Function\n\n  // 当前渲染的路由\n  route?: routerType.LinkedRoute\n\n  // 当前地址栏的路径和参数\n  location?: routerType.Location\n\n  [constant.HOOK_BEFORE_LEAVE]?: routerType.BeforeHook\n\n  [constant.HOOK_BEFORE_ENTER]?: routerType.BeforeHook\n\n  [constant.HOOK_AFTER_ENTER]?: routerType.AfterHook\n\n  [constant.HOOK_AFTER_LEAVE]?: routerType.AfterHook\n\n  constructor(options: routerType.RouterOptions) {\n\n    const instance = this, { el, route404 } = options\n\n    instance.el = Yox.is.string(el)\n      ? domApi.find(el as string) as Element\n      : el as Element\n\n    if (process.env.NODE_ENV === 'development') {\n      if (!instance.el) {\n        Yox.logger.error(`router.el is not an element.`)\n        return\n      }\n      if (!route404) {\n        Yox.logger.error(`Route for 404 is required.`)\n        return\n      }\n    }\n\n    /**\n     * hashchange 事件处理函数\n     * 此函数必须写在实例上，不能写在类上\n     * 否则一旦解绑，所有实例都解绑了\n     */\n    instance.onHashChange = function () {\n\n      let hashStr = LOCATION.hash, { pending, route404 } = instance\n\n      // 如果不以 PREFIX_HASH 开头，表示不合法\n      hashStr = hashStr !== constant.PREFIX_HASH\n        && Yox.string.startsWith(hashStr, constant.PREFIX_HASH)\n        ? hashStr.substr(constant.PREFIX_HASH.length)\n        : constant.SEPARATOR_PATH\n\n      if (pending) {\n        const { location } = pending\n        // 通过 push 或 go 触发\n        if (location.hash === hashStr) {\n          instance.setHistory(location, pending.cursor)\n          instance.setRoute(location)\n          return\n        }\n        instance.pending = env.UNDEFINED\n      }\n\n      // 直接修改地址栏触发\n      instance.parseLocation(\n        hashStr,\n        function (location) {\n          if (location) {\n            instance.setHistory(location)\n            instance.setRoute(location)\n          }\n          else {\n            instance.push(route404)\n          }\n        }\n      )\n\n    }\n\n    instance.routes = []\n    instance.name2Path = {}\n    instance.path2Route = {}\n\n    instance.history = []\n    instance.cursor = -1\n\n    instance.hooks = new Hooks()\n\n    Yox.array.each(\n      options.routes,\n      function (route) {\n        instance.add(route)\n      }\n    )\n\n    instance.route404 = instance.add(route404)[0]\n\n  }\n\n  /**\n   * 添加新的路由\n   */\n  add(routeOptions: routerType.RouteOptions) {\n\n    const instance = this,\n\n    newRoutes: routerType.LinkedRoute[] = [],\n\n    pathStack: string[] = [],\n\n    routeStack: routerType.LinkedRoute[] = [],\n\n    addRoute = function (routeOptions: routerType.RouteOptions) {\n\n      let { name, component, children, load } = routeOptions,\n\n      parentPath = Yox.array.last(pathStack),\n\n      parentRoute = Yox.array.last(routeStack),\n\n      path = formatPath(routeOptions.path, parentPath),\n\n      route: routerType.LinkedRoute = { path, route: routeOptions },\n\n      params: string[] = []\n\n      Yox.array.each(\n        path.split(constant.SEPARATOR_PATH),\n        function (item) {\n          if (Yox.string.startsWith(item, constant.PREFIX_PARAM)) {\n            params.push(\n              item.substr(constant.PREFIX_PARAM.length)\n            )\n          }\n        }\n      )\n\n      if (params.length) {\n        route.params = params\n      }\n\n      if (name) {\n        route.name = name\n      }\n\n      // component 和 load 二选一\n      if (component) {\n        route.component = component\n      }\n      else if (load) {\n        route.load = load\n      }\n\n      if (parentRoute) {\n        route.parent = parentRoute\n      }\n\n      if (children) {\n        pathStack.push(path)\n        routeStack.push(route)\n        Yox.array.each(\n          children,\n          addRoute\n        )\n        routeStack.pop()\n        pathStack.pop()\n      }\n      else {\n\n        newRoutes.push(route)\n        instance.routes.push(route)\n\n        if (name) {\n          if (process.env.NODE_ENV === 'development') {\n            if (Yox.object.has(instance.name2Path, name)) {\n              Yox.logger.error(`Name[${name}] of the route is existed.`)\n              return\n            }\n          }\n          instance.name2Path[name] = path\n        }\n\n        if (process.env.NODE_ENV === 'development') {\n          if (Yox.object.has(instance.path2Route, path)) {\n            Yox.logger.error(`path [${path}] of the route is existed.`)\n            return\n          }\n        }\n\n        instance.path2Route[path] = route\n\n      }\n\n    }\n\n    addRoute(routeOptions)\n\n    return newRoutes\n\n  }\n\n  remove(route: routerType.LinkedRoute) {\n\n    const instance = this\n\n    Yox.array.remove(instance.routes, route)\n\n    if (route.name) {\n      delete instance.name2Path[route.name]\n    }\n\n    delete instance.path2Route[route.path]\n\n  }\n\n  /**\n   * 真正执行路由切换操作的函数\n   *\n   * target 有 2 种格式：\n   *\n   * 如果只是简单的 path，直接传字符串\n   *\n   * push('/index')\n   *\n   * 如果需要带参数，可传对象\n   *\n   * push({\n   *   path: '/index',\n   *   params: { },\n   *   query: { }\n   * })\n   *\n   * 如果路由配置了 name，可用 name 代替 path，如下：\n   *\n   * push({\n   *   name: 'index'\n   * })\n   *\n   */\n  push(target: routerType.Target) {\n\n    const instance = this\n\n    instance.setLocation(\n      toLocation(target, instance.name2Path),\n      env.UNDEFINED,\n      env.EMPTY_FUNCTION,\n      env.EMPTY_FUNCTION,\n      function (location) {\n        instance.setHash(location)\n      }\n    )\n\n  }\n\n  replace(target: routerType.Target) {\n\n    const instance = this\n\n    instance.setLocation(\n      toLocation(target, instance.name2Path),\n      env.UNDEFINED,\n      function () {\n        instance.replaceHistory(instance.location as routerType.Location)\n      },\n      env.EMPTY_FUNCTION,\n      function (location) {\n        instance.setRoute(location)\n      }\n    )\n\n  }\n\n  go(offset: number) {\n\n    const instance = this,\n\n    cursor = instance.cursor + offset,\n\n    location: routerType.Location | void = instance.history[cursor]\n\n    if (location) {\n      instance.setLocation(\n        location,\n        cursor,\n        env.EMPTY_FUNCTION,\n        env.EMPTY_FUNCTION,\n        function (location) {\n          instance.setHash(location)\n        }\n      )\n    }\n\n  }\n\n  /**\n   * 启动路由\n   */\n  start() {\n    domApi.on(WINDOW, EVENT_HASH_CHANGE, this.onHashChange as type.listener)\n    this.onHashChange()\n  }\n\n  /**\n   * 停止路由\n   */\n  stop() {\n    domApi.off(WINDOW, EVENT_HASH_CHANGE, this.onHashChange as type.listener)\n  }\n\n  /**\n   * 钩子函数\n   */\n  hook(route: routerType.LinkedRoute, componentHook: string, hook: string, isGuard?: boolean, callback?: routerType.Callback) {\n\n    const instance = this, { location, hooks, pending } = instance\n\n    hooks\n      .clear()\n      // 先调用组件的钩子\n      .add((route.component as YoxOptions)[componentHook], route.context)\n      // 再调用路由配置的钩子\n      .add(route.route[hook], route.route)\n      // 最后调用路由实例的钩子\n      .add(instance[hook], instance)\n\n    const next = function (value?: false | routerType.Target) {\n      if (value === env.UNDEFINED) {\n        hooks.next(next, isGuard, callback)\n      }\n      else {\n        // 只有前置守卫才有可能走进这里\n        // 此时 instance.location 还是旧地址\n        if (pending) {\n          pending.onAbort()\n          instance.pending = env.UNDEFINED\n        }\n        if (value === env.FALSE) {\n          if (location) {\n            instance.push(location)\n          }\n        }\n        else {\n          // 跳转到别的路由\n          instance.push(value)\n        }\n      }\n    }\n\n    next()\n\n  }\n\n  private setHistory(location: routerType.Location, index: number | void) {\n\n    const { history, cursor } = this\n\n    // 如果没传 cursor，表示 push\n    if (!Yox.is.number(index)) {\n      index = cursor + 1\n      // 确保下一个为空\n      // 如果不为空，肯定是调用过 go()，此时直接清掉后面的就行了\n      if (history[index]) {\n        history.length = index\n      }\n    }\n\n    history[index as number] = location\n\n    this.cursor = index as number\n\n  }\n\n  private replaceHistory(location: routerType.Location) {\n    const { history, cursor } = this\n    if (history[cursor]) {\n      history[cursor] = location\n    }\n  }\n\n  private setHash(location: routerType.Location) {\n\n    const hash = constant.PREFIX_HASH + location.hash\n\n    if (LOCATION.hash !== hash) {\n      LOCATION.hash = hash\n    }\n    else {\n      this.setRoute(location)\n    }\n\n  }\n\n  private setLocation(\n    location: routerType.Location,\n    cursor: number | void,\n    onComplete: routerType.RouteComplete,\n    onAbort: routerType.RouteAbort,\n    callback: (locaiton: routerType.Location) => void\n  ) {\n\n    let instance = this,\n\n    hash = instance.stringifyLocation(location),\n\n    oldLocation = instance.location,\n\n    oldHash = oldLocation ? instance.stringifyLocation(oldLocation) : env.UNDEFINED\n\n    instance.parseLocation(\n      hash,\n      function (location) {\n\n        if (!location) {\n          hash = instance.route404.path\n          location = {\n            hash,\n            path: hash\n          }\n        }\n\n        if (hash !== oldHash) {\n          instance.pending = {\n            cursor,\n            location,\n            onComplete,\n            onAbort,\n          }\n          callback(location)\n        }\n\n      }\n    )\n\n  }\n\n  private parseLocation(hash: string, callback: (location: routerType.Location | void) => void) {\n\n    let realpath: string, search: string | void, index = hash.indexOf(constant.SEPARATOR_SEARCH)\n\n    if (index >= 0) {\n      realpath = hash.slice(0, index)\n      search = hash.slice(index + 1)\n    }\n    else {\n      realpath = hash\n    }\n\n    // 重置为 0，方便 while 循环\n    index = 0\n\n\n    // 匹配已注册的 route\n    const instance = this,\n\n    realpathTerms = realpath.split(constant.SEPARATOR_PATH),\n\n    length = realpathTerms.length,\n\n    searchRoute = function (\n      routes: routerType.LinkedRoute[],\n      callback: (route?: routerType.LinkedRoute, params?: type.data) => void\n    ) {\n\n      let route: routerType.LinkedRoute | void\n\n      loop: while (route = routes[index++]) {\n        const path = route.path\n\n        // 动态路由\n        if (route.params) {\n          const pathTerms = path.split(constant.SEPARATOR_PATH)\n          // path 段数量必须一致，否则没有比较的意义\n          if (length === pathTerms.length) {\n            const params: type.data = {}\n            for (let i = 0; i < length; i++) {\n              if (Yox.string.startsWith(pathTerms[i], constant.PREFIX_PARAM)) {\n                params[pathTerms[i].substr(constant.PREFIX_PARAM.length)] = valueUtil.parse(Yox, realpathTerms[i])\n              }\n              // 非参数段不相同\n              else if (pathTerms[i] !== realpathTerms[i]) {\n                continue loop\n              }\n            }\n            callback(route, params)\n            return\n          }\n        }\n        // 懒加载路由，前缀匹配成功后，意味着懒加载回来的路由一定有我们想要的\n        else if (route.load && Yox.string.startsWith(realpath, path)) {\n          route.load(\n            function (lazyRoute: routerType.RouteOptions) {\n              instance.remove(route as routerType.LinkedRoute)\n              searchRoute(\n                instance.add(lazyRoute),\n                callback\n              )\n            }\n          )\n          return\n        }\n        else if (path === realpath) {\n          callback(route)\n          return\n        }\n      }\n\n      callback()\n\n    }\n\n    searchRoute(\n      instance.routes,\n      function (route, params) {\n        if (route) {\n          const location: routerType.Location = {\n            hash,\n            path: route.path\n          }\n          if (params) {\n            location.params = params\n          }\n          if (search) {\n            const query = queryUtil.parse(Yox, search)\n            if (query) {\n              location.query = query\n            }\n          }\n          callback(location)\n        }\n        else {\n          callback()\n        }\n      }\n    )\n\n  }\n\n  /**\n   * 把结构化数据序列化成 hash\n   */\n  private stringifyLocation(location: routerType.Location) {\n\n    const { path, params, query } = location, terms: string[] = []\n\n    Yox.array.each(\n      path.split(constant.SEPARATOR_PATH),\n      function (item) {\n        terms.push(\n          Yox.string.startsWith(item, constant.PREFIX_PARAM) && params\n            ? params[item.substr(constant.PREFIX_PARAM.length)]\n            : item\n        )\n      }\n    )\n\n    let realpath = terms.join(constant.SEPARATOR_PATH)\n\n    if (query) {\n      const queryStr = queryUtil.stringify(Yox, query)\n      if (queryStr) {\n        realpath += constant.SEPARATOR_SEARCH + queryStr\n      }\n    }\n\n    return realpath\n\n  }\n\n  private diffRoute(\n    route: routerType.LinkedRoute,\n    oldRoute: routerType.LinkedRoute | void,\n    onComplete: routerType.DiffComplete,\n    startRoute: routerType.LinkedRoute | void,\n    childRoute: routerType.LinkedRoute | void,\n    oldTopRoute: routerType.LinkedRoute | void\n  ) {\n\n    // 更新链路\n    if (childRoute) {\n      route.child = childRoute\n      childRoute.parent = route\n    }\n\n    if (oldRoute) {\n      // 同级的两个组件不同，疑似起始更新的路由\n      if (oldRoute.component !== route.component) {\n        startRoute = route\n      }\n      else {\n        // 把上次的组件实例搞过来\n        route.context = oldRoute.context\n      }\n    }\n    else {\n      startRoute = route\n    }\n\n    if (route.parent) {\n      this.diffRoute(\n        Yox.object.copy(route.parent),\n        oldRoute ? oldRoute.parent : env.UNDEFINED,\n        onComplete,\n        startRoute,\n        route,\n        oldRoute || oldTopRoute\n      )\n      return\n    }\n\n    // 整个组件树全换掉\n    if (startRoute === route) {\n      let context: Yox | void\n      // 当层级较多的路由切换到层级较少的路由\n      if (oldRoute) {\n        while (oldRoute) {\n          context = oldRoute.context\n          oldRoute = oldRoute.parent\n        }\n      }\n      // 当层级较少的路由切换到层级较多的路由\n      else if (oldTopRoute) {\n        context = oldTopRoute.context\n      }\n      if (context) {\n        startRoute.context = context\n      }\n    }\n\n    // 到达根组件，结束\n    onComplete(route, startRoute)\n\n  }\n\n  private patchRoute(\n    route: routerType.LinkedRoute,\n    startRoute: routerType.LinkedRoute | void\n  ) {\n\n    const instance = this, location = instance.location as routerType.Location\n\n    // 从上往下更新 props\n    while (route) {\n\n      let { parent, context, component } = route\n\n      if (route === startRoute) {\n\n        if (parent) {\n\n          context = parent.context as Yox\n          context.forceUpdate(\n            filterProps(\n              parent,\n              location,\n              parent.component\n            )\n          )\n\n          context = context[ROUTE_VIEW]\n          if (context) {\n            const props = {}, name = ROUTE_COMPONENT + (++guid)\n            props[ROUTE_COMPONENT] = name\n            context.component(name, component)\n            context.forceUpdate(props)\n          }\n\n        }\n        else {\n\n          if (context) {\n            context.destroy()\n          }\n\n          // 每层路由组件都有 $route 和 $router 属性\n          const extensions = {}\n          extensions[ROUTER] = instance\n          extensions[ROUTE] = route\n\n          route.context = new Yox(\n            Yox.object.extend(\n              {\n                el: instance.el,\n                props: filterProps(route, location, component),\n                extensions,\n              },\n              component as YoxOptions\n            )\n          )\n\n        }\n\n      }\n\n      else if (context) {\n        if (context.$vnode) {\n          context[ROUTE] = route\n          context.forceUpdate(\n            filterProps(route, location, component)\n          )\n        }\n        else {\n          route.context = env.UNDEFINED\n        }\n        if (route.child) {\n          route = route.child as routerType.LinkedRoute\n          continue\n        }\n      }\n      break\n    }\n  }\n\n  private setRoute(location: routerType.Location) {\n\n    let instance = this,\n\n    linkedRoute = instance.path2Route[location.path],\n\n    redirect = linkedRoute.route.redirect\n\n    if (redirect) {\n      if (Yox.is.func(redirect)) {\n        redirect = (redirect as routerType.Redirect)(location)\n      }\n      if (redirect) {\n        instance.push(redirect as routerType.Target)\n        return\n      }\n    }\n\n    const newRoute = Yox.object.copy(linkedRoute),\n\n    oldRoute = instance.route,\n\n    oldLocation = instance.location,\n\n    enterRoute = function () {\n      instance.diffRoute(\n        newRoute,\n        oldRoute,\n        function (route, startRoute) {\n          instance.hook(\n            newRoute,\n            startRoute ? constant.HOOK_BEFORE_ROUTE_ENTER : constant.HOOK_BEFORE_ROUTE_UPDATE,\n            startRoute ? constant.HOOK_BEFORE_ENTER : constant.HOOK_BEFORE_UPDATE,\n            env.TRUE,\n            function () {\n\n              instance.route = newRoute\n              instance.location = location\n\n              instance.patchRoute(route, startRoute)\n\n            }\n          )\n        }\n      )\n    }\n\n    instance.hooks.setLocation(location, oldLocation)\n\n    if (oldRoute && oldLocation && location.path !== oldLocation.path) {\n      instance.hook(\n        oldRoute,\n        constant.HOOK_BEFORE_ROUTE_LEAVE,\n        constant.HOOK_BEFORE_LEAVE,\n        env.TRUE,\n        enterRoute\n      )\n      return\n    }\n\n    enterRoute()\n\n  }\n\n}\n\nconst directive = {\n  bind(node: HTMLElement | Yox, directive: Directive, vnode: VNode) {\n\n    // 当前组件如果是根组件，则没有 $root 属性\n    const $root = vnode.context.$root || vnode.context,\n\n    router = $root[ROUTER] as Router,\n\n    listener = vnode.data[directive.key] = function (_: CustomEvent) {\n      let { value, getter } = directive, target: any = value\n      if (value && getter && Yox.string.has(value as string, '{')) {\n        target = getter()\n      }\n      router[directive.name](target)\n    }\n\n    if (vnode.isComponent) {\n      (node as Yox).on(EVENT_CLICK, listener)\n    }\n    else {\n      domApi.on(node as HTMLElement, EVENT_CLICK, listener)\n    }\n\n  },\n  unbind(node: HTMLElement | Yox, directive: Directive, vnode: VNode) {\n    const listener = vnode.data[directive.key]\n    if (vnode.isComponent) {\n      (node as Yox).off(EVENT_CLICK, listener)\n    }\n    else {\n      domApi.off(node as HTMLElement, EVENT_CLICK, listener)\n    }\n  },\n},\n\nRouterView: YoxOptions = {\n  template: '<$' + ROUTE_COMPONENT + '/>',\n  beforeCreate(options) {\n\n    const $parent = options.parent as Yox,\n\n    route = $parent[ROUTE].child as routerType.LinkedRoute\n\n    if (route) {\n\n      $parent[ROUTE_VIEW] = this\n\n      const props = options.props = {},\n\n      components = options.components = {},\n\n      name = ROUTE_COMPONENT + (++guid)\n\n      props[ROUTE_COMPONENT] = name\n      components[name] = route.component\n\n    }\n\n  },\n  beforeDestroy() {\n    this.$parent[ROUTE_VIEW] = env.UNDEFINED\n  }\n}\n\n/**\n * 版本\n */\nexport const version = process.env.NODE_VERSION\n\n/**\n * 安装插件\n */\nexport function install(Class: YoxClass): void {\n\n  Yox = Class\n  domApi = Class.dom as API\n\n  Yox.directive({\n    push: directive,\n    replace: directive,\n    go: directive,\n  })\n\n  Yox.component('router-view', RouterView)\n\n  const { beforeCreate, afterMount, afterUpdate, afterDestroy } = Yox\n\n  Yox.beforeCreate = function (options) {\n\n    if (beforeCreate) {\n      beforeCreate(options)\n    }\n\n    let { parent } = options\n\n    // 处理 <router-view> 嵌入的组件\n    if (parent && options.beforeCreate !== RouterView.beforeCreate) {\n\n      // parent 是 <router-view> 实例，得再上一层才是路由组件\n      parent = parent.$parent\n      if (parent) {\n        const router = parent[ROUTER] as Router,\n        route = parent[ROUTE].child as routerType.LinkedRoute\n\n        if (router && route) {\n          const extensions = options.extensions = {}\n\n          extensions[ROUTER] = router\n          extensions[ROUTE] = route\n\n          if (router.location) {\n            options.props = filterProps(route, router.location, options)\n          }\n        }\n      }\n\n    }\n  }\n\n  Yox.afterMount = function (instance) {\n\n    if (afterMount) {\n      afterMount(instance)\n    }\n\n    updateRoute(instance, constant.HOOK_AFTER_ROUTE_ENTER, constant.HOOK_AFTER_ENTER, env.TRUE)\n\n  }\n  Yox.afterUpdate = function (instance) {\n\n    if (afterUpdate) {\n      afterUpdate(instance)\n    }\n\n    updateRoute(instance, constant.HOOK_AFTER_ROUTE_UPDATE, constant.HOOK_AFTER_UPDATE, env.TRUE)\n\n  }\n  Yox.afterDestroy = function (instance) {\n\n    if (afterDestroy) {\n      afterDestroy(instance)\n    }\n\n    updateRoute(instance, constant.HOOK_AFTER_ROUTE_LEAVE, constant.HOOK_AFTER_LEAVE)\n\n  }\n\n}\n","\nimport YoxClass from '../../yox-type/src/interface/YoxClass'\n\nimport * as constant from './constant'\nimport * as valueUtil from './value'\n\n/**\n * 把 GET 参数解析成对象\n */\nexport function parse(Yox: YoxClass, query: string) {\n  let result: Object | undefined\n  Yox.array.each(\n    query.split(constant.SEPARATOR_QUERY),\n    function (term) {\n\n      let terms = term.split(constant.SEPARATOR_PAIR),\n\n      key = Yox.string.trim(terms[0]),\n\n      value = terms[1]\n\n      if (key) {\n        if (!result) {\n          result = {}\n        }\n        value = valueUtil.parse(Yox, value)\n        if (Yox.string.endsWith(key, constant.FLAG_ARRAY)) {\n          key = Yox.string.slice(key, 0, -constant.FLAG_ARRAY.length)\n          Yox.array.push(\n            result[key] || (result[key] = []),\n            value\n          )\n        }\n        else {\n          result[key] = value\n        }\n      }\n\n    }\n  )\n  return result\n}\n\n/**\n * 把对象解析成 key1=value1&key2=value2\n */\nexport function stringify(Yox: YoxClass, query: Object) {\n  const result: string[] = []\n  for (let key in query) {\n    const value = query[key]\n    if (Yox.is.array(value)) {\n      Yox.array.each(\n        value,\n        function (value) {\n          result.push(\n            key + constant.FLAG_ARRAY + constant.SEPARATOR_PAIR + valueUtil.stringify(Yox, value)\n          )\n        }\n      )\n    }\n    else {\n      result.push(\n        key + constant.SEPARATOR_PAIR + valueUtil.stringify(Yox, value)\n      )\n    }\n  }\n  return result.join(constant.SEPARATOR_QUERY)\n}\n"],"names":["const","TRUE","FALSE","NULL","UNDEFINED","RAW_TRUE","RAW_FALSE","RAW_NULL","RAW_UNDEFINED","EMPTY_FUNCTION","EMPTY_STRING","Object","freeze","Hooks","to","from","this","list","hook","ctx","push","fn","next","isGuard","callback","task","shift","call","PREFIX_HASH","SEPARATOR_PATH","SEPARATOR_QUERY","SEPARATOR_PAIR","FLAG_ARRAY","HOOK_AFTER_ENTER","HOOK_AFTER_ROUTE_ENTER","HOOK_AFTER_UPDATE","HOOK_AFTER_ROUTE_UPDATE","HOOK_AFTER_LEAVE","HOOK_AFTER_ROUTE_LEAVE","parse","Yox","value","result","is","numeric","string","env.RAW_TRUE","env.TRUE","env.RAW_FALSE","env.FALSE","env.RAW_NULL","env.NULL","env.RAW_UNDEFINED","env.UNDEFINED","decodeURIComponent","stringify","encodeURIComponent","number","boolean","toString","domApi","guid","WINDOW","window","LOCATION","location","ROUTER","ROUTE","formatPath","path","parentPath","startsWith","constant.SEPARATOR_PATH","endsWith","slice","length","toLocation","target","name2Path","hash","env.EMPTY_STRING","route","name","params","query","filterProps","options","propTypes","props","routeParams","locationParams","object","copy","i","key","checkProp","updateRoute","instance","componentHook","upsert","context","child","isLeafRoute","router","pending","onComplete","el","route404","find","onHashChange","hashStr","constant.PREFIX_HASH","substr","setHistory","cursor","setRoute","parseLocation","routes","path2Route","history","hooks","array","each","add","Router","routeOptions","newRoutes","pathStack","routeStack","addRoute","component","children","load","last","parentRoute","split","item","parent","pop","remove","setLocation","env.EMPTY_FUNCTION","setHash","replaceHistory","offset","on","off","clear","onAbort","index","stringifyLocation","oldLocation","oldHash","realpath","search","indexOf","realpathTerms","searchRoute","loop","pathTerms","valueUtil.parse","lazyRoute","constant.SEPARATOR_QUERY","term","terms","constant.SEPARATOR_PAIR","trim","constant.FLAG_ARRAY","queryUtil.parse","join","queryStr","valueUtil.stringify","queryUtil.stringify","oldRoute","startRoute","childRoute","oldTopRoute","diffRoute","forceUpdate","destroy","extensions","extend","$vnode","linkedRoute","redirect","func","newRoute","enterRoute","patchRoute","directive","bind","node","vnode","$root","listener","data","_","getter","has","isComponent","unbind","RouterView","template","beforeCreate","$parent","components","beforeDestroy","Class","dom","replace","go","afterMount","afterUpdate","afterDestroy","constant.HOOK_AFTER_ROUTE_ENTER","constant.HOOK_AFTER_ENTER","constant.HOOK_AFTER_ROUTE_UPDATE","constant.HOOK_AFTER_UPDATE","constant.HOOK_AFTER_ROUTE_LEAVE","constant.HOOK_AFTER_LEAVE"],"mappings":"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"}