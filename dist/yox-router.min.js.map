{"version":3,"file":"yox-router.min.js","sources":["../../yox-config/src/config.ts","../../yox-common/src/util/env.ts","../src/Hooks.ts","../src/constant.ts","../src/util/value.ts","../src/mode/hash.ts","../src/index.ts","../src/util/query.ts"],"sourcesContent":["export const SYNTAX_IF = '#if'\nexport const SYNTAX_ELSE = 'else'\nexport const SYNTAX_ELSE_IF = 'else if'\nexport const SYNTAX_EACH = '#each'\nexport const SYNTAX_PARTIAL = '#partial'\nexport const SYNTAX_IMPORT = '>'\nexport const SYNTAX_SPREAD = '...'\nexport const SYNTAX_COMMENT = /^!\\s/\n\nexport const SLOT_DATA_PREFIX = '$slot_'\nexport const SLOT_NAME_DEFAULT = 'children'\n\nexport const HINT_STRING = 1\nexport const HINT_NUMBER = 2\nexport const HINT_BOOLEAN = 3\n\nexport const DIRECTIVE_ON = 'on'\nexport const DIRECTIVE_LAZY = 'lazy'\nexport const DIRECTIVE_MODEL = 'model'\nexport const DIRECTIVE_EVENT = 'event'\nexport const DIRECTIVE_BINDING = 'binding'\nexport const DIRECTIVE_CUSTOM = 'o'\n\nexport const HOOK_BEFORE_CREATE = 'beforeCreate'\nexport const HOOK_AFTER_CREATE = 'afterCreate'\nexport const HOOK_BEFORE_MOUNT = 'beforeMount'\nexport const HOOK_AFTER_MOUNT = 'afterMount'\nexport const HOOK_BEFORE_UPDATE = 'beforeUpdate'\nexport const HOOK_AFTER_UPDATE = 'afterUpdate'\nexport const HOOK_BEFORE_DESTROY = 'beforeDestroy'\nexport const HOOK_AFTER_DESTROY = 'afterDestroy'\n\n// 路由钩子\nexport const HOOK_BEFORE_ROUTE_ENTER = 'beforeRouteEnter'\nexport const HOOK_AFTER_ROUTE_ENTER = 'afterRouteEnter'\nexport const HOOK_BEFORE_ROUTE_UPDATE = 'beforeRouteUpdate'\nexport const HOOK_AFTER_ROUTE_UPDATE = 'afterRouteUpdate'\nexport const HOOK_BEFORE_ROUTE_LEAVE = 'beforeRouteLeave'\nexport const HOOK_AFTER_ROUTE_LEAVE = 'afterRouteLeave'\n","/**\n * 为了压缩，定义的常量\n */\nexport const TRUE = true\nexport const FALSE = false\nexport const NULL = null\nexport const UNDEFINED = void 0\n\nexport const RAW_TRUE = 'true'\nexport const RAW_FALSE = 'false'\nexport const RAW_NULL = 'null'\nexport const RAW_UNDEFINED = 'undefined'\n\nexport const RAW_KEY = 'key'\nexport const RAW_REF = 'ref'\nexport const RAW_SLOT = 'slot'\nexport const RAW_NAME = 'name'\n\nexport const RAW_FILTER = 'filter'\nexport const RAW_PARTIAL = 'partial'\nexport const RAW_COMPONENT = 'component'\nexport const RAW_DIRECTIVE = 'directive'\nexport const RAW_TRANSITION = 'transition'\n\nexport const RAW_THIS = 'this'\nexport const RAW_VALUE = 'value'\nexport const RAW_LENGTH = 'length'\nexport const RAW_FUNCTION = 'function'\nexport const RAW_TEMPLATE = 'template'\nexport const RAW_WILDCARD = '*'\n\nexport const KEYPATH_PARENT = '..'\nexport const KEYPATH_CURRENT = RAW_THIS\n\nexport const RAW_MINUS_ONE = -1\n\n/**\n * Single instance for window in browser\n */\nexport const WINDOW = typeof window !== RAW_UNDEFINED ? window : UNDEFINED\n\n/**\n * Single instance for document in browser\n */\nexport const DOCUMENT = typeof document !== RAW_UNDEFINED ? document : UNDEFINED\n\n/**\n * tap 事件\n *\n * 非常有用的抽象事件，比如 pc 端是 click 事件，移动端是 touchend 事件\n *\n * 这样只需 on-tap=\"handler\" 就可以完美兼容各端\n *\n * 框架未实现此事件，通过 Yox.dom.specialEvents 提供给外部扩展\n *\n */\nexport const EVENT_TAP = 'tap'\n\n/**\n * 点击事件\n */\nexport const EVENT_CLICK = 'click'\n\n/**\n * 输入事件\n */\nexport const EVENT_INPUT = 'input'\n\n/**\n * 变化事件\n */\nexport const EVENT_CHANGE = 'change'\n\n/**\n * 唯一内置的特殊事件：model\n */\nexport const EVENT_MODEL = 'model'\n\n/**\n * Single instance for noop function\n */\nexport const EMPTY_FUNCTION = function () {\n  /** yox */\n}\n\n/**\n * 空对象，很多地方会用到，比如 `a || EMPTY_OBJECT` 确保是个对象\n */\nexport const EMPTY_OBJECT = Object.freeze({})\n\n/**\n * 空数组\n */\nexport const EMPTY_ARRAY = Object.freeze([])\n\n/**\n * 空字符串\n */\nexport const EMPTY_STRING = ''","import Task from '../../yox-type/src/interface/Task'\nimport Location from '../../yox-type/src/router/Location'\n\nimport * as type from './type'\n\nexport default class Hooks {\n\n  list: Task[]\n\n  to: Location\n\n  from: Location | void\n\n  setLocation(to: Location, from: Location | void) {\n    this.to = to\n    this.from = from\n    return this\n  }\n\n  clear() {\n    this.list = []\n    return this\n  }\n\n  add(hook: Function | void, ctx: any) {\n    const { list } = this\n    if (hook) {\n      list.push({\n        fn: hook,\n        ctx,\n      })\n    }\n    return this\n  }\n\n  next(next: Function, isGuard?: boolean, callback?: type.Callback) {\n    const task = this.list.shift()\n    if (task) {\n      if (isGuard) {\n        task.fn.call(task.ctx, this.to, this.from, next)\n      }\n      else {\n        task.fn.call(task.ctx, this.to, this.from)\n        next()\n      }\n    }\n    else if (callback) {\n      callback()\n    }\n  }\n\n}","// path 中的参数前缀，如 #!/user/:userId\nexport const PREFIX_PARAM = ':'\n\n// path 分隔符\nexport const SEPARATOR_PATH = '/'\n\n// path 和 search 的分隔符\nexport const SEPARATOR_SEARCH = '?'\n\n// query 分隔符\nexport const SEPARATOR_QUERY = '&'\n\n// 键值对分隔符\nexport const SEPARATOR_PAIR = '='\n\n// 参数中的数组标识\nexport const FLAG_ARRAY = '[]'\n\n// 导航钩子 - 路由进入之前\nexport const HOOK_BEFORE_ENTER = 'beforeEnter'\n\n// 导航钩子 - 路由进入之后\nexport const HOOK_AFTER_ENTER = 'afterEnter'\n\n// 导航钩子 - 路由更新之前\nexport const HOOK_BEFORE_UPDATE = 'beforeUpdate'\n\n// 导航钩子 - 路由更新之后\nexport const HOOK_AFTER_UPDATE = 'afterUpdate'\n\n// 导航钩子 - 路由离开之前\nexport const HOOK_BEFORE_LEAVE = 'beforeLeave'\n\n// 导航钩子 - 路由离开之后\nexport const HOOK_AFTER_LEAVE = 'afterLeave'","import * as env from '../../../yox-common/src/util/env'\nimport YoxClass from '../../../yox-type/src/interface/YoxClass'\n\n/**\n * 把字符串 value 解析成最合适的类型\n */\nexport function parse(Yox: YoxClass, value: string) {\n  let result: any\n  if (Yox.is.numeric(value)) {\n    result = +value\n  }\n  else if (Yox.is.string(value)) {\n    if (value === env.RAW_TRUE) {\n      result = env.TRUE\n    }\n    else if (value === env.RAW_FALSE) {\n      result = env.FALSE\n    }\n    else if (value === env.RAW_NULL) {\n      result = env.NULL\n    }\n    else if (value === env.RAW_UNDEFINED) {\n      result = env.UNDEFINED\n    }\n    else {\n      result = decodeURIComponent(value)\n    }\n  }\n  return result\n}\n\nexport function stringify(Yox: YoxClass, value: any): string {\n  if (Yox.is.string(value)) {\n    return encodeURIComponent(value)\n  }\n  else if (Yox.is.number(value) || Yox.is.boolean(value)) {\n    return value.toString()\n  }\n  else if (value === env.NULL) {\n    return env.RAW_NULL\n  }\n  return env.RAW_UNDEFINED\n}","import * as type from '../../../yox-type/src/type'\nimport * as env from '../../../yox-common/src/util/env'\n\nimport API from '../../../yox-type/src/interface/API'\nimport Location from '../../../yox-type/src/router/Location'\n\nimport * as constant from '../constant'\n\nconst WINDOW = window,\n\nLOCATION = WINDOW.location,\n\n// hash 前缀，Google 的规范是 #! 开头，如 #!/path/sub?key=value\nHASH_PREFIX = '#!',\n\nHASH_CHANGE = 'hashchange'\n\nexport function start(domApi: API, handler: Function) {\n  domApi.on(WINDOW, HASH_CHANGE, handler as type.listener)\n  handler()\n}\n\nexport function stop(domApi: API, handler: Function) {\n  domApi.off(WINDOW, HASH_CHANGE, handler as type.listener)\n}\n\nexport function setLocation(location: Location) {\n\n  const hash = HASH_PREFIX + location.url\n\n  if (LOCATION.hash !== hash) {\n    LOCATION.hash = hash\n    return env.TRUE\n  }\n\n}\n\nexport function createHandler(handler: (url: string) => void) {\n\n  return function () {\n\n    // 不能直接读取 window.location.hash\n    // 因为 Firefox 会做 pre-decode\n    let href = LOCATION.href, index = href.indexOf(HASH_PREFIX), url = constant.SEPARATOR_PATH\n    if (index > 0) {\n      url = href.substr(index + HASH_PREFIX.length)\n    }\n\n    handler(url)\n\n  }\n\n}","import * as config from '../../yox-config/src/config'\nimport * as type from '../../yox-type/src/type'\nimport * as routerType from './type'\n\nimport * as env from '../../yox-common/src/util/env'\n\nimport API from '../../yox-type/src/interface/API'\nimport Yox from '../../yox-type/src/interface/Yox'\nimport YoxClass from '../../yox-type/src/interface/YoxClass'\n\nimport YoxOptions from '../../yox-type/src/options/Yox'\nimport VNode from '../../yox-type/src/vnode/VNode'\nimport Directive from '../../yox-type/src/vnode/Directive'\nimport CustomEvent from '../../yox-type/src/event/CustomEvent'\n\nimport Location from '../../yox-type/src/router/Location'\nimport RouteTarget from '../../yox-type/src/router/RouteTarget'\n\nimport Hooks from './Hooks'\nimport * as constant from './constant'\nimport * as queryUtil from './util/query'\nimport * as valueUtil from './util/value'\n\nimport * as hashMode from './mode/hash'\n\nlet Yox: YoxClass, domApi: API, guid = 0\n\nconst ROUTER = '$router',\n\nROUTE = '$route',\n\nROUTE_VIEW = '$routeView',\n\nROUTE_COMPONENT = 'RouteComponent',\n\nEVENT_CLICK = 'click'\n\n/**\n * 格式化路径，确保它以 / 开头，不以 / 结尾\n */\nfunction formatPath(path: string, parentPath: string | void) {\n\n  // 如果不是 / 开头，表示是相对路径\n  if (!Yox.string.startsWith(path, constant.SEPARATOR_PATH)) {\n    // 确保 parentPath 以 / 结尾\n    if (parentPath) {\n      if (!Yox.string.endsWith(parentPath, constant.SEPARATOR_PATH)) {\n        parentPath += constant.SEPARATOR_PATH\n      }\n    }\n    else {\n      parentPath = constant.SEPARATOR_PATH\n    }\n    path = parentPath + path\n  }\n\n  // 如果 path 以 / 结尾，删掉它\n  if (path !== constant.SEPARATOR_PATH\n    && Yox.string.endsWith(path, constant.SEPARATOR_PATH)\n  ) {\n    path = Yox.string.slice(path, 0, -constant.SEPARATOR_PATH.length)\n  }\n\n  return path\n\n}\n\nfunction toLocation(target: routerType.Target, name2Path: type.data): Location {\n\n  const location: Location = {\n    path: env.EMPTY_STRING\n  }\n\n  if (Yox.is.string(target)) {\n    location.path = formatPath(target as string)\n  }\n  else {\n    const route = target as RouteTarget, name = route.name\n    if (name) {\n      location.path = name2Path[name]\n      if (process.env.NODE_ENV === 'development') {\n        if (!Yox.is.string(location.path)) {\n          Yox.logger.error(`The route of name[${name}] is not found.`)\n        }\n      }\n    }\n    else {\n      location.path = formatPath(route.path as string)\n    }\n    if (route.params) {\n      location.params = route.params\n    }\n    if (route.query) {\n      location.query = route.query\n    }\n  }\n\n  return location\n\n}\n\n/**\n * 按照 propTypes 定义的外部数据格式过滤路由参数，这样有两个好处：\n *\n * 1. 避免传入不符预期的数据\n * 2. 避免覆盖 data 定义的数据\n */\nfunction filterProps(route: routerType.LinkedRoute, location: Location, options: YoxOptions) {\n  const result: type.data = {}, propTypes = options.propTypes\n  if (propTypes) {\n\n    let props = location.query,\n\n    routeParams = route.params,\n\n    locationParams = location.params\n\n    // 从 location.params 挑出 route.params 定义过的参数\n    if (routeParams && locationParams) {\n      props = props ? Yox.object.copy(props) : {}\n      for (let i = 0, length = routeParams.length; i < length; i++) {\n        (props as type.data)[routeParams[i]] = locationParams[routeParams[i]]\n      }\n    }\n\n    if (props) {\n      for (let key in propTypes) {\n        result[key] = Yox.checkProp(key, props[key], propTypes[key])\n      }\n    }\n\n  }\n  return result\n}\n\n/**\n * 是否是叶子节点\n * 如果把叶子节点放在 if 中，会出现即使不是定义时的叶子节点，却是运行时的叶子节点\n */\nfunction isLeafRoute(route: routerType.LinkedRoute) {\n  const child = route.child\n  return !child || !child.context\n}\n\nfunction updateRoute(instance: Yox, hook: Function | void, componentHookName: string | void, hookName: string | undefined, upsert?: boolean) {\n  if (hook) {\n    hook(instance)\n  }\n  const route = instance[ROUTE] as routerType.LinkedRoute\n  if (route) {\n    route.context = upsert ? instance : env.UNDEFINED\n    if (isLeafRoute(route)) {\n      const router = instance[ROUTER] as Router\n      if (componentHookName && hookName) {\n        router.hook(route, componentHookName, hookName)\n      }\n      if (upsert) {\n        const { pending } = router\n        if (pending) {\n          pending.onComplete()\n          router.pending = env.UNDEFINED\n        }\n      }\n    }\n  }\n}\n\nexport class Router {\n\n  el: Element\n\n  routes: routerType.LinkedRoute[]\n\n  route404: routerType.LinkedRoute\n\n  name2Path: Record<string, string>\n\n  path2Route: Record<string, routerType.LinkedRoute>\n\n  history: Location[]\n\n  cursor: number\n\n  pending?: routerType.Pending\n\n  // 路由钩子\n  hooks: Hooks\n\n  // 路由或参数发生了变化会触发此函数\n  handler: Function\n\n  // 当前渲染的路由\n  route?: routerType.LinkedRoute\n\n  // 当前地址栏的路径和参数\n  location?: Location\n\n  [constant.HOOK_BEFORE_LEAVE]?: type.routerBeforeHook\n\n  [constant.HOOK_BEFORE_ENTER]?: type.routerBeforeHook\n\n  [constant.HOOK_AFTER_ENTER]?: type.routerAfterHook\n\n  [constant.HOOK_AFTER_LEAVE]?: type.routerAfterHook\n\n  constructor(options: routerType.RouterOptions) {\n\n    const instance = this, { el, route404 } = options\n\n    instance.el = Yox.is.string(el)\n      ? domApi.find(el as string) as Element\n      : el as Element\n\n    if (process.env.NODE_ENV === 'development') {\n      if (!instance.el) {\n        Yox.logger.error(`router.el is not an element.`)\n        return\n      }\n      if (!route404) {\n        Yox.logger.error(`Route for 404 is required.`)\n        return\n      }\n    }\n\n    instance.handler = hashMode.createHandler(\n      function (url) {\n        let { pending } = instance\n\n        if (pending) {\n          const { location } = pending\n          // 通过 push 或 go 触发\n          if (location.url === url) {\n            instance.setHistory(location, pending.cursor)\n            instance.setRoute(location)\n            return\n          }\n          instance.pending = env.UNDEFINED\n        }\n\n        // 直接修改地址栏触发\n        instance.parseLocation(\n          url,\n          function (location) {\n            if (location) {\n              instance.setHistory(location)\n              instance.setRoute(location)\n            }\n            else {\n              instance.push(instance.route404)\n            }\n          }\n        )\n      }\n    )\n\n    instance.routes = []\n    instance.name2Path = {}\n    instance.path2Route = {}\n\n    instance.history = []\n    instance.cursor = -1\n\n    instance.hooks = new Hooks()\n\n    Yox.array.each(\n      options.routes,\n      function (route) {\n        instance.add(route)\n      }\n    )\n\n    instance.route404 = instance.add(route404)[0]\n\n  }\n\n  /**\n   * 添加新的路由\n   */\n  add(routeOptions: routerType.RouteOptions) {\n\n    const instance = this,\n\n    newRoutes: routerType.LinkedRoute[] = [],\n\n    pathStack: string[] = [],\n\n    routeStack: routerType.LinkedRoute[] = [],\n\n    addRoute = function (routeOptions: routerType.RouteOptions) {\n\n      let { name, component, children, loadRoute } = routeOptions,\n\n      parentPath = Yox.array.last(pathStack),\n\n      parentRoute = Yox.array.last(routeStack),\n\n      path = formatPath(routeOptions.path, parentPath),\n\n      route: routerType.LinkedRoute = { path, route: routeOptions },\n\n      params: string[] = []\n\n      Yox.array.each(\n        path.split(constant.SEPARATOR_PATH),\n        function (item) {\n          if (Yox.string.startsWith(item, constant.PREFIX_PARAM)) {\n            params.push(\n              item.substr(constant.PREFIX_PARAM.length)\n            )\n          }\n        }\n      )\n\n      if (params.length) {\n        route.params = params\n      }\n\n      if (name) {\n        route.name = name\n      }\n\n      // component 和 loadRoute 二选一\n      if (component) {\n        route.component = component\n      }\n      else if (loadRoute) {\n        route.loadRoute = loadRoute\n      }\n\n      if (parentRoute) {\n        route.parent = parentRoute\n      }\n\n      if (children) {\n        pathStack.push(path)\n        routeStack.push(route)\n        Yox.array.each(\n          children,\n          addRoute\n        )\n        routeStack.pop()\n        pathStack.pop()\n      }\n      else {\n\n        newRoutes.push(route)\n        instance.routes.push(route)\n\n        if (name) {\n          if (process.env.NODE_ENV === 'development') {\n            if (Yox.object.has(instance.name2Path, name)) {\n              Yox.logger.error(`Name[${name}] of the route is existed.`)\n              return\n            }\n          }\n          instance.name2Path[name] = path\n        }\n\n        if (process.env.NODE_ENV === 'development') {\n          if (Yox.object.has(instance.path2Route, path)) {\n            Yox.logger.error(`path [${path}] of the route is existed.`)\n            return\n          }\n        }\n\n        instance.path2Route[path] = route\n\n      }\n\n    }\n\n    addRoute(routeOptions)\n\n    return newRoutes\n\n  }\n\n  remove(route: routerType.LinkedRoute) {\n\n    const instance = this\n\n    Yox.array.remove(instance.routes, route)\n\n    if (route.name) {\n      delete instance.name2Path[route.name]\n    }\n\n    delete instance.path2Route[route.path]\n\n  }\n\n  /**\n   * 真正执行路由切换操作的函数\n   *\n   * target 有 2 种格式：\n   *\n   * 如果只是简单的 path，直接传字符串\n   *\n   * push('/index')\n   *\n   * 如果需要带参数，可传对象\n   *\n   * push({\n   *   path: '/index',\n   *   params: { },\n   *   query: { }\n   * })\n   *\n   * 如果路由配置了 name，可用 name 代替 path，如下：\n   *\n   * push({\n   *   name: 'index'\n   * })\n   *\n   */\n  push(target: routerType.Target) {\n\n    const instance = this\n\n    instance.setLocation(\n      toLocation(target, instance.name2Path),\n      env.UNDEFINED,\n      env.EMPTY_FUNCTION,\n      env.EMPTY_FUNCTION,\n      function (location) {\n        instance.setHash(location)\n      }\n    )\n\n  }\n\n  replace(target: routerType.Target) {\n\n    const instance = this\n\n    instance.setLocation(\n      toLocation(target, instance.name2Path),\n      env.UNDEFINED,\n      function () {\n        instance.replaceHistory(instance.location as Location)\n      },\n      env.EMPTY_FUNCTION,\n      function (location) {\n        instance.setRoute(location)\n      }\n    )\n\n  }\n\n  go(offset: number) {\n\n    const instance = this,\n\n    cursor = instance.cursor + offset,\n\n    location: Location | void = instance.history[cursor]\n\n    if (location) {\n      instance.setLocation(\n        location,\n        cursor,\n        env.EMPTY_FUNCTION,\n        env.EMPTY_FUNCTION,\n        function (location) {\n          instance.setHash(location)\n        }\n      )\n    }\n\n  }\n\n  /**\n   * 启动路由\n   */\n  start() {\n    hashMode.start(domApi, this.handler)\n  }\n\n  /**\n   * 停止路由\n   */\n  stop() {\n    hashMode.stop(domApi, this.handler)\n  }\n\n  /**\n   * 钩子函数\n   */\n  hook(route: routerType.LinkedRoute, componentHook: string, hook: string, isGuard?: boolean, callback?: routerType.Callback) {\n\n    const instance = this, { location, hooks, pending } = instance\n\n    hooks\n      .clear()\n      // 先调用组件的钩子\n      .add((route.component as YoxOptions)[componentHook], route.context)\n      // 再调用路由配置的钩子\n      .add(route.route[hook], route.route)\n      // 最后调用路由实例的钩子\n      .add(instance[hook], instance)\n\n    const next = function (value?: false | routerType.Target) {\n      if (value === env.UNDEFINED) {\n        hooks.next(next, isGuard, callback)\n      }\n      else {\n        // 只有前置守卫才有可能走进这里\n        // 此时 instance.location 还是旧地址\n        if (pending) {\n          pending.onAbort()\n          instance.pending = env.UNDEFINED\n        }\n        if (value === env.FALSE) {\n          if (location) {\n            instance.push(location)\n          }\n        }\n        else {\n          // 跳转到别的路由\n          instance.push(value)\n        }\n      }\n    }\n\n    next()\n\n  }\n\n  private setHistory(location: Location, index: number | void) {\n\n    const { history, cursor } = this\n\n    // 如果没传 cursor，表示 push\n    if (!Yox.is.number(index)) {\n      index = cursor + 1\n      // 确保下一个为空\n      // 如果不为空，肯定是调用过 go()，此时直接清掉后面的就行了\n      if (history[index]) {\n        history.length = index\n      }\n    }\n\n    history[index as number] = location\n\n    this.cursor = index as number\n\n  }\n\n  private replaceHistory(location: Location) {\n    const { history, cursor } = this\n    if (history[cursor]) {\n      history[cursor] = location\n    }\n  }\n\n  private setHash(location: Location) {\n\n    if (!hashMode.setLocation(location)) {\n      this.setRoute(location)\n    }\n\n  }\n\n  private setLocation(\n    location: Location,\n    cursor: number | void,\n    onComplete: routerType.RouteComplete,\n    onAbort: routerType.RouteAbort,\n    callback: (locaiton: Location) => void\n  ) {\n\n    let instance = this,\n\n    url = instance.stringifyLocation(location),\n\n    oldLocation = instance.location,\n\n    oldUrl = oldLocation ? instance.stringifyLocation(oldLocation) : env.UNDEFINED\n\n    instance.parseLocation(\n      url,\n      function (location) {\n\n        if (!location) {\n          url = instance.route404.path\n          location = {\n            url,\n            path: url\n          }\n        }\n\n        if (url !== oldUrl) {\n          instance.pending = {\n            cursor,\n            location,\n            onComplete,\n            onAbort,\n          }\n          callback(location)\n        }\n\n      }\n    )\n\n  }\n\n  private parseLocation(url: string, callback: (location: Location | void) => void) {\n\n    let realpath: string, search: string | void, index = url.indexOf(constant.SEPARATOR_SEARCH)\n\n    if (index >= 0) {\n      realpath = url.slice(0, index)\n      search = url.slice(index + 1)\n    }\n    else {\n      realpath = url\n    }\n\n    // 匹配已注册的 route\n    const instance = this,\n\n    realpathTerms = realpath.split(constant.SEPARATOR_PATH),\n\n    length = realpathTerms.length,\n\n    searchRoute = function (\n      routes: routerType.LinkedRoute[],\n      callback: (route?: routerType.LinkedRoute, params?: type.data) => void\n    ) {\n\n      let index = 0, route: routerType.LinkedRoute | void\n\n      loop: while (route = routes[index++]) {\n        const path = route.path\n\n        // 动态路由\n        if (route.params) {\n          const pathTerms = path.split(constant.SEPARATOR_PATH)\n          // path 段数量必须一致，否则没有比较的意义\n          if (length === pathTerms.length) {\n            const params: type.data = {}\n            for (let i = 0; i < length; i++) {\n              if (Yox.string.startsWith(pathTerms[i], constant.PREFIX_PARAM)) {\n                params[pathTerms[i].substr(constant.PREFIX_PARAM.length)] = valueUtil.parse(Yox, realpathTerms[i])\n              }\n              // 非参数段不相同\n              else if (pathTerms[i] !== realpathTerms[i]) {\n                continue loop\n              }\n            }\n            callback(route, params)\n            return\n          }\n        }\n        // 懒加载路由，前缀匹配成功后，意味着懒加载回来的路由一定有我们想要的\n        else if (route.loadRoute && Yox.string.startsWith(realpath, path)) {\n          route.loadRoute(\n            function (lazyRoute) {\n              instance.remove(route as routerType.LinkedRoute)\n              searchRoute(\n                instance.add(lazyRoute),\n                callback\n              )\n            }\n          )\n          return\n        }\n        else if (path === realpath) {\n          callback(route)\n          return\n        }\n      }\n\n      callback()\n\n    }\n\n    searchRoute(\n      instance.routes,\n      function (route, params) {\n        if (route) {\n          const location: Location = {\n            url,\n            path: route.path\n          }\n          if (params) {\n            location.params = params\n          }\n          if (search) {\n            const query = queryUtil.parse(Yox, search)\n            if (query) {\n              location.query = query\n            }\n          }\n          callback(location)\n        }\n        else {\n          callback()\n        }\n      }\n    )\n\n  }\n\n  /**\n   * 把结构化数据序列化成 hash\n   */\n  private stringifyLocation(location: Location) {\n\n    const { path, params, query } = location, terms: string[] = []\n\n    Yox.array.each(\n      path.split(constant.SEPARATOR_PATH),\n      function (item) {\n        terms.push(\n          Yox.string.startsWith(item, constant.PREFIX_PARAM) && params\n            ? params[item.substr(constant.PREFIX_PARAM.length)]\n            : item\n        )\n      }\n    )\n\n    let realpath = terms.join(constant.SEPARATOR_PATH)\n\n    if (query) {\n      const queryStr = queryUtil.stringify(Yox, query)\n      if (queryStr) {\n        realpath += constant.SEPARATOR_SEARCH + queryStr\n      }\n    }\n\n    return realpath\n\n  }\n\n  private diffRoute(\n    route: routerType.LinkedRoute,\n    oldRoute: routerType.LinkedRoute | void,\n    onComplete: routerType.DiffComplete,\n    startRoute: routerType.LinkedRoute | void,\n    childRoute: routerType.LinkedRoute | void,\n    oldTopRoute: routerType.LinkedRoute | void\n  ) {\n\n    // 更新链路\n    if (childRoute) {\n      route.child = childRoute\n      childRoute.parent = route\n    }\n\n    if (oldRoute) {\n      // 同级的两个组件不同，疑似起始更新的路由\n      if (oldRoute.component !== route.component) {\n        startRoute = route\n      }\n      else {\n        // 把上次的组件实例搞过来\n        route.context = oldRoute.context\n      }\n    }\n    else {\n      startRoute = route\n    }\n\n    if (route.parent) {\n      this.diffRoute(\n        Yox.object.copy(route.parent),\n        oldRoute ? oldRoute.parent : env.UNDEFINED,\n        onComplete,\n        startRoute,\n        route,\n        oldRoute || oldTopRoute\n      )\n      return\n    }\n\n    // 整个组件树全换掉\n    if (startRoute === route) {\n      let context: Yox | void\n      // 当层级较多的路由切换到层级较少的路由\n      if (oldRoute) {\n        while (oldRoute) {\n          context = oldRoute.context\n          oldRoute = oldRoute.parent\n        }\n      }\n      // 当层级较少的路由切换到层级较多的路由\n      else if (oldTopRoute) {\n        context = oldTopRoute.context\n      }\n      if (context) {\n        startRoute.context = context\n      }\n    }\n\n    // 到达根组件，结束\n    onComplete(route, startRoute)\n\n  }\n\n  private patchRoute(\n    route: routerType.LinkedRoute,\n    startRoute: routerType.LinkedRoute | void\n  ) {\n\n    const instance = this, location = instance.location as Location\n\n    // 从上往下更新 props\n    while (route) {\n\n      let { parent, context, component } = route\n\n      if (route === startRoute) {\n\n        if (parent) {\n\n          context = parent.context as Yox\n          context.forceUpdate(\n            filterProps(\n              parent,\n              location,\n              parent.component as YoxOptions\n            )\n          )\n\n          context = context[ROUTE_VIEW]\n          if (context) {\n            const props = {}, name = ROUTE_COMPONENT + (++guid)\n            props[ROUTE_COMPONENT] = name\n            context.component(name, component)\n            context.forceUpdate(props)\n          }\n\n        }\n        else {\n\n          if (context) {\n            context.destroy()\n          }\n\n          // 每层路由组件都有 $route 和 $router 属性\n          const extensions = {}\n          extensions[ROUTER] = instance\n          extensions[ROUTE] = route\n\n          route.context = new Yox(\n            Yox.object.extend(\n              {\n                el: instance.el,\n                props: filterProps(route, location, component as YoxOptions),\n                extensions,\n              },\n              component as YoxOptions\n            )\n          )\n\n        }\n\n      }\n\n      else if (context) {\n        if (context.$vnode) {\n          context[ROUTE] = route\n          context.forceUpdate(\n            filterProps(route, location, component as YoxOptions)\n          )\n        }\n        else {\n          route.context = env.UNDEFINED\n        }\n        if (route.child) {\n          route = route.child as routerType.LinkedRoute\n          continue\n        }\n      }\n      break\n    }\n  }\n\n  private setRoute(location: Location) {\n\n    let instance = this,\n\n    linkedRoute = instance.path2Route[location.path],\n\n    redirect = linkedRoute.route.redirect\n\n    if (redirect) {\n      if (Yox.is.func(redirect)) {\n        redirect = (redirect as routerType.Redirect)(location)\n      }\n      if (redirect) {\n        instance.push(redirect as routerType.Target)\n        return\n      }\n    }\n\n    const newRoute = Yox.object.copy(linkedRoute),\n\n    oldRoute = instance.route,\n\n    oldLocation = instance.location,\n\n    enterRoute = function () {\n      instance.diffRoute(\n        newRoute,\n        oldRoute,\n        function (route, startRoute) {\n          instance.hook(\n            newRoute,\n            startRoute ? config.HOOK_BEFORE_ROUTE_ENTER : config.HOOK_BEFORE_ROUTE_UPDATE,\n            startRoute ? constant.HOOK_BEFORE_ENTER : constant.HOOK_BEFORE_UPDATE,\n            env.TRUE,\n            function () {\n\n              instance.route = newRoute\n              instance.location = location\n\n              instance.patchRoute(route, startRoute)\n\n            }\n          )\n        }\n      )\n    }\n\n    instance.hooks.setLocation(location, oldLocation)\n\n    if (oldRoute && oldLocation && location.path !== oldLocation.path) {\n      instance.hook(\n        oldRoute,\n        config.HOOK_BEFORE_ROUTE_LEAVE,\n        constant.HOOK_BEFORE_LEAVE,\n        env.TRUE,\n        enterRoute\n      )\n      return\n    }\n\n    enterRoute()\n\n  }\n\n}\n\nconst directive = {\n  bind(node: HTMLElement | Yox, directive: Directive, vnode: VNode) {\n\n    // 当前组件如果是根组件，则没有 $root 属性\n    const $root = vnode.context.$root || vnode.context,\n\n    router = $root[ROUTER] as Router,\n\n    listener = vnode.data[directive.key] = function (_: CustomEvent) {\n      let { value, getter } = directive, target: any = value\n      if (value && getter && Yox.string.has(value as string, '{')) {\n        target = getter()\n      }\n      router[directive.name](target)\n    }\n\n    if (vnode.isComponent) {\n      (node as Yox).on(EVENT_CLICK, listener)\n    }\n    else {\n      domApi.on(node as HTMLElement, EVENT_CLICK, listener)\n    }\n\n  },\n  unbind(node: HTMLElement | Yox, directive: Directive, vnode: VNode) {\n    const listener = vnode.data[directive.key]\n    if (vnode.isComponent) {\n      (node as Yox).off(EVENT_CLICK, listener)\n    }\n    else {\n      domApi.off(node as HTMLElement, EVENT_CLICK, listener)\n    }\n  },\n},\n\nRouterView: YoxOptions = {\n  template: '<$' + ROUTE_COMPONENT + '/>',\n  beforeCreate(options) {\n\n    const $parent = options.parent as Yox,\n\n    route = $parent[ROUTE].child as routerType.LinkedRoute\n\n    if (route) {\n\n      $parent[ROUTE_VIEW] = this\n\n      const props = options.props = {},\n\n      components = options.components = {},\n\n      name = ROUTE_COMPONENT + (++guid)\n\n      props[ROUTE_COMPONENT] = name\n      components[name] = route.component\n\n    }\n\n  },\n  beforeDestroy() {\n    this.$parent[ROUTE_VIEW] = env.UNDEFINED\n  }\n}\n\n/**\n * 版本\n */\nexport const version = process.env.NODE_VERSION\n\n/**\n * 安装插件\n */\nexport function install(Class: YoxClass): void {\n\n  Yox = Class\n  domApi = Class.dom as API\n\n  Yox.directive({\n    push: directive,\n    replace: directive,\n    go: directive,\n  })\n\n  Yox.component('router-view', RouterView)\n\n  const { beforeCreate, afterMount, afterUpdate, afterDestroy } = Yox\n\n  Yox.beforeCreate = function (options) {\n\n    if (beforeCreate) {\n      beforeCreate(options)\n    }\n\n    let { parent } = options\n\n    // 处理 <router-view> 嵌入的组件\n    if (parent && options.beforeCreate !== RouterView.beforeCreate) {\n\n      // parent 是 <router-view> 实例，得再上一层才是路由组件\n      parent = parent.$parent\n      if (parent) {\n        const router = parent[ROUTER] as Router,\n        route = parent[ROUTE].child as routerType.LinkedRoute\n\n        if (router && route) {\n          const extensions = options.extensions = {}\n\n          extensions[ROUTER] = router\n          extensions[ROUTE] = route\n\n          if (router.location) {\n            options.props = filterProps(route, router.location, options)\n          }\n        }\n      }\n\n    }\n  }\n\n  Yox.afterMount = function (instance) {\n\n    updateRoute(instance, afterMount, config.HOOK_AFTER_ROUTE_ENTER, constant.HOOK_AFTER_ENTER, env.TRUE)\n\n  }\n  Yox.afterUpdate = function (instance) {\n\n    updateRoute(instance, afterUpdate, config.HOOK_AFTER_ROUTE_UPDATE, constant.HOOK_AFTER_UPDATE, env.TRUE)\n\n  }\n  Yox.afterDestroy = function (instance) {\n\n    updateRoute(instance, afterDestroy, config.HOOK_AFTER_ROUTE_LEAVE, constant.HOOK_AFTER_LEAVE)\n\n  }\n\n}\n","\nimport YoxClass from '../../../yox-type/src/interface/YoxClass'\n\nimport * as constant from '../constant'\nimport * as valueUtil from './value'\n\n/**\n * 把 GET 参数解析成对象\n */\nexport function parse(Yox: YoxClass, query: string) {\n  let result: Object | undefined\n  Yox.array.each(\n    query.split(constant.SEPARATOR_QUERY),\n    function (term) {\n\n      let terms = term.split(constant.SEPARATOR_PAIR),\n\n      key = Yox.string.trim(terms[0]),\n\n      value = terms[1]\n\n      if (key) {\n        if (!result) {\n          result = {}\n        }\n        value = valueUtil.parse(Yox, value)\n        if (Yox.string.endsWith(key, constant.FLAG_ARRAY)) {\n          key = Yox.string.slice(key, 0, -constant.FLAG_ARRAY.length)\n          Yox.array.push(\n            result[key] || (result[key] = []),\n            value\n          )\n        }\n        else {\n          result[key] = value\n        }\n      }\n\n    }\n  )\n  return result\n}\n\n/**\n * 把对象解析成 key1=value1&key2=value2\n */\nexport function stringify(Yox: YoxClass, query: Object) {\n  const result: string[] = []\n  for (let key in query) {\n    const value = query[key]\n    if (Yox.is.array(value)) {\n      Yox.array.each(\n        value,\n        function (value) {\n          result.push(\n            key + constant.FLAG_ARRAY + constant.SEPARATOR_PAIR + valueUtil.stringify(Yox, value)\n          )\n        }\n      )\n    }\n    else {\n      result.push(\n        key + constant.SEPARATOR_PAIR + valueUtil.stringify(Yox, value)\n      )\n    }\n  }\n  return result.join(constant.SEPARATOR_QUERY)\n}\n"],"names":["const","HOOK_AFTER_ROUTE_ENTER","HOOK_AFTER_ROUTE_UPDATE","HOOK_AFTER_ROUTE_LEAVE","TRUE","FALSE","NULL","UNDEFINED","RAW_TRUE","RAW_FALSE","RAW_NULL","RAW_UNDEFINED","EMPTY_FUNCTION","EMPTY_STRING","Object","freeze","Hooks","to","from","this","list","hook","ctx","push","fn","next","isGuard","callback","task","shift","call","SEPARATOR_PATH","SEPARATOR_QUERY","SEPARATOR_PAIR","FLAG_ARRAY","HOOK_AFTER_ENTER","HOOK_AFTER_UPDATE","HOOK_AFTER_LEAVE","parse","Yox","value","result","is","numeric","string","env.RAW_TRUE","env.TRUE","env.RAW_FALSE","env.FALSE","env.RAW_NULL","env.NULL","env.RAW_UNDEFINED","env.UNDEFINED","decodeURIComponent","stringify","encodeURIComponent","number","boolean","toString","WINDOW","window","LOCATION","location","HASH_PREFIX","HASH_CHANGE","domApi","guid","ROUTER","ROUTE","formatPath","path","parentPath","startsWith","constant.SEPARATOR_PATH","endsWith","slice","length","toLocation","target","name2Path","env.EMPTY_STRING","route","name","params","query","filterProps","options","propTypes","props","routeParams","locationParams","object","copy","i","key","checkProp","updateRoute","instance","componentHookName","hookName","upsert","context","child","isLeafRoute","router","pending","onComplete","handler","el","route404","find","url","setHistory","cursor","setRoute","parseLocation","href","index","indexOf","substr","routes","path2Route","history","hooks","array","each","add","Router","routeOptions","newRoutes","pathStack","routeStack","addRoute","component","children","loadRoute","last","parentRoute","split","item","parent","pop","remove","setLocation","env.EMPTY_FUNCTION","setHash","replaceHistory","offset","on","hashMode.start","off","hashMode.stop","componentHook","clear","onAbort","hash","hashMode.setLocation","stringifyLocation","oldLocation","oldUrl","realpath","search","realpathTerms","searchRoute","loop","pathTerms","valueUtil.parse","lazyRoute","constant.SEPARATOR_QUERY","term","terms","constant.SEPARATOR_PAIR","trim","constant.FLAG_ARRAY","queryUtil.parse","join","queryStr","valueUtil.stringify","queryUtil.stringify","oldRoute","startRoute","childRoute","oldTopRoute","diffRoute","forceUpdate","destroy","extensions","extend","$vnode","linkedRoute","redirect","func","newRoute","enterRoute","patchRoute","directive","bind","node","vnode","$root","listener","data","_","getter","has","isComponent","unbind","RouterView","template","beforeCreate","$parent","components","beforeDestroy","Class","dom","replace","go","afterMount","afterUpdate","afterDestroy","config.HOOK_AFTER_ROUTE_ENTER","constant.HOOK_AFTER_ENTER","config.HOOK_AFTER_ROUTE_UPDATE","constant.HOOK_AFTER_UPDATE","config.HOOK_AFTER_ROUTE_LEAVE","constant.HOOK_AFTER_LEAVE"],"mappings":"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"}