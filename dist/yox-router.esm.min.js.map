{"version":3,"file":"yox-router.esm.min.js","sources":["../src/constant.ts","../src/Hooks.ts","../src/util/value.ts","../src/mode/hash.ts","../src/mode/history.ts","../src/Router.ts","../src/util/query.ts"],"sourcesContent":["export const WINDOW = window\n\nexport const LOCATION = WINDOW.location\n\nexport const HISTORY = WINDOW.history\n\nexport const UNDEFINED = void 0\n\nexport const NULL = null\n\nexport const TRUE = true\n\nexport const FALSE = false\n\nexport const RAW_NULL = 'null'\n\nexport const RAW_TRUE = 'true'\n\nexport const RAW_FALSE = 'false'\n\n// path 中的参数前缀，如 /user/:userId\nexport const PREFIX_PARAM = ':'\n\n// path 分隔符\nexport const SEPARATOR_PATH = '/'\n\n// path 和 search 的分隔符\nexport const SEPARATOR_SEARCH = '?'\n\n// query 分隔符\nexport const SEPARATOR_QUERY = '&'\n\n// 键值对分隔符\nexport const SEPARATOR_PAIR = '='\n\n// 参数中的数组标识\nexport const FLAG_ARRAY = '[]'\n\n// history 模式\nexport const MODE_HISTORY = 'history'\n\n// 导航钩子 - 路由进入之前\nexport const ROUTER_HOOK_BEFORE_ENTER = 'beforeEnter'\n\n// 导航钩子 - 路由进入之后\nexport const ROUTER_HOOK_AFTER_ENTER = 'afterEnter'\n\n// 导航钩子 - 路由更新之前\nexport const ROUTER_HOOK_BEFORE_UPDATE = 'beforeUpdate'\n\n// 导航钩子 - 路由更新之后\nexport const ROUTER_HOOK_AFTER_UPDATE = 'afterUpdate'\n\n// 导航钩子 - 路由离开之前\nexport const ROUTER_HOOK_BEFORE_LEAVE = 'beforeLeave'\n\n// 导航钩子 - 路由离开之后\nexport const ROUTER_HOOK_AFTER_LEAVE = 'afterLeave'\n\n// 组件 Options 上的导航钩子\nexport const COMPONENT_HOOK_BEFORE_ENTER = 'beforeRouteEnter'\nexport const COMPONENT_HOOK_AFTER_ENTER = 'afterRouteEnter'\nexport const COMPONENT_HOOK_BEFORE_UPDATE = 'beforeRouteUpdate'\nexport const COMPONENT_HOOK_AFTER_UPDATE = 'afterRouteUpdate'\nexport const COMPONENT_HOOK_BEFORE_LEAVE = 'beforeRouteLeave'\nexport const COMPONENT_HOOK_AFTER_LEAVE = 'afterRouteLeave'","import {\n  Task,\n} from 'yox'\n\nimport {\n  Location,\n} from './type'\n\nexport default class Hooks {\n\n  list: Task[]\n\n  to: Location\n\n  from: Location | void\n\n  setLocation(to: Location, from: Location | void) {\n    this.to = to\n    this.from = from\n    return this\n  }\n\n  clear() {\n    this.list = []\n    return this\n  }\n\n  add(hook: Function | void, ctx: any) {\n    const { list } = this\n    if (hook) {\n      list.push({\n        fn: hook,\n        ctx,\n      })\n    }\n    return this\n  }\n\n  next(isGuard: boolean, next: Function, callback: Function) {\n    const task = this.list.shift()\n    if (task) {\n      if (isGuard) {\n        task.fn.call(task.ctx, this.to, this.from, next)\n      }\n      else {\n        task.fn.call(task.ctx, this.to, this.from)\n        next()\n      }\n    }\n    else {\n      callback()\n    }\n  }\n\n}","import Yox from 'yox'\n\nimport {\n  NULL,\n  TRUE,\n  FALSE,\n  RAW_NULL,\n  RAW_TRUE,\n  RAW_FALSE,\n} from '../constant'\n\n/**\n * 把字符串 value 解析成最合适的类型\n */\nexport function parse(API: typeof Yox, value: string) {\n  let result: any\n  if (API.is.numeric(value)) {\n    result = +value\n  }\n  else if (API.is.string(value)) {\n    if (value === RAW_TRUE) {\n      result = TRUE\n    }\n    else if (value === RAW_FALSE) {\n      result = FALSE\n    }\n    else if (value === RAW_NULL) {\n      result = NULL\n    }\n    else {\n      result = decodeURIComponent(value)\n    }\n  }\n  return result\n}\n\nexport function stringify(API: typeof Yox, value: any): string | void {\n  if (API.is.string(value)) {\n    return encodeURIComponent(value)\n  }\n  else if (API.is.number(value) || API.is.boolean(value)) {\n    return value.toString()\n  }\n  else if (value === NULL) {\n    return RAW_NULL\n  }\n}","import {\n  DomApi,\n  Listener,\n} from 'yox'\n\nimport {\n  Location,\n} from '../type'\n\nimport {\n  WINDOW,\n  HISTORY,\n  LOCATION,\n  SEPARATOR_PATH,\n} from '../constant'\n\n// hash 前缀，Google 的规范是 #! 开头，如 #!/path/sub?key=value\nconst HASH_PREFIX = '#!',\n\nHASH_CHANGE = 'hashchange'\n\nexport function start(api: DomApi, handler: Function) {\n  api.on(WINDOW, HASH_CHANGE, handler as Listener)\n  handler()\n}\n\nexport function stop(api: DomApi, handler: Function) {\n  api.off(WINDOW, HASH_CHANGE, handler)\n}\n\nexport function push(location: Location, handler: Function) {\n  LOCATION.hash = HASH_PREFIX + location.url\n}\n\nexport function go(n: number) {\n  HISTORY.go(n)\n}\n\nexport function current() {\n\n  // 不能直接读取 window.location.hash\n  // 因为 Firefox 会做 pre-decode\n  const href = LOCATION.href, index = href.indexOf(HASH_PREFIX)\n\n  return index > 0\n    ? href.substr(index + HASH_PREFIX.length)\n    : SEPARATOR_PATH\n\n}\n","import {\n  DomApi,\n  Listener,\n} from 'yox'\n\nimport {\n  Location,\n} from '../type'\n\nimport {\n  WINDOW,\n  HISTORY,\n  LOCATION,\n} from '../constant'\n\nconst POP_STATE = 'popstate'\n\nexport const isSupported = 'pushState' in HISTORY\n\nexport function start(api: DomApi, handler: Function) {\n  api.on(WINDOW, POP_STATE, handler as Listener)\n  handler()\n}\n\nexport function stop(api: DomApi, handler: Function) {\n  api.off(WINDOW, POP_STATE, handler)\n}\n\nexport function push(location: Location, handler: Function) {\n  // 调用 pushState 不会触发 popstate 事件\n  // 因此这里需要手动调用一次 handler\n  HISTORY.pushState({}, '', location.url)\n  handler()\n}\n\nexport function go(n: number) {\n  HISTORY.go(n)\n}\n\nexport function current() {\n  return LOCATION.pathname + LOCATION.search\n}\n","import Yox, {\n  Data,\n  Listener,\n  VNode,\n  Directive,\n  ComponentOptions,\n  CustomEventInterface,\n  YoxInterface,\n} from 'yox'\n\nimport {\n  TRUE,\n  FALSE,\n  UNDEFINED,\n\n  MODE_HISTORY,\n  PREFIX_PARAM,\n  SEPARATOR_PATH,\n  SEPARATOR_SEARCH,\n\n  ROUTER_HOOK_BEFORE_ENTER,\n  ROUTER_HOOK_AFTER_ENTER,\n  ROUTER_HOOK_BEFORE_UPDATE,\n  ROUTER_HOOK_AFTER_UPDATE,\n  ROUTER_HOOK_BEFORE_LEAVE,\n  ROUTER_HOOK_AFTER_LEAVE,\n\n  COMPONENT_HOOK_BEFORE_ENTER,\n  COMPONENT_HOOK_AFTER_ENTER,\n  COMPONENT_HOOK_BEFORE_UPDATE,\n  COMPONENT_HOOK_AFTER_UPDATE,\n  COMPONENT_HOOK_BEFORE_LEAVE,\n  COMPONENT_HOOK_AFTER_LEAVE,\n} from './constant'\n\nimport {\n  Target,\n  Location,\n  RouteTarget,\n  RouterOptions,\n  RouteOptions,\n  LinkedRoute,\n  RoutePending,\n  Redirect,\n  RouteCallback,\n  RouterMode,\n  RouteBeforeHook,\n  RouteAfterHook,\n} from './type'\n\nimport Hooks from './Hooks'\n\nimport * as queryUtil from './util/query'\nimport * as valueUtil from './util/value'\n\nimport * as hashMode from './mode/hash'\nimport * as historyMode from './mode/history'\n\nlet API: typeof Yox, hookEvents: Record<string, Listener>, guid = 0\n\nconst ROUTE_COMPONENT = 'RouteComponent',\n\nNAMESPACE_HOOK = '.hook',\n\nEVENT_CLICK = 'click',\n\nEMPTY_FUNCTION = new Function()\n\n/**\n * 格式化路径，确保它以 / 开头，不以 / 结尾\n */\nfunction formatPath(path: string, parentPath: string | void) {\n\n  // 如果不是 / 开头，表示是相对路径\n  if (!API.string.startsWith(path, SEPARATOR_PATH)) {\n    // 确保 parentPath 以 / 结尾\n    if (parentPath) {\n      if (!API.string.endsWith(parentPath, SEPARATOR_PATH)) {\n        parentPath += SEPARATOR_PATH\n      }\n    }\n    else {\n      parentPath = SEPARATOR_PATH\n    }\n    path = parentPath + path\n  }\n\n  // 如果 path 以 / 结尾，删掉它\n  if (path !== SEPARATOR_PATH\n    && API.string.endsWith(path, SEPARATOR_PATH)\n  ) {\n    path = API.string.slice(path, 0, -SEPARATOR_PATH.length)\n  }\n\n  return path\n\n}\n\n/**\n * 把结构化数据序列化成 url\n */\nfunction stringifyUrl(path: string, params: Data | void, query: Data | void) {\n\n  if (/\\/\\:\\w+/.test(path)) {\n\n    const terms: string[] = []\n\n    API.array.each(\n      path.split(SEPARATOR_PATH),\n      function (item) {\n        terms.push(\n          API.string.startsWith(item, PREFIX_PARAM) && params\n            ? params[item.substr(PREFIX_PARAM.length)]\n            : item\n        )\n      }\n    )\n\n    path = terms.join(SEPARATOR_PATH)\n\n  }\n\n  if (query) {\n    const queryStr = queryUtil.stringify(API, query)\n    if (queryStr) {\n      path += SEPARATOR_SEARCH + queryStr\n    }\n  }\n\n  return path\n\n}\n\n/**\n * 按照 propTypes 定义的外部数据格式过滤路由参数，这样有两个好处：\n *\n * 1. 避免传入不符预期的数据\n * 2. 避免覆盖 data 定义的数据\n */\nfunction filterProps(route: LinkedRoute, location: Location, options: ComponentOptions) {\n  const result: Data = {}, propTypes = options.propTypes\n  if (propTypes) {\n\n    let props = location.query,\n\n    routeParams = route.params,\n\n    locationParams = location.params\n\n    // 从 location.params 挑出 route.params 定义过的参数\n    if (routeParams && locationParams) {\n      props = props ? API.object.copy(props) : {}\n      for (let i = 0, length = routeParams.length; i < length; i++) {\n        (props as Data)[routeParams[i]] = locationParams[routeParams[i]]\n      }\n    }\n\n    if (props) {\n      for (let key in propTypes) {\n        let value = props[key]\n        if (value !== UNDEFINED) {\n          result[key] = value\n        }\n      }\n    }\n\n  }\n  return result\n}\n\n/**\n * 是否是叶子节点\n * 如果把叶子节点放在 if 中，会出现即使不是定义时的叶子节点，却是运行时的叶子节点\n */\nfunction isLeafRoute(route: LinkedRoute) {\n  const child = route.child\n  return !child || !child.context\n}\n\nfunction updateRoute(instance: YoxInterface, componentHookName: string | void, routerHookName: string | undefined, upsert?: boolean) {\n  const route = instance.$route as LinkedRoute\n  if (route) {\n    route.context = upsert ? instance : UNDEFINED\n    if (isLeafRoute(route)) {\n      const router = instance.$router as Router\n      if (componentHookName && routerHookName) {\n        router.hook(route, componentHookName, routerHookName, FALSE)\n      }\n      if (upsert) {\n        const { pending } = router\n        if (pending) {\n          pending.onComplete()\n          router.pending = UNDEFINED\n        }\n      }\n    }\n  }\n}\n\nexport class Router {\n\n  el: Element\n\n  options: RouterOptions\n\n  routes: LinkedRoute[]\n\n  route404: LinkedRoute\n\n  name2Path: Record<string, string>\n\n  path2Route: Record<string, LinkedRoute>\n\n  mode: RouterMode\n\n  history: Location[]\n\n  cursor: number\n\n  pending?: RoutePending\n\n  // 路由钩子\n  hooks: Hooks\n\n  // 路由或参数发生了变化会触发此函数\n  handler: Function\n\n  // 当前渲染的路由\n  route?: LinkedRoute\n\n  // 当前地址栏的路径和参数\n  location?: Location\n\n  constructor(options: RouterOptions) {\n\n    const instance = this, el = options.el, route404 = options.route404 || default404\n\n    instance.options = options\n\n    instance.el = API.is.string(el)\n      ? API.dom.find(el as string) as Element\n      : el as Element\n\n    if (process.env.NODE_ENV === 'development') {\n      if (!instance.el) {\n        API.logger.error(`The \"el\" option must be an element or a selector.`)\n        return\n      }\n    }\n\n    instance.mode = options.mode === MODE_HISTORY && historyMode.isSupported\n      ? historyMode\n      : hashMode\n\n    instance.handler = function () {\n\n      const url = instance.mode.current(), { pending } = instance\n\n      if (pending) {\n        const { location } = pending\n        // 通过 push 或 go 触发\n        if (location.url === url) {\n          instance.setHistory(location, pending.cursor)\n          instance.setRoute(location)\n          return\n        }\n        instance.pending = UNDEFINED\n      }\n\n      // 直接修改地址栏触发\n      instance.parseLocation(\n        url,\n        function (location) {\n          if (location) {\n            instance.setHistory(location)\n            instance.setRoute(location)\n          }\n          else {\n            instance.push(instance.route404)\n          }\n        }\n      )\n    }\n\n    instance.routes = []\n    instance.name2Path = {}\n    instance.path2Route = {}\n\n    instance.history = []\n    instance.cursor = -1\n\n    instance.hooks = new Hooks()\n\n    API.array.each(\n      options.routes,\n      function (route) {\n        instance.add(route)\n      }\n    )\n\n    instance.route404 = instance.add(route404)[0]\n\n  }\n\n  /**\n   * 添加一个新的路由\n   */\n  add(routeOptions: RouteOptions, parentRoute: LinkedRoute | void) {\n\n    const instance = this,\n\n    newRoutes: LinkedRoute[] = [],\n\n    pathStack: string[] = [],\n\n    routeStack: LinkedRoute[] = [],\n\n    addRoute = function (routeOptions: RouteOptions) {\n\n      let { name, component, children, load } = routeOptions,\n\n      parentPath = API.array.last(pathStack),\n\n      parentRoute = API.array.last(routeStack),\n\n      path = formatPath(routeOptions.path, parentPath),\n\n      route: LinkedRoute = { path, route: routeOptions },\n\n      params: string[] = []\n\n      API.array.each(\n        path.split(SEPARATOR_PATH),\n        function (item) {\n          if (API.string.startsWith(item, PREFIX_PARAM)) {\n            params.push(\n              item.substr(PREFIX_PARAM.length)\n            )\n          }\n        }\n      )\n\n      if (params.length) {\n        route.params = params\n      }\n\n      if (name) {\n        route.name = name\n      }\n\n      // component 和 load 二选一\n      if (load) {\n        route.load = load\n      }\n      else {\n        // 每一级都必须有一个组件\n        // 如果没有，则用占位组件，避免业务层写太多无用的组件\n        route.component = component || placeholderComponent\n      }\n\n      if (parentRoute) {\n        route.parent = parentRoute\n      }\n\n      if (children) {\n        pathStack.push(path)\n        routeStack.push(route)\n        API.array.each(\n          children,\n          addRoute\n        )\n        routeStack.pop()\n        pathStack.pop()\n      }\n      else {\n\n        newRoutes.push(route)\n        instance.routes.push(route)\n\n        if (name) {\n          if (process.env.NODE_ENV === 'development') {\n            if (API.object.has(instance.name2Path, name)) {\n              API.logger.error(`The name \"${name}\" of the route is existed.`)\n              return\n            }\n          }\n          instance.name2Path[name] = path\n        }\n\n        if (process.env.NODE_ENV === 'development') {\n          if (API.object.has(instance.path2Route, path)) {\n            API.logger.error(`The path \"${path}\" of the route is existed.`)\n            return\n          }\n        }\n\n        instance.path2Route[path] = route\n\n      }\n\n    }\n\n    if (parentRoute) {\n      pathStack.push(parentRoute.path)\n      routeStack.push(parentRoute)\n    }\n\n    addRoute(routeOptions)\n\n    return newRoutes\n\n  }\n\n  /**\n   * 删除一个已注册的路由\n   */\n  remove(route: LinkedRoute) {\n\n    const instance = this\n\n    API.array.remove(instance.routes, route)\n\n    if (route.name) {\n      delete instance.name2Path[route.name]\n    }\n\n    delete instance.path2Route[route.path]\n\n  }\n\n  /**\n   * target 有 3 种格式：\n   *\n   * 如果只是简单的 path，直接传字符串\n   *\n   * push('/index')\n   *\n   * 如果需要带参数，可传对象\n   *\n   * push({\n   *   path: '/index',\n   *   params: { },\n   *   query: { }\n   * })\n   *\n   * 如果路由配置了 name，可用 name 代替 path，如下：\n   *\n   * push({\n   *   name: 'index'\n   * })\n   *\n   * 也可以不传 path 或 name，只传 params 或 query\n   * 表示不修改 path，仅修改 params 或 query\n   *\n   */\n  push(target: Target) {\n\n    const instance = this, { mode } = instance\n\n    instance.setUrl(\n      instance.toUrl(target),\n      EMPTY_FUNCTION,\n      EMPTY_FUNCTION,\n      function (location, pending) {\n        instance.pending = pending\n        if (mode.current() !== location.url) {\n          mode.push(location, instance.handler)\n        }\n        else {\n          instance.setRoute(location)\n        }\n      }\n    )\n\n  }\n\n  /**\n   * 不改变 URL，只修改路由组件\n   */\n  replace(target: Target) {\n\n    const instance = this\n\n    instance.setUrl(\n      instance.toUrl(target),\n      function () {\n        instance.replaceHistory(instance.location as Location)\n      },\n      EMPTY_FUNCTION,\n      function (location, pending) {\n        instance.pending = pending\n        instance.setRoute(location)\n      }\n    )\n\n  }\n\n  /**\n   * 前进或后退 n 步\n   */\n  go(n: number) {\n\n    const instance = this,\n\n    { mode } = instance,\n\n    cursor = instance.cursor + n,\n\n    location = instance.history[cursor]\n\n    if (location) {\n      instance.setUrl(\n        stringifyUrl(location.path, location.params, location.query),\n        EMPTY_FUNCTION,\n        EMPTY_FUNCTION,\n        function (location, pending) {\n          pending.cursor = cursor\n          instance.pending = pending\n\n          if (mode.current() !== location.url) {\n            mode.go(n)\n          }\n          else {\n            instance.setHistory(location, cursor)\n            instance.setRoute(location)\n          }\n        }\n      )\n    }\n\n  }\n\n  /**\n   * 启动路由\n   */\n  start() {\n    this.mode.start(API.dom, this.handler)\n  }\n\n  /**\n   * 停止路由\n   */\n  stop() {\n    this.mode.stop(API.dom, this.handler)\n  }\n\n  /**\n   * 钩子函数\n   */\n  hook(route: LinkedRoute, componentHook: string, routerHook: string, isGuard: boolean, callback?: Function) {\n\n    const instance = this,\n\n    { location, hooks, pending } = instance,\n\n    { context } = route,\n\n    onComplete = function () {\n      // 如果钩子未被拦截，则会走进 onComplete\n      // 这里要把钩子事件冒泡上去，便于业务层处理\n      // 加命名空间是为了和 yox 生命周期钩子事件保持一致\n      if (context) {\n        context.fire(\n          componentHook + NAMESPACE_HOOK,\n          {\n            from: hooks.from,\n            to: hooks.to,\n          }\n        )\n      }\n      // 在发事件之后调用 callback\n      // 因为 callback 有可能销毁组件，导致事件发不出去\n      if (callback) {\n        callback()\n      }\n    },\n\n    next = function (value?: false | Target) {\n      if (value === UNDEFINED) {\n        hooks.next(isGuard, next, onComplete)\n      }\n      else {\n        // 只有前置守卫才有可能走进这里\n        // 此时 instance.location 还是旧地址\n        if (pending) {\n          pending.onAbort()\n          instance.pending = UNDEFINED\n        }\n        if (value === FALSE) {\n          if (location) {\n            instance.push(location)\n          }\n        }\n        else {\n          // 跳转到别的路由\n          instance.push(value)\n        }\n      }\n    }\n\n    hooks\n      .clear()\n      // 先调用组件的钩子\n      .add((route.component as ComponentOptions)[componentHook], context)\n      // 再调用路由配置的钩子\n      .add(route.route[routerHook], route.route)\n      // 最后调用路由实例的钩子\n      .add(instance.options[routerHook], instance)\n\n    next()\n\n  }\n\n  private setHistory(location: Location, index: number | void) {\n\n    const { history, cursor } = this\n\n    // 如果没传 cursor，表示 push\n    if (!API.is.number(index)) {\n      index = cursor + 1\n      // 确保下一个为空\n      // 如果不为空，肯定是调用过 go()，此时直接清掉后面的就行了\n      if (history[index]) {\n        history.length = index\n      }\n    }\n\n    history[index as number] = location\n\n    this.cursor = index as number\n\n  }\n\n  private replaceHistory(location: Location) {\n    const { history, cursor } = this\n    if (history[cursor]) {\n      history[cursor] = location\n    }\n  }\n\n  private toUrl(target: Target): string {\n\n    if (API.is.string(target)) {\n      return formatPath(target as string)\n    }\n\n    let instance = this,\n\n    location = instance.location,\n\n    routeTarget = target as RouteTarget,\n\n    params = routeTarget.params,\n\n    path: string | void\n\n    if (routeTarget.name) {\n      path = instance.name2Path[routeTarget.name]\n    }\n    else if (routeTarget.path) {\n      path = formatPath(routeTarget.path)\n    }\n    else if (location) {\n      path = location.path\n      if (!params) {\n        params = location.params\n      }\n    }\n\n    if (process.env.NODE_ENV === 'development') {\n      if (!API.is.string(path)) {\n        API.logger.error(`The path is not found.`)\n      }\n    }\n\n    return stringifyUrl(\n      path as string,\n      params,\n      routeTarget.query\n    )\n\n  }\n\n  private setUrl(\n    url: string,\n    onComplete: Function,\n    onAbort: Function,\n    callback: (locaiton: Location, pending: RoutePending) => void\n  ) {\n\n    // 这里无需判断新旧 url 是否相同，因为存在 replace，即使它们相同也不等价于不用跳转\n    const instance = this\n\n    instance.parseLocation(\n      url,\n      function (location) {\n        if (location) {\n          callback(\n            location,\n            {\n              location,\n              onComplete,\n              onAbort,\n            }\n          )\n        }\n      }\n    )\n\n  }\n\n  private parseLocation(url: string, callback: (location?: Location) => void) {\n\n    let realpath: string, search: string | void, index = url.indexOf(SEPARATOR_SEARCH)\n\n    if (index >= 0) {\n      realpath = url.slice(0, index)\n      search = url.slice(index + 1)\n    }\n    else {\n      realpath = url\n    }\n\n    // 匹配已注册的 route\n    const instance = this,\n\n    realpathTerms = realpath.split(SEPARATOR_PATH),\n\n    length = realpathTerms.length,\n\n    matchRoute = function (\n      routes: LinkedRoute[],\n      callback: (route?: LinkedRoute, params?: Data) => void\n    ) {\n\n      let index = 0, route: LinkedRoute | void\n\n      loop: while (route = routes[index++]) {\n        const path = route.path\n\n        // 动态路由\n        if (route.params) {\n          const pathTerms = path.split(SEPARATOR_PATH)\n          // path 段数量必须一致，否则没有比较的意义\n          if (length === pathTerms.length) {\n            const params: Data = {}\n            for (let i = 0; i < length; i++) {\n              if (API.string.startsWith(pathTerms[i], PREFIX_PARAM)) {\n                params[pathTerms[i].substr(PREFIX_PARAM.length)] = valueUtil.parse(API, realpathTerms[i])\n              }\n              // 非参数段不相同\n              else if (pathTerms[i] !== realpathTerms[i]) {\n                continue loop\n              }\n            }\n            callback(route, params)\n            return\n          }\n        }\n        // 懒加载路由，前缀匹配成功后，意味着懒加载回来的路由一定有我们想要的\n        else if (route.load && API.string.startsWith(realpath, path)) {\n          const routeCallback: RouteCallback = function (lazyRoute) {\n            instance.remove(route as LinkedRoute)\n            matchRoute(\n              instance.add(lazyRoute['default'] || lazyRoute, (route as LinkedRoute).parent),\n              callback\n            )\n          }\n          const promise = route.load(routeCallback)\n          if (promise) {\n            promise.then(routeCallback)\n          }\n          return\n        }\n        else if (path === realpath) {\n          callback(route)\n          return\n        }\n      }\n\n      callback()\n\n    }\n\n    matchRoute(\n      instance.routes,\n      function (route, params) {\n        if (route) {\n          const location: Location = {\n            url,\n            path: route.path\n          }\n          if (params) {\n            location.params = params\n          }\n          if (search) {\n            const query = queryUtil.parse(API, search)\n            if (query) {\n              location.query = query\n            }\n          }\n          callback(location)\n        }\n        else {\n          if (process.env.NODE_ENV === 'development') {\n            API.logger.error(`The path \"${realpath}\" can't match a route.`)\n          }\n          callback()\n        }\n      }\n    )\n\n  }\n\n  private diffRoute(\n    route: LinkedRoute,\n    oldRoute: LinkedRoute | void,\n    onComplete: (route: LinkedRoute, startRoute: LinkedRoute | void) => void,\n    startRoute: LinkedRoute | void,\n    childRoute: LinkedRoute | void,\n    oldTopRoute: LinkedRoute | void\n  ) {\n\n    // 更新链路\n    if (childRoute) {\n      route.child = childRoute\n      childRoute.parent = route\n    }\n\n    if (oldRoute) {\n      // 同级的两个组件不同，疑似起始更新的路由\n      if (oldRoute.component !== route.component) {\n        startRoute = route\n      }\n      else {\n        // 把上次的组件实例搞过来\n        route.context = oldRoute.context\n      }\n    }\n    else {\n      startRoute = route\n    }\n\n    if (route.parent) {\n      this.diffRoute(\n        API.object.copy(route.parent),\n        oldRoute ? oldRoute.parent : UNDEFINED,\n        onComplete,\n        startRoute,\n        route,\n        oldRoute || oldTopRoute\n      )\n      return\n    }\n\n    // 整个组件树全换掉\n    if (startRoute === route) {\n      let context: YoxInterface | void\n      // 当层级较多的路由切换到层级较少的路由\n      if (oldRoute) {\n        while (oldRoute) {\n          context = oldRoute.context\n          oldRoute = oldRoute.parent\n        }\n      }\n      // 当层级较少的路由切换到层级较多的路由\n      else if (oldTopRoute) {\n        context = oldTopRoute.context\n      }\n      if (context) {\n        startRoute.context = context\n      }\n    }\n\n    // 到达根组件，结束\n    onComplete(route, startRoute)\n\n  }\n\n  private patchRoute(\n    route: LinkedRoute,\n    startRoute: LinkedRoute | void\n  ) {\n\n    const instance = this, location = instance.location as Location\n\n    // 从上往下更新 props\n    while (route) {\n\n      let { parent, context, component } = route\n\n      if (route === startRoute) {\n\n        if (parent) {\n\n          context = parent.context as YoxInterface\n          context.forceUpdate(\n            filterProps(\n              parent,\n              location,\n              parent.component as ComponentOptions\n            )\n          )\n\n          context = context.$routeView\n          if (context) {\n            const props = {}, name = ROUTE_COMPONENT + (++guid)\n            props[ROUTE_COMPONENT] = name\n            context.component(name, component)\n            context.forceUpdate(props)\n          }\n\n        }\n        else {\n\n          if (context) {\n            context.destroy()\n          }\n\n          // 每层路由组件都有 $route 和 $router 属性\n          const extensions = {\n            $router: instance,\n            $route: route\n          }\n\n          const options: ComponentOptions = API.object.extend(\n            {\n              el: instance.el,\n              props: filterProps(route, location, component as ComponentOptions),\n              extensions,\n            },\n            component as ComponentOptions\n          )\n\n          options.events = options.events\n            ? API.object.extend(options.events, hookEvents)\n            : hookEvents\n\n          route.context = new API(options)\n\n        }\n\n      }\n\n      else if (context) {\n        if (context.$vnode) {\n          context.$route = route\n          context.forceUpdate(\n            filterProps(route, location, component as ComponentOptions)\n          )\n        }\n        else {\n          route.context = UNDEFINED\n        }\n        if (route.child) {\n          route = route.child as LinkedRoute\n          continue\n        }\n      }\n      break\n    }\n  }\n\n  private setRoute(location: Location) {\n\n    let instance = this,\n\n    linkedRoute = instance.path2Route[location.path],\n\n    redirect = linkedRoute.route.redirect\n\n    if (redirect) {\n      if (API.is.func(redirect)) {\n        redirect = (redirect as Redirect)(location)\n      }\n      if (redirect) {\n        instance.push(redirect as Target)\n        return\n      }\n    }\n\n    const newRoute = API.object.copy(linkedRoute),\n\n    oldRoute = instance.route,\n\n    oldLocation = instance.location,\n\n    enterRoute = function () {\n      instance.diffRoute(\n        newRoute,\n        oldRoute,\n        function (route, startRoute) {\n          instance.hook(\n            newRoute,\n            startRoute ? COMPONENT_HOOK_BEFORE_ENTER : COMPONENT_HOOK_BEFORE_UPDATE,\n            startRoute ? ROUTER_HOOK_BEFORE_ENTER : ROUTER_HOOK_BEFORE_UPDATE,\n            TRUE,\n            function () {\n\n              instance.route = newRoute\n              instance.location = location\n\n              instance.patchRoute(route, startRoute)\n\n            }\n          )\n        }\n      )\n    }\n\n    instance.hooks.setLocation(location, oldLocation)\n\n    if (oldRoute && oldLocation && location.path !== oldLocation.path) {\n      instance.hook(\n        oldRoute,\n        COMPONENT_HOOK_BEFORE_LEAVE,\n        ROUTER_HOOK_BEFORE_LEAVE,\n        TRUE,\n        enterRoute\n      )\n      return\n    }\n\n    enterRoute()\n\n  }\n\n}\n\nconst default404 = {\n  path: '/404',\n  component: {\n    template: '<div>This is a default 404 page, please set \"route404\" for your own 404 page.</div>'\n  }\n},\n\n// 占位组件\nplaceholderComponent = {\n  template: '<router-view />'\n},\n\ndirective = {\n  bind(node: HTMLElement | YoxInterface, directive: Directive, vnode: VNode) {\n\n    // 当前组件如果是根组件，则没有 $root 属性\n    const $root = vnode.context.$root || vnode.context,\n\n    router = $root.$router as Router,\n\n    listener = vnode.data[directive.key] = function (_: CustomEventInterface) {\n      let { value, getter } = directive, target: any = value\n      if (value && getter && API.string.has(value as string, '{')) {\n        target = getter()\n      }\n      router[directive.name](target)\n    }\n\n    if (vnode.isComponent) {\n      (node as YoxInterface).on(EVENT_CLICK, listener)\n    }\n    else {\n      API.dom.on(node as HTMLElement, EVENT_CLICK, listener)\n    }\n\n  },\n  unbind(node: HTMLElement | YoxInterface, directive: Directive, vnode: VNode) {\n    const listener = vnode.data[directive.key]\n    if (vnode.isComponent) {\n      (node as YoxInterface).off(EVENT_CLICK, listener)\n    }\n    else {\n      API.dom.off(node as HTMLElement, EVENT_CLICK, listener)\n    }\n  },\n},\n\nRouterView: ComponentOptions = {\n  template: '<$' + ROUTE_COMPONENT + '/>',\n  beforeCreate(options) {\n\n    const context = options.context as YoxInterface,\n\n    // context 一定有 $route 属性\n    route = (context.$route as LinkedRoute).child as LinkedRoute\n\n    if (route) {\n\n      context.$routeView = this\n\n      const props = options.props = {}, components = options.components = {},\n\n      name = ROUTE_COMPONENT + (++guid)\n\n      props[ROUTE_COMPONENT] = name\n      components[name] = route.component\n\n    }\n\n  },\n  beforeDestroy() {\n    this.$context.$routeView = UNDEFINED\n  }\n}\n\n/**\n * 版本\n */\nexport const version = process.env.NODE_VERSION\n\n/**\n * 安装插件\n */\nexport function install(Y: typeof Yox): void {\n\n  API = Y\n\n  API.directive({\n    push: directive,\n    replace: directive,\n    go: directive,\n  })\n\n  API.component('router-view', RouterView)\n\n  hookEvents = {}\n  hookEvents['beforeCreate' + NAMESPACE_HOOK] = function (event: CustomEventInterface, data?: Data) {\n    if (data) {\n      let options = data as ComponentOptions, { context } = options\n      // 当前组件是 <router-view> 中的动态组件\n      if (context && context.$options.beforeCreate === RouterView.beforeCreate) {\n        // 找到渲染 <router-view> 的父级组件，它是一定存在的\n        context = context.$context as YoxInterface\n\n        const router = context.$router as Router,\n\n        // context 一定有 $route 属性\n        route = (context.$route as LinkedRoute).child as LinkedRoute\n\n        if (route) {\n          options.extensions = {\n            $router: router,\n            $route: route,\n          }\n          if (router.location) {\n            options.props = filterProps(route, router.location, options)\n          }\n        }\n      }\n    }\n  }\n  hookEvents['afterMount' + NAMESPACE_HOOK] = function (event: CustomEventInterface) {\n    updateRoute(\n      event.target as YoxInterface,\n      COMPONENT_HOOK_AFTER_ENTER,\n      ROUTER_HOOK_AFTER_ENTER,\n      TRUE\n    )\n  }\n  hookEvents['afterUpdate' + NAMESPACE_HOOK] = function (event: CustomEventInterface) {\n    updateRoute(\n      event.target as YoxInterface,\n      COMPONENT_HOOK_AFTER_UPDATE,\n      ROUTER_HOOK_AFTER_UPDATE,\n      TRUE\n    )\n  }\n  hookEvents['afterDestroy' + NAMESPACE_HOOK] = function (event: CustomEventInterface) {\n    updateRoute(\n      event.target as YoxInterface,\n      COMPONENT_HOOK_AFTER_LEAVE,\n      ROUTER_HOOK_AFTER_LEAVE\n    )\n  }\n\n}\n\ndeclare module 'yox' {\n\n  interface ComponentOptions {\n    [COMPONENT_HOOK_BEFORE_ENTER]?: RouteBeforeHook\n    [COMPONENT_HOOK_AFTER_ENTER]?: RouteAfterHook\n    [COMPONENT_HOOK_BEFORE_UPDATE]?: RouteBeforeHook\n    [COMPONENT_HOOK_AFTER_UPDATE]?: RouteAfterHook\n    [COMPONENT_HOOK_BEFORE_LEAVE]?: RouteBeforeHook\n    [COMPONENT_HOOK_AFTER_LEAVE]?: RouteAfterHook\n  }\n\n  interface YoxInterface {\n    $routeView?: YoxInterface\n    $route?: LinkedRoute\n    $router?: Router\n  }\n\n}\n","import Yox from 'yox'\n\nimport {\n  SEPARATOR_QUERY,\n  SEPARATOR_PAIR,\n  FLAG_ARRAY,\n} from '../constant'\n\nimport * as valueUtil from './value'\n\n/**\n * 把 GET 参数解析成对象\n */\nexport function parse(API: typeof Yox, query: string) {\n  let result: object | undefined\n  API.array.each(\n    query.split(SEPARATOR_QUERY),\n    function (term) {\n\n      let terms = term.split(SEPARATOR_PAIR),\n\n      key = API.string.trim(terms[0]),\n\n      value = terms[1]\n\n      if (key) {\n        if (!result) {\n          result = {}\n        }\n        value = valueUtil.parse(API, value)\n        if (API.string.endsWith(key, FLAG_ARRAY)) {\n          key = API.string.slice(key, 0, -FLAG_ARRAY.length)\n          API.array.push(\n            result[key] || (result[key] = []),\n            value\n          )\n        }\n        else {\n          result[key] = value\n        }\n      }\n\n    }\n  )\n  return result\n}\n\n/**\n * 把对象解析成 key1=value1&key2=value2\n */\nexport function stringify(API: typeof Yox, query: object) {\n  const result: string[] = []\n  for (let key in query) {\n    const value = query[key]\n    if (API.is.array(value)) {\n      API.array.each(\n        value,\n        function (value) {\n          const str = valueUtil.stringify(API, value)\n          if (API.is.string(str)) {\n            result.push(\n              key + FLAG_ARRAY + SEPARATOR_PAIR + str\n            )\n          }\n        }\n      )\n    }\n    else {\n      const str = valueUtil.stringify(API, value)\n      if (API.is.string(str)) {\n        result.push(\n          key + SEPARATOR_PAIR + str\n        )\n      }\n    }\n  }\n  return result.join(SEPARATOR_QUERY)\n}\n"],"names":["WINDOW","window","LOCATION","location","HISTORY","history","UNDEFINED","NULL","TRUE","FALSE","RAW_NULL","RAW_TRUE","RAW_FALSE","PREFIX_PARAM","SEPARATOR_PATH","SEPARATOR_SEARCH","SEPARATOR_QUERY","SEPARATOR_PAIR","FLAG_ARRAY","MODE_HISTORY","ROUTER_HOOK_BEFORE_ENTER","ROUTER_HOOK_AFTER_ENTER","ROUTER_HOOK_BEFORE_UPDATE","ROUTER_HOOK_AFTER_UPDATE","ROUTER_HOOK_BEFORE_LEAVE","ROUTER_HOOK_AFTER_LEAVE","COMPONENT_HOOK_BEFORE_ENTER","COMPONENT_HOOK_AFTER_ENTER","COMPONENT_HOOK_BEFORE_UPDATE","COMPONENT_HOOK_AFTER_UPDATE","COMPONENT_HOOK_BEFORE_LEAVE","COMPONENT_HOOK_AFTER_LEAVE","Hooks","[object Object]","to","from","this","list","hook","ctx","push","fn","isGuard","next","callback","task","shift","call","parse","API","value","result","is","numeric","string","decodeURIComponent","stringify","encodeURIComponent","number","boolean","toString","HASH_PREFIX","HASH_CHANGE","api","handler","on","off","hash","url","n","go","href","index","indexOf","substr","length","POP_STATE","isSupported","pushState","pathname","search","hookEvents","guid","ROUTE_COMPONENT","NAMESPACE_HOOK","EMPTY_FUNCTION","Function","formatPath","path","parentPath","startsWith","endsWith","slice","stringifyUrl","params","query","test","terms","array","each","split","item","join","queryStr","key","str","valueUtil.stringify","queryUtil.stringify","filterProps","route","options","propTypes","props","routeParams","locationParams","object","copy","i","updateRoute","instance","componentHookName","routerHookName","upsert","$route","context","child","isLeafRoute","router","$router","pending","onComplete","Router","el","route404","default404","dom","find","mode","historyMode.isSupported","historyMode","hashMode","current","setHistory","cursor","setRoute","parseLocation","routes","name2Path","path2Route","hooks","add","routeOptions","parentRoute","newRoutes","pathStack","routeStack","addRoute","name","component","children","load","last","placeholderComponent","parent","pop","remove","target","setUrl","toUrl","replaceHistory","start","stop","componentHook","routerHook","fire","onAbort","clear","routeTarget","realpath","realpathTerms","matchRoute","loop","pathTerms","valueUtil.parse","routeCallback","lazyRoute","promise","then","term","trim","queryUtil.parse","oldRoute","startRoute","childRoute","oldTopRoute","diffRoute","forceUpdate","$routeView","destroy","extensions","extend","events","$vnode","linkedRoute","redirect","func","newRoute","oldLocation","enterRoute","patchRoute","setLocation","template","directive","node","vnode","$root","listener","data","_","getter","has","isComponent","RouterView","components","$context","version","install","Y","replace","event","$options","beforeCreate"],"mappings":"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"}