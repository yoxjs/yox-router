{"version":3,"file":"yox-router.js","sources":["../src/index.ts"],"sourcesContent":["import * as type from '../../yox-type/src/type'\n\nimport API from '../../yox-type/src/interface/API'\nimport Yox from '../../yox-type/src/interface/Yox'\nimport PropRule from '../../yox-type/src/interface/PropRule'\nimport YoxClass from '../../yox-type/src/interface/YoxClass'\nimport Task from '../../yox-type/src/interface/Task'\nimport YoxOptions from '../../yox-type/src/options/Yox'\nimport VNode from '../../yox-type/src/vnode/VNode'\nimport Directive from '../../yox-type/src/vnode/Directive'\nimport CustomEvent from '../../yox-type/src/event/CustomEvent'\n\nlet Yox: YoxClass, registry: Yox, domApi: API\n\nconst UNDEFINED = void 0,\n\nOUTLET = '$outlet',\n\nROUTE = '$route',\n\nROUTER = '$router',\n\nCOMPONENT = 'component',\n\n// 点击事件\nEVENT_CLICK = 'click',\n\n// hash 前缀，Google 的规范是 #! 开头，如 #!/path/sub?key=value\nPREFIX_HASH = '#!',\n\n// path 中的参数前缀，如 #!/user/:userId\nPREFIX_PARAM = ':',\n\n// path 分隔符\nSEPARATOR_PATH = '/',\n\n// query 分隔符\nSEPARATOR_QUERY = '&',\n\n// 键值对分隔符\nSEPARATOR_PAIR = '=',\n\n// 参数中的数组标识\nFLAG_ARRAY = '[]',\n\n// 404 路由\nROUTE_404 = '/**',\n\n// 导航钩子 - 如果相继路由到的是同一个组件，那么会触发 refreshing 事件\nHOOK_REFRESHING = 'refreshing',\n\n// 导航钩子 - 路由进入之前\nHOOK_BEFORE_ENTER = 'beforeEnter',\n\n// 导航钩子 - 路由进入之后\nHOOK_AFTER_ENTER = 'afterEnter',\n\n// 导航钩子 - 路由离开之前\nHOOK_BEFORE_LEAVE = 'beforeLeave',\n\n// 导航钩子 - 路由离开之后\nHOOK_AFTER_LEAVE = 'afterLeave'\n\ninterface RouteTarget {\n  name?: string\n  path?: string\n  params?: type.data\n  query?: type.data\n}\n\ntype Target = string | RouteTarget\n\ntype next = (value?: false | Target) => void\n\ntype success = () => void\n\ntype failure = (value: false | Target) => void\n\ntype BeforeHook = (to: Location, from: Location | void, next: next) => void\n\ntype AfterHook = (to: Location, from: Location | void) => void\n\ninterface RouterOptions {\n  el: Element,\n  routes: RouteOptions[],\n}\n\ninterface RouteOptions {\n  path: string,\n  component: string\n  name?: string\n  children?: RouteOptions[]\n  [HOOK_BEFORE_ENTER]?: BeforeHook\n  [HOOK_AFTER_ENTER]?: AfterHook\n  [HOOK_BEFORE_LEAVE]?: BeforeHook\n  [HOOK_AFTER_LEAVE]?: AfterHook\n}\n\ninterface LinkedRoute {\n  path: string\n  component: string\n  route: RouteOptions\n  parent?: LinkedRoute\n  child?: LinkedRoute\n  options?: YoxOptions\n  context?: Yox\n}\n\ninterface Hash {\n  realpath: string\n  route?: LinkedRoute\n  params?: type.data\n  query?: type.data\n}\n\ninterface Location {\n  path: string\n  props: type.data\n  params?: type.data\n  query?: type.data\n}\n\n/**\n * 把字符串 value 解析成最合适的类型\n */\nfunction parseValue(value: string) {\n  let result: any\n  if (Yox.is.numeric(value)) {\n    result = +value\n  }\n  else if (Yox.is.string(value)) {\n    if (value === 'true') {\n      result = true\n    }\n    else if (value === 'false') {\n      result = false\n    }\n    else if (value === 'null') {\n      result = null\n    }\n    else if (value === 'undefined') {\n      result = UNDEFINED\n    }\n    else {\n      result = decodeURIComponent(value)\n    }\n  }\n  return result\n}\n\n/**\n * 把 key value 序列化成合适的 key=value 格式\n */\nfunction stringifyPair(key: string, value: any) {\n  let result = [key]\n  if (Yox.is.string(value)) {\n    result.push(\n      encodeURIComponent(value)\n    )\n  }\n  else if (Yox.is.number(value) || Yox.is.boolean(value)) {\n    result.push(\n      value.toString()\n    )\n  }\n  else if (value === null) {\n    result.push(\n      'null'\n    )\n  }\n  else if (value === UNDEFINED) {\n    result.push(\n      'undefined'\n    )\n  }\n  return result.join(SEPARATOR_PAIR)\n}\n\n/**\n * 把 GET 参数解析成对象\n */\nfunction parseQuery(query: string) {\n  let result: Object | undefined\n  Yox.array.each(\n    query.split(SEPARATOR_QUERY),\n    function (term) {\n\n      let terms = term.split(SEPARATOR_PAIR),\n\n      key = Yox.string.trim(terms[0]),\n\n      value = terms[1]\n\n      if (key) {\n        if (!result) {\n          result = {}\n        }\n        value = parseValue(value)\n        if (Yox.string.endsWith(key, FLAG_ARRAY)) {\n          key = Yox.string.slice(key, 0, -FLAG_ARRAY.length)\n          Yox.array.push(\n            result[key] || (result[key] = []),\n            value\n          )\n        }\n        else {\n          result[key] = value\n        }\n      }\n\n    }\n  )\n  return result\n}\n\n/**\n * 把对象解析成 key1=value1&key2=value2\n */\nfunction stringifyQuery(query: Object) {\n  const result: string[] = []\n  Yox.object.each(\n    query,\n    function (value, key) {\n      if (Yox.is.array(value)) {\n        Yox.array.each(\n          value,\n          function (value) {\n            result.push(\n              stringifyPair(key + FLAG_ARRAY, value)\n            )\n          }\n        )\n      }\n      else {\n        result.push(\n          stringifyPair(key, value)\n        )\n      }\n    }\n  )\n  return result.join(SEPARATOR_QUERY)\n}\n\n/**\n * 解析 path 中的参数\n */\nfunction parseParams(realpath: string, path: string) {\n\n  let result: Object | undefined,\n\n  realpathTerms = realpath.split(SEPARATOR_PATH),\n\n  pathTerms = path.split(SEPARATOR_PATH)\n\n  if (realpathTerms.length === pathTerms.length) {\n    Yox.array.each(\n      pathTerms,\n      function (item, index) {\n        if (Yox.string.startsWith(item, PREFIX_PARAM)) {\n          if (!result) {\n            result = {}\n          }\n          result[item.substr(PREFIX_PARAM.length)] = parseValue(realpathTerms[index])\n        }\n      }\n    )\n  }\n\n  return result\n\n}\n\n/**\n * 通过 realpath 获取配置的路由\n */\nfunction getRouteByRealpath(routes: LinkedRoute[], realpath: string) {\n\n  let result: LinkedRoute | undefined,\n\n  realpathTerms = realpath.split(SEPARATOR_PATH),\n\n  length = realpathTerms.length\n\n  Yox.array.each(\n    routes,\n    function (route) {\n      const pathTerms = (route.path as string).split(SEPARATOR_PATH)\n      if (length === pathTerms.length) {\n        for (let i = 0; i < length; i++) {\n          // 非参数段不相同\n          if (!Yox.string.startsWith(pathTerms[i], PREFIX_PARAM)\n            && pathTerms[i] !== realpathTerms[i]\n          ) {\n            return\n          }\n        }\n        result = route\n        return false\n      }\n    }\n  )\n\n  return result\n\n}\n\n/**\n * 完整解析 hash 数据\n */\nfunction parseHash(routes: LinkedRoute[], hash: string) {\n\n  let realpath: string, search: string | void, index = hash.indexOf('?')\n\n  if (index >= 0) {\n    realpath = hash.substring(0, index)\n    search = hash.substring(index + 1)\n  }\n  else {\n    realpath = hash\n  }\n\n  const result: Hash = { realpath },\n\n  route = getRouteByRealpath(routes, realpath)\n\n  if (route) {\n    result.route = route\n    const params = parseParams(realpath, route.path as string)\n    if (params) {\n      result.params = params\n    }\n    if (search) {\n      const query = parseQuery(search)\n      if (query) {\n        result.query = query\n      }\n    }\n  }\n\n  return result\n}\n\n/**\n * 把结构化数据序列化成 hash\n */\nfunction stringifyHash(path: string, params: Object | void, query: Object | void) {\n\n  let terms: string[] = [], realpath: string, search = ''\n\n  Yox.array.each(\n    path.split(SEPARATOR_PATH),\n    function (item) {\n      terms.push(\n        Yox.string.startsWith(item, PREFIX_PARAM)\n          ? params[item.substr(PREFIX_PARAM.length)]\n          : item\n      )\n    }\n  )\n\n  realpath = terms.join(SEPARATOR_PATH)\n\n  if (query) {\n    const queryStr = stringifyQuery(query)\n    if (queryStr) {\n      search = '?' + queryStr\n    }\n  }\n\n  return PREFIX_HASH + realpath + search\n\n}\n\n/**\n * 按照 propTypes 定义的外部数据格式过滤路由参数，这样有两个好处：\n *\n * 1. 避免传入不符预期的数据\n * 2. 避免覆盖 data 定义的数据\n */\nfunction filterProps(props: type.data, options: YoxOptions) {\n  const result: type.data = {}\n  if (options.propTypes) {\n    Yox.object.each(\n      options.propTypes,\n      function (rule: PropRule, key: string) {\n        const defaultValue = Yox.checkProp(props, key, rule)\n        result[key] = defaultValue !== UNDEFINED\n          ? defaultValue\n          : props[key]\n      }\n    )\n  }\n  return result\n}\n\n// 钩子函数的调用链\nclass Hooks {\n\n  name: string\n\n  list: Task[]\n\n  constructor(name: string) {\n    this.name = name\n    this.list = []\n  }\n\n  add(target: Object | void, ctx: any) {\n    const { name, list } = this\n    if (target && Yox.is.func(target[name])) {\n      list.push({\n        fn: target[name] as Function,\n        ctx,\n      })\n    }\n    return this\n  }\n\n  run(to: Location, from: Location | void, success: success | void, failure: failure | void) {\n\n    const { list } = this,\n\n    next: next = function (value?: false | Target) {\n      if (value == null) {\n        const task = list.shift()\n        if (task) {\n          task.fn.call(task.ctx, to, from, next)\n        }\n        else if (success) {\n          success()\n        }\n      }\n      else if (failure) {\n        failure(value)\n      }\n    }\n\n    next()\n\n  }\n\n}\n\nexport class Router {\n\n  el: Element\n\n  routes: LinkedRoute[]\n\n  route404: LinkedRoute\n\n  name2Path: Record<string, string>\n\n  onHashChange: Function\n\n  // 当前地址栏的路径和参数\n  location?: Location\n\n  // 当前渲染的路由\n  route?: LinkedRoute\n\n  [HOOK_REFRESHING]?: BeforeHook\n\n  [HOOK_BEFORE_ENTER]?: BeforeHook\n\n  [HOOK_AFTER_ENTER]?: AfterHook\n\n  [HOOK_BEFORE_LEAVE]?: BeforeHook\n\n  [HOOK_AFTER_LEAVE]?: AfterHook\n\n  constructor(options: RouterOptions) {\n\n    const instance = this, routes: LinkedRoute[] = [], name2Path = {}\n\n    instance.el = options.el\n\n    /**\n     * hashchange 事件处理函数\n     * 此函数必须写在实例上，不能写在类上\n     * 否则一旦解绑，所有实例都解绑了\n     */\n    instance.onHashChange = function () {\n\n      let hashStr = location.hash\n\n      // 如果不以 PREFIX_HASH 开头，表示不合法\n      hashStr = Yox.string.startsWith(hashStr, PREFIX_HASH)\n        ? hashStr.substr(PREFIX_HASH.length)\n        : ''\n\n      const hash = parseHash(routes, hashStr),\n\n      { params, query } = hash,\n\n      route = hash.route || instance.route404,\n\n      props: type.data = {}\n\n      if (params) {\n        Yox.object.extend(props, params)\n      }\n      if (query) {\n        Yox.object.extend(props, query)\n      }\n\n      instance.setRoute(\n        {\n          path: route.path,\n          props,\n          params,\n          query,\n        },\n        route\n      )\n\n    }\n\n    let route404: LinkedRoute | undefined,\n\n    pathStack: string[] = [],\n\n    routeStack: LinkedRoute[] = [],\n\n    callback = function (route: RouteOptions) {\n\n      let { name, path, component, children } = route\n\n      // 如果 path 以 / 结尾，删掉它\n      // 比如 { path: 'index/' }\n      if (Yox.string.endsWith(path, SEPARATOR_PATH)) {\n        path = Yox.string.slice(path, 0, -1)\n      }\n\n      // 如果 path 不是以 / 开头，有两种情况：\n      // 1. 没有上级或上级是 ''，需要自动加 / 前缀\n      // 2. 相对上级的路径，自动替换最后一个 / 后面的路径\n      if (!Yox.string.startsWith(path, SEPARATOR_PATH)) {\n\n        const parent = Yox.array.last(pathStack)\n\n        if (path) {\n          if (Yox.string.falsy(parent)) {\n            path = SEPARATOR_PATH + path\n          }\n          else {\n            path = parent + SEPARATOR_PATH + path\n          }\n        }\n        else if (parent) {\n          path = parent\n        }\n\n      }\n\n      const linkedRoute: LinkedRoute = { path, route, component },\n\n      parent = Yox.array.last(routeStack)\n\n      if (parent) {\n        linkedRoute.parent = parent\n      }\n\n      if (children) {\n        pathStack.push(path)\n        routeStack.push(linkedRoute)\n        Yox.array.each(\n          children,\n          callback\n        )\n        pathStack.pop()\n        routeStack.pop()\n      }\n      else {\n        routes.push(linkedRoute)\n      }\n\n      if (name) {\n        if (process.env.NODE_ENV === 'dev') {\n          if (!Yox.object.has(name2Path, name)) {\n            Yox.logger.error(`Name[${name}] of the route is existed.`)\n            return\n          }\n        }\n        name2Path[name] = path\n      }\n      if (path === ROUTE_404) {\n        route404 = linkedRoute\n      }\n\n    }\n\n    Yox.array.each(\n      options.routes,\n      callback\n    )\n\n    if (process.env.NODE_ENV === 'dev') {\n      if (!route404) {\n        Yox.logger.error(`Route for 404[\"${ROUTE_404}\"] is required.`)\n        return\n      }\n    }\n\n    instance.name2Path = name2Path\n\n    instance.routes = routes\n\n    instance.route404 = route404 as LinkedRoute\n\n\n  }\n\n  /**\n   * 真正执行路由切换操作的函数\n   *\n   * target 有 2 种格式：\n   *\n   * 如果只是简单的 path，直接传字符串\n   *\n   * push('/index')\n   *\n   * 如果需要带参数，可传对象\n   *\n   * push({\n   *   path: '/index',\n   *   params: { },\n   *   query: { }\n   * })\n   *\n   * 如果路由配置了 name，可用 name 代替 path，如下：\n   *\n   * push({\n   *   name: 'index'\n   * })\n   *\n   */\n  push(target: Target) {\n\n    let path: string, params: type.data | void, query: type.data | void\n\n    if (Yox.is.string(target)) {\n      path = target as string\n    }\n    else {\n      params = (target as RouteTarget).params\n      query = (target as RouteTarget).query\n\n      const name = (target as RouteTarget).name\n      if (name) {\n        path = this.name2Path[name]\n        if (process.env.NODE_ENV === 'dev') {\n          if (!Yox.is.string(path)) {\n            Yox.logger.error(`Name[${name}] of the route is not found.`)\n            return\n          }\n        }\n      }\n      else {\n        path = (target as RouteTarget).path as string\n      }\n    }\n\n    location.hash = stringifyHash(path, params, query)\n\n  }\n\n  /**\n   * 启动路由\n   */\n  start() {\n    domApi.on(window, 'hashchange', this.onHashChange as type.listener)\n    this.onHashChange()\n  }\n\n  /**\n   * 停止路由\n   */\n  stop() {\n    domApi.off(window, 'hashchange', this.onHashChange as type.listener)\n  }\n\n  /**\n   * 切换路由\n   */\n  private setRoute(to: Location, route: LinkedRoute) {\n\n    let instance = this,\n\n    from = instance.location,\n\n    childRoute: LinkedRoute | void,\n\n    startRoute: LinkedRoute | void,\n\n    failure: failure = function (value: false | Target) {\n      if (value === false) {\n        // 流程到此为止，恢复到当前路由\n        if (from\n          && Yox.is.string(from.path)\n          && from.path !== ROUTE_404\n        ) {\n          window.location.hash = stringifyHash(\n            from.path as string,\n            from.params,\n            from.query\n          )\n        }\n      }\n      else {\n        // 跳转到别的路由\n        instance.push(value)\n      }\n    },\n\n    callHook = function (name: string, success: success | void, failure: failure | void) {\n      new Hooks(name)\n      // 先调用组件的钩子\n      // .add(currentComponent.options, currentComponent.root)\n      // 再调用路由配置的钩子\n      .add(location, route.route)\n      // 最后调用路由实例的钩子\n      .add(instance, instance)\n      .run(to, from, success, failure)\n    },\n\n    // 对比新旧两个路由链表\n    diffComponent = function (route: LinkedRoute, oldRoute: LinkedRoute | void, isLeafRoute: boolean | void) {\n\n      // route 是注册时的路由，不能修改，因此这里拷贝一个\n      const newRoute: LinkedRoute = Yox.object.copy(route)\n\n      // 存储叶子路由，因为 diff 的过程是从下往上\n      if (isLeafRoute) {\n        instance.route = newRoute\n      }\n\n      // 不论是同步还是异步组件，都可以通过 registry.loadComponent 取到 options\n      registry.loadComponent(\n        newRoute.component,\n        function (options) {\n\n          newRoute.options = options\n\n          // 更新链路\n          if (childRoute) {\n            newRoute.child = childRoute\n            childRoute.parent = newRoute\n          }\n\n          childRoute = newRoute\n\n          if (oldRoute) {\n            // 同级的两个组件不同，疑似起始更新的路由\n            if (oldRoute.options !== options) {\n              startRoute = newRoute\n            }\n            else {\n              // 把上次的组件实例搞过来\n              const { context } = oldRoute\n              if (context) {\n                context[ROUTE] = newRoute\n                newRoute.context = context\n              }\n            }\n          }\n          else {\n            startRoute = newRoute\n          }\n\n          if (newRoute.parent) {\n            diffComponent(\n              newRoute.parent,\n              oldRoute ? oldRoute.parent : UNDEFINED\n            )\n            return\n          }\n\n          // 到达根组件，结束\n\n          // oldRoute 可以为空，利用它就可以不再声明新变量\n          oldRoute = newRoute\n\n          // 从上往下更新 props\n          while (oldRoute) {\n\n            let { parent, context, component, options } = oldRoute\n\n            if (oldRoute === startRoute) {\n\n              if (parent) {\n\n                context = parent.context as Yox\n                context.forceUpdate(\n                  filterProps(to.props, parent.options as YoxOptions)\n                )\n\n                context = context[OUTLET]\n                if (context) {\n                  const props = {}\n                  props[COMPONENT] = component\n                  context.component(component, options)\n                  context.forceUpdate(props)\n                }\n\n              }\n              else {\n                if (context) {\n                  context.destroy()\n                }\n\n                // 每层路由组件都有 $route 和 $router 属性\n                const extensions = {}\n                extensions[ROUTER] = instance\n                extensions[ROUTE] = newRoute\n\n                startRoute.context = new Yox(\n                  Yox.object.extend(\n                    {\n                      el: instance.el,\n                      props: filterProps(to.props, options as YoxOptions),\n                      extensions,\n                    },\n                    options as YoxOptions\n                  )\n                )\n              }\n\n            }\n\n            else if (context) {\n              context.forceUpdate(\n                filterProps(to.props, options as YoxOptions)\n              )\n              // 如果 <router-view> 定义在 if 里\n              // 当 router-view 从无到有时，这里要读取最新的 child\n              // 当 router-view 从有到无时，这里要判断它是否存在\n              if (context[OUTLET]) {\n                oldRoute = oldRoute.child\n                continue\n              }\n            }\n            break\n          }\n\n        }\n      )\n    }\n\n    instance.location = to\n\n    diffComponent(route, instance.route, true)\n\n  }\n\n}\n\nconst directive = {\n  bind(node: HTMLElement | Yox, directive: Directive, vnode: VNode) {\n\n    // 当前组件如果是根组件，则没有 $root 属性\n    const $root = vnode.context.$root || vnode.context,\n\n    router: Router = $root[ROUTER],\n\n    listener = function (_: CustomEvent) {\n      const value = directive.getter && directive.getter()\n      router.push(value != null ? value : directive.value)\n    }\n\n    if (vnode.isComponent) {\n      (node as Yox).on(EVENT_CLICK, listener)\n      vnode.data[directive.key] = function () {\n        (node as Yox).off(EVENT_CLICK, listener)\n      }\n    }\n    else {\n      domApi.on(node as HTMLElement, EVENT_CLICK, listener)\n      vnode.data[directive.key] = function () {\n        domApi.off(node as HTMLElement, EVENT_CLICK, listener)\n      }\n    }\n\n  },\n  unbind(node: HTMLElement | Yox, directive: Directive, vnode: VNode) {\n    vnode.data[directive.key]()\n  },\n}\n\nconst RouterView: YoxOptions = {\n  template: '<$' + COMPONENT + '/>',\n  beforeCreate(options) {\n\n    const parentContext = options.parent as Yox,\n\n    route = parentContext[ROUTE].child as LinkedRoute,\n\n    props = {},\n\n    components = {}\n\n    parentContext[OUTLET] = this\n\n    props[COMPONENT] = route.component\n    components[route.component] = route.options\n\n    options.props = props\n    options.components = components\n\n  },\n  beforeDestroy() {\n    this.$parent[OUTLET] = UNDEFINED\n  },\n  beforeChildCreate(childOptions: YoxOptions) {\n\n    const { $parent } = this,\n\n    router: Router = $parent[ROUTER],\n\n    extensions = {}\n\n    if (router.location) {\n      childOptions.props = filterProps(router.location.props, childOptions)\n    }\n\n    extensions[ROUTE] = $parent[ROUTE].child\n    extensions[ROUTER] = router\n\n    childOptions.extensions = extensions\n\n  },\n  afterChildCreate(child: Yox) {\n    child[ROUTE].context = child\n  },\n  beforeChildDestroy(child: Yox) {\n    child[ROUTE].context = UNDEFINED\n  }\n}\n\n/**\n * 版本\n */\nexport const version = process.env.NODE_VERSION\n\n/**\n * 注册全局组件，路由实例可共享\n */\nexport function register(\n  name: string | Record<string, type.component>,\n  component?: type.component\n): void {\n  registry.component(name, component)\n}\n\n/**\n * 安装插件\n */\nexport function install(Class: YoxClass): void {\n\n  Yox = Class\n  registry = new Class()\n  domApi = Class.dom as API\n\n  Yox.directive('href', directive)\n\n  // 提供两种风格\n  Yox.component({\n    RouterView: RouterView,\n    'router-view': RouterView,\n  })\n\n}\n"],"names":[],"mappings":"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"}