{"version":3,"file":"yox-router.js","sources":["../src/index.ts"],"sourcesContent":["import * as type from 'yox-type/src/type'\n\nimport API from 'yox-type/src/interface/API'\nimport Yox from 'yox-type/src/interface/Yox'\nimport YoxClass from 'yox-type/src/interface/YoxClass'\nimport Task from 'yox-type/src/interface/Task'\nimport YoxOptions from 'yox-type/src/options/Yox';\n\nlet Yox: YoxClass, store: Yox, domApi: API\n\nconst UNDEFINED = void 0,\n\n// hash 前缀，Google 的规范是 #! 开头，如 #!/path/sub?key=value\nPREFIX_HASH = '#!',\n\n// path 中的参数前缀，如 #!/user/:userId\nPREFIX_PARAM = ':',\n\n// path 分隔符\nSEPARATOR_PATH = '/',\n\n// query 分隔符\nSEPARATOR_QUERY = '&',\n\n// 键值对分隔符\nSEPARATOR_PAIR = '=',\n\n// 参数中的数组标识\nFLAG_ARRAY = '[]',\n\n// 默认路由\nROUTE_DEFAULT = '',\n\n// 404 路由\nROUTE_404 = '*',\n\n// 导航钩子 - 如果相继路由到的是同一个组件，那么会触发 refreshing 事件\nHOOK_REFRESHING = 'refreshing',\n\n// 导航钩子 - 路由进入之前\nHOOK_BEFORE_ENTER = 'beforeEnter',\n\n// 导航钩子 - 路由进入之后\nHOOK_AFTER_ENTER = 'afterEnter',\n\n// 导航钩子 - 路由离开之前\nHOOK_BEFORE_LEAVE = 'beforeLeave',\n\n// 导航钩子 - 路由离开之后\nHOOK_AFTER_LEAVE = 'afterLeave'\n\ntype PathTarget = string\n\ninterface RouteTarget {\n  name: string\n  params?: type.data\n  query?: type.data\n}\n\ninterface ComponentTarget {\n  component: string\n  props?: type.data\n}\n\ntype Target = PathTarget | RouteTarget | ComponentTarget\n\ntype next = (value?: false | Target) => void\n\ntype success = () => void\n\ntype failure = (value: false | Target) => void\n\ntype hook = (to: Route, from: Route | void, next: next) => void\n\ninterface RouteOptions {\n  path: string,\n  component: string\n  name?: string\n  [HOOK_REFRESHING]?: hook\n  [HOOK_BEFORE_ENTER]?: hook\n  [HOOK_AFTER_ENTER]?: hook\n  [HOOK_BEFORE_LEAVE]?: hook\n  [HOOK_AFTER_LEAVE]?: hook\n}\n\ninterface Route {\n  component: string\n  props?: type.data\n  path?: string\n  params?: type.data\n  query?: type.data\n}\n\ninterface Component {\n  name: string\n  root?: Yox\n  options?: YoxOptions\n}\n\ninterface Hash {\n  realpath: string\n  route?: RouteOptions\n  params?: type.data\n  query?: type.data\n}\n\n/**\n * 把字符串 value 解析成最合适的类型\n */\nfunction parseValue(value: string) {\n  let result: any\n  if (Yox.is.numeric(value)) {\n    result = +value\n  }\n  else if (Yox.is.string(value)) {\n    if (value === 'true') {\n      result = true\n    }\n    else if (value === 'false') {\n      result = false\n    }\n    else if (value === 'null') {\n      result = null\n    }\n    else if (value === 'undefined') {\n      result = UNDEFINED\n    }\n    else {\n      result = decodeURIComponent(value)\n    }\n  }\n  return result\n}\n\n/**\n * 把 key value 序列化成合适的 key=value 格式\n */\nfunction stringifyPair(key: string, value: any) {\n  let result = [key]\n  if (Yox.is.string(value)) {\n    result.push(\n      encodeURIComponent(value)\n    )\n  }\n  else if (Yox.is.number(value) || Yox.is.boolean(value)) {\n    result.push(\n      value.toString()\n    )\n  }\n  else if (value === null) {\n    result.push(\n      'null'\n    )\n  }\n  else if (value === UNDEFINED) {\n    result.push(\n      'undefined'\n    )\n  }\n  return result.join(SEPARATOR_PAIR)\n}\n\n/**\n * 把 GET 参数解析成对象\n */\nfunction parseQuery(query: string) {\n  let result: Object | undefined\n  Yox.array.each(\n    query.split(SEPARATOR_QUERY),\n    function (term) {\n\n      let terms = term.split(SEPARATOR_PAIR),\n\n      key = Yox.string.trim(terms[0]),\n\n      value = terms[1]\n\n      if (key) {\n        if (!result) {\n          result = {}\n        }\n        value = parseValue(value)\n        if (Yox.string.endsWith(key, FLAG_ARRAY)) {\n          key = Yox.string.slice(key, 0, -FLAG_ARRAY.length)\n          Yox.array.push(\n            result[key] || (result[key] = []),\n            value\n          )\n        }\n        else {\n          result[key] = value\n        }\n      }\n\n    }\n  )\n  return result\n}\n\n/**\n * 把对象解析成 key1=value1&key2=value2\n */\nfunction stringifyQuery(query: Object) {\n  const result: string[] = []\n  Yox.object.each(\n    query,\n    function (value, key) {\n      if (Yox.is.array(value)) {\n        Yox.array.each(\n          value,\n          function (value) {\n            result.push(\n              stringifyPair(key + FLAG_ARRAY, value)\n            )\n          }\n        )\n      }\n      else {\n        result.push(\n          stringifyPair(key, value)\n        )\n      }\n    }\n  )\n  return result.join(SEPARATOR_QUERY)\n}\n\n/**\n * 解析 path 中的参数\n */\nfunction parseParams(realpath: string, path: string) {\n\n  let result: Object | undefined,\n\n  realpathTerms = realpath.split(SEPARATOR_PATH),\n\n  pathTerms = path.split(SEPARATOR_PATH)\n\n  if (realpathTerms.length === pathTerms.length) {\n    Yox.array.each(\n      pathTerms,\n      function (item, index) {\n        if (Yox.string.startsWith(item, PREFIX_PARAM)) {\n          if (!result) {\n            result = {}\n          }\n          result[item.substr(PREFIX_PARAM.length)] = parseValue(realpathTerms[index])\n        }\n      }\n    )\n  }\n\n  return result\n\n}\n\n/**\n * 通过 realpath 获取配置的路由\n */\nfunction getRouteByRealpath(routes: RouteOptions[], realpath: string) {\n\n  let result: RouteOptions | undefined,\n\n  realpathTerms = realpath.split(SEPARATOR_PATH),\n\n  length = realpathTerms.length\n\n  Yox.array.each(\n    routes,\n    function (route) {\n      const pathTerms = route.path.split(SEPARATOR_PATH)\n      if (length === pathTerms.length) {\n        for (let i = 0; i < length; i++) {\n          // 非参数段不相同\n          if (!Yox.string.startsWith(pathTerms[i], PREFIX_PARAM)\n            && pathTerms[i] !== realpathTerms[i]\n          ) {\n            return\n          }\n        }\n        result = route\n        return false\n      }\n    }\n  )\n\n  return result\n\n}\n\n/**\n * 完整解析 hash 数据\n */\nfunction parseHash(routes: RouteOptions[], hash: string) {\n\n  let realpath: string, search: string | void, index = hash.indexOf('?')\n\n  if (index >= 0) {\n    realpath = hash.substring(0, index)\n    search = hash.substring(index + 1)\n  }\n  else {\n    realpath = hash\n  }\n\n  let result: Hash = { realpath }, route = getRouteByRealpath(routes, realpath)\n\n  if (route) {\n    result.route = route\n    const params = parseParams(realpath, route.path)\n    if (params) {\n      result.params = params\n    }\n    if (search) {\n      const query = parseQuery(search)\n      if (query) {\n        result.query = query\n      }\n    }\n  }\n\n  return result\n}\n\n/**\n * 把结构化数据序列化成 hash\n */\nfunction stringifyHash(path: string, params: Object | void, query: Object | void) {\n\n  let terms: string[] = [], realpath: string, search = ''\n\n  Yox.array.each(\n    path.split(SEPARATOR_PATH),\n    function (item) {\n      terms.push(\n        Yox.string.startsWith(item, PREFIX_PARAM)\n          ? params[item.substr(PREFIX_PARAM.length)]\n          : item\n      )\n    }\n  )\n\n  realpath = terms.join(SEPARATOR_PATH)\n\n  if (query) {\n    const queryStr = stringifyQuery(query)\n    if (queryStr) {\n      search = '?' + queryStr\n    }\n  }\n\n  return PREFIX_HASH + realpath + search\n\n}\n\n// 钩子函数的调用链\nclass Chain {\n\n  name: string\n\n  list: Task[]\n\n  constructor(name: string) {\n    this.name = name\n    this.list = []\n  }\n\n  append(target: Object | void, ctx: any) {\n    const { name, list } = this\n    if (target && Yox.is.func(target[name])) {\n      list.push({\n        fn: target[name] as Function,\n        ctx,\n      })\n    }\n    return this\n  }\n\n  run(to: Route, from: Route | void, success: success | void, failure: failure | void) {\n\n    const { list } = this,\n\n    next: next = function (value?: false | Target) {\n      if (value == null) {\n        const task = list.shift()\n        if (task) {\n          task.fn.call(task.ctx, to, from, next)\n        }\n        else if (success) {\n          success()\n        }\n      }\n      else if (failure) {\n        failure(value)\n      }\n    }\n\n    next()\n\n  }\n\n}\n\nexport class Router {\n\n  el?: Element\n\n  routes: RouteOptions[]\n\n  route404: RouteOptions\n\n  routeDefault: RouteOptions\n\n  name2Path: Record<string, string>\n\n  onHashChange: Function\n\n  currentRoute?: Route\n\n  currentComponent?: Component\n\n  [HOOK_REFRESHING]?: hook\n\n  [HOOK_BEFORE_ENTER]?: hook\n\n  [HOOK_AFTER_ENTER]?: hook\n\n  [HOOK_BEFORE_LEAVE]?: hook\n\n  [HOOK_AFTER_LEAVE]?: hook\n\n  constructor(routes: RouteOptions[]) {\n\n    const instance = this\n\n    instance.routes = routes\n\n    /**\n     * 路由表 name -> path\n     */\n    instance.name2Path = {}\n\n    /**\n     * hashchange 事件处理函数\n     * 此函数必须写在实例上，不能写在类上\n     * 否则一旦解绑，所有实例都解绑了\n     */\n    instance.onHashChange = function () {\n\n      let hashStr = location.hash\n\n      // 如果不以 PREFIX_HASH 开头，表示不合法\n      hashStr = Yox.string.startsWith(hashStr, PREFIX_HASH)\n        ? hashStr.substr(PREFIX_HASH.length)\n        : ''\n\n      const hash = parseHash(routes, hashStr),\n\n      route = hash.route || (hashStr ? instance.route404 : instance.routeDefault)\n\n      instance.setRoute(\n        {\n          component: route.component,\n          path: route.path,\n          params: hash.params,\n          query: hash.query,\n        },\n        route\n      )\n\n    }\n\n    let route404: RouteOptions | undefined, routeDefault: RouteOptions | undefined\n\n    Yox.array.each(\n      routes,\n      function (route: RouteOptions) {\n        if (route.name) {\n          instance.name2Path[route.name] = route.path\n        }\n        if (route.path === ROUTE_404) {\n          route404 = route\n        }\n        else if (route.path === ROUTE_DEFAULT) {\n          routeDefault = route\n        }\n      }\n    )\n\n    if (process.env.NODE_ENV === 'dev') {\n      if (!routeDefault) {\n        Yox.logger.error(`Route for default[\"${ROUTE_DEFAULT}\"] is required.`)\n        return\n      }\n      if (!route404) {\n        Yox.logger.error(`Route for 404[\"${ROUTE_404}\"] is required.`)\n        return\n      }\n    }\n\n    this.route404 = route404 as RouteOptions\n    this.routeDefault = routeDefault as RouteOptions\n\n  }\n\n  /**\n   * 真正执行路由切换操作的函数\n   *\n   * data 有 2 种格式：\n   *\n   * 1. 会修改 url\n   *\n   * 如果只是简单的 path，直接传字符串\n   *\n   * go('/index')\n   *\n   * 如果需要带参数，切记路由表要配置 name\n   *\n   * go({\n   *   name: 'index',\n   *   params: { },\n   *   query: { }\n   * })\n   *\n   * 如果没有任何参数，可以只传 path\n   *\n   * go('/index')\n   *\n   * 2. 不会改变 url\n   *\n   * go({\n   *   component: 'index',\n   *   props: { }\n   * })\n   *\n   */\n  go(target: Target) {\n    if (Yox.is.string(target)) {\n      location.hash = stringifyHash(target as PathTarget)\n    }\n    else if (Yox.is.object(target)) {\n      if (Yox.object.has(target, 'component')) {\n\n        const { component, props } = target as ComponentTarget\n\n        this.setRoute({\n          component,\n          props,\n        })\n\n      }\n      else if (Yox.object.has(target, 'name')) {\n\n        const { name, params, query } = target as RouteTarget, path = this.name2Path[name]\n\n        if (process.env.NODE_ENV === 'dev') {\n          if (!Yox.is.string(path)) {\n            Yox.logger.error(`Name[${name}] of the route is not found.`)\n            return\n          }\n        }\n\n        location.hash = stringifyHash(path, params, query)\n\n      }\n    }\n  }\n\n  /**\n   * 切换路由\n   */\n  setRoute(route: Route, options?: RouteOptions) {\n\n    let instance = this,\n\n    { currentRoute } = instance,\n\n    { params, query, component, props } = route,\n\n    currentComponent = instance.currentComponent || (instance.currentComponent = { name: component }),\n\n    failure: failure = function (value: false | Target) {\n      if (value === false) {\n        // 流程到此为止，恢复到当前路由\n        if (currentRoute && Yox.is.string(currentRoute.path)) {\n          location.hash = stringifyHash(\n            currentRoute.path as string,\n            currentRoute.params,\n            currentRoute.query\n          )\n        }\n      }\n      else {\n        // 跳转到别的路由\n        instance.go(value)\n      }\n    },\n\n    callHook = function (name: string, success: success | void, failure: failure | void) {\n      new Chain(name)\n      // 先调用组件的钩子\n      .append(currentComponent.options, currentComponent.root)\n      // 再调用路由配置的钩子\n      .append(options, options)\n      // 最后调用路由实例的钩子\n      .append(instance, instance)\n      .run(route, currentRoute, success, failure)\n    },\n\n    createComponent = function (options: YoxOptions) {\n\n      currentComponent.options = options\n\n      callHook(\n        HOOK_BEFORE_ENTER,\n        function () {\n\n          if (params || query) {\n            props = {}\n            if (params) {\n              Yox.object.extend(props, params)\n            }\n            if (query) {\n              Yox.object.extend(props, query)\n            }\n          }\n\n          currentComponent.root = new Yox(\n            Yox.object.extend(\n              {\n                el: instance.el,\n                props,\n                extensions: {\n                  $router: instance,\n                  $route: route,\n                }\n              },\n              options\n            )\n          )\n\n          instance.currentRoute = route\n\n          callHook(HOOK_AFTER_ENTER)\n\n        },\n        failure\n      )\n    },\n\n    changeComponent = function (options: YoxOptions) {\n      callHook(\n        HOOK_BEFORE_LEAVE,\n        function () {\n          if (currentComponent.root) {\n            currentComponent.root.destroy()\n            currentComponent.root = UNDEFINED\n          }\n          callHook(HOOK_AFTER_LEAVE)\n          createComponent(options)\n        },\n        failure\n      )\n    }\n\n    if (currentComponent.name !== component) {\n      currentComponent.name = component\n    }\n\n    store.component(\n      component,\n      function (options: YoxOptions) {\n        // 当连续调用此方法，且可能出现异步组件时\n        // 执行到这 name 不一定会等于 currentComponent.name\n        // 因此需要强制保证一下\n        if (component !== currentComponent.name) {\n          return\n        }\n\n        if (currentComponent.root) {\n          // 当前根组件还活着，并且还要切到当前根组件，表示刷新一下\n          if (currentComponent.options === options) {\n            callHook(\n              HOOK_REFRESHING,\n              function () {\n                // 如果 refreshing 钩子调用了 next()\n                // 表示要销毁重建当前根组件\n                changeComponent(options)\n              },\n              failure\n            )\n          }\n          // 切换到其他组件\n          else {\n            changeComponent(options)\n          }\n        }\n        // 第一次创建组件\n        else {\n          createComponent(options)\n        }\n\n      }\n    )\n\n  }\n\n  /**\n   * 启动路由\n   */\n  start(el: string | Element) {\n    if (Yox.is.string(el)) {\n      const element = domApi.find(el as string)\n      if (element) {\n        this.el = element\n      }\n    }\n    else {\n      this.el = el as Element\n    }\n    domApi.on(window, 'hashchange', this.onHashChange as type.listener)\n    this.onHashChange()\n  }\n\n  /**\n   * 停止路由\n   */\n  stop() {\n    this.el = UNDEFINED\n    domApi.off(window, 'hashchange', this.onHashChange as type.listener)\n  }\n\n}\n\n/**\n * 版本\n */\nexport const version = process.env.NODE_VERSION\n\n/**\n * 注册全局组件，路由实例可共享\n */\nexport function register(\n  name: string | Record<string, type.component>,\n  component?: type.component\n): void {\n  store.component(name, component)\n}\n\n/**\n * 安装插件\n */\nexport function install(Class: YoxClass): void {\n  Yox = Class\n  store = new Class()\n  domApi = Class.dom as API\n}\n"],"names":[],"mappings":"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"}