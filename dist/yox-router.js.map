{"version":3,"file":"yox-router.js","sources":["../src/index.ts"],"sourcesContent":["import * as type from '../../yox-type/src/type'\n\nimport API from '../../yox-type/src/interface/API'\nimport Yox from '../../yox-type/src/interface/Yox'\nimport PropRule from '../../yox-type/src/interface/PropRule'\nimport YoxClass from '../../yox-type/src/interface/YoxClass'\nimport Task from '../../yox-type/src/interface/Task'\nimport YoxOptions from '../../yox-type/src/options/Yox'\nimport VNode from '../../yox-type/src/vnode/VNode'\nimport Directive from '../../yox-type/src/vnode/Directive'\nimport CustomEvent from '../../yox-type/src/event/CustomEvent'\n\nlet Yox: YoxClass, registry: Yox, domApi: API\n\nconst UNDEFINED = void 0,\n\nOUTLET = '$outlet',\n\nROUTE = '$route',\n\nROUTER = '$router',\n\nCOMPONENT = 'RouteComponent',\n\n// 点击事件\nEVENT_CLICK = 'click',\n\n// hash 前缀，Google 的规范是 #! 开头，如 #!/path/sub?key=value\nPREFIX_HASH = '#!',\n\n// path 中的参数前缀，如 #!/user/:userId\nPREFIX_PARAM = ':',\n\n// path 分隔符\nSEPARATOR_PATH = '/',\n\n// query 分隔符\nSEPARATOR_QUERY = '&',\n\n// 键值对分隔符\nSEPARATOR_PAIR = '=',\n\n// 参数中的数组标识\nFLAG_ARRAY = '[]',\n\n// 导航钩子 - 路由进入之前\nHOOK_BEFORE_ENTER = 'beforeEnter',\n\n// 导航钩子 - 路由进入之后\nHOOK_AFTER_ENTER = 'afterEnter',\n\n// 导航钩子 - 路由离开之前\nHOOK_BEFORE_LEAVE = 'beforeLeave',\n\n// 导航钩子 - 路由离开之后\nHOOK_AFTER_LEAVE = 'afterLeave'\n\ninterface RouteTarget {\n  name?: string\n  path?: string\n  params?: type.data\n  query?: type.data\n}\n\ntype Target = string | RouteTarget\n\ntype Next = (value?: false | Target) => void\n\ntype Success = () => void\n\ntype Failure = (value: false | Target) => void\n\ntype BeforeHook = (to: Location, from: Location | void, next: Next) => void\n\ntype AfterHook = (to: Location, from: Location | void) => void\n\ninterface RouterOptions {\n  el: Element\n  routes: RouteOptions[]\n  route404: RouteOptions\n}\n\ninterface RouteOptions {\n  path: string\n  component: string\n  name?: string\n  children?: RouteOptions[]\n  [HOOK_BEFORE_ENTER]?: BeforeHook\n  [HOOK_AFTER_ENTER]?: AfterHook\n  [HOOK_BEFORE_LEAVE]?: BeforeHook\n  [HOOK_AFTER_LEAVE]?: AfterHook\n}\n\ninterface LinkedRoute {\n  path: string\n  component: string\n  route: RouteOptions\n  params?: string[]\n  options?: YoxOptions\n  context?: Yox\n  parent?: LinkedRoute\n  child?: LinkedRoute\n  onCreate?: () => void\n  onDestroy?: () => void\n}\n\ninterface Hash {\n  realpath: string\n  route?: LinkedRoute\n  params?: type.data\n  query?: type.data\n}\n\ninterface Location {\n  path: string\n  params?: type.data\n  query?: type.data\n}\n\n/**\n * 把字符串 value 解析成最合适的类型\n */\nfunction parseValue(value: string) {\n  let result: any\n  if (Yox.is.numeric(value)) {\n    result = +value\n  }\n  else if (Yox.is.string(value)) {\n    if (value === 'true') {\n      result = true\n    }\n    else if (value === 'false') {\n      result = false\n    }\n    else if (value === 'null') {\n      result = null\n    }\n    else if (value === 'undefined') {\n      result = UNDEFINED\n    }\n    else {\n      result = decodeURIComponent(value)\n    }\n  }\n  return result\n}\n\n/**\n * 把 key value 序列化成合适的 key=value 格式\n */\nfunction stringifyPair(key: string, value: any) {\n  let result = [key]\n  if (Yox.is.string(value)) {\n    result.push(\n      encodeURIComponent(value)\n    )\n  }\n  else if (Yox.is.number(value) || Yox.is.boolean(value)) {\n    result.push(\n      value.toString()\n    )\n  }\n  else if (value === null) {\n    result.push(\n      'null'\n    )\n  }\n  else if (value === UNDEFINED) {\n    result.push(\n      'undefined'\n    )\n  }\n  return result.join(SEPARATOR_PAIR)\n}\n\n/**\n * 把 GET 参数解析成对象\n */\nfunction parseQuery(query: string) {\n  let result: Object | undefined\n  Yox.array.each(\n    query.split(SEPARATOR_QUERY),\n    function (term) {\n\n      let terms = term.split(SEPARATOR_PAIR),\n\n      key = Yox.string.trim(terms[0]),\n\n      value = terms[1]\n\n      if (key) {\n        if (!result) {\n          result = {}\n        }\n        value = parseValue(value)\n        if (Yox.string.endsWith(key, FLAG_ARRAY)) {\n          key = Yox.string.slice(key, 0, -FLAG_ARRAY.length)\n          Yox.array.push(\n            result[key] || (result[key] = []),\n            value\n          )\n        }\n        else {\n          result[key] = value\n        }\n      }\n\n    }\n  )\n  return result\n}\n\n/**\n * 把对象解析成 key1=value1&key2=value2\n */\nfunction stringifyQuery(query: Object) {\n  const result: string[] = []\n  for (let key in query) {\n    const value = query[key]\n    if (Yox.is.array(value)) {\n      Yox.array.each(\n        value,\n        function (value) {\n          result.push(\n            stringifyPair(key + FLAG_ARRAY, value)\n          )\n        }\n      )\n    }\n    else {\n      result.push(\n        stringifyPair(key, value)\n      )\n    }\n  }\n  return result.join(SEPARATOR_QUERY)\n}\n\n/**\n * 解析 path 中的参数\n */\nfunction parseParams(realpath: string, path: string) {\n\n  let result: Object | undefined,\n\n  realpathTerms = realpath.split(SEPARATOR_PATH),\n\n  pathTerms = path.split(SEPARATOR_PATH)\n\n  if (realpathTerms.length === pathTerms.length) {\n    Yox.array.each(\n      pathTerms,\n      function (item, index) {\n        if (Yox.string.startsWith(item, PREFIX_PARAM)) {\n          if (!result) {\n            result = {}\n          }\n          result[item.substr(PREFIX_PARAM.length)] = parseValue(realpathTerms[index])\n        }\n      }\n    )\n  }\n\n  return result\n\n}\n\n/**\n * 通过 realpath 获取配置的路由\n */\nfunction getRouteByRealpath(routes: LinkedRoute[], realpath: string) {\n\n  let result: LinkedRoute | undefined,\n\n  realpathTerms = realpath.split(SEPARATOR_PATH),\n\n  length = realpathTerms.length\n\n  Yox.array.each(\n    routes,\n    function (route) {\n      if (route.params) {\n        const pathTerms = route.path.split(SEPARATOR_PATH)\n        if (length === pathTerms.length) {\n          for (let i = 0; i < length; i++) {\n            // 非参数段不相同\n            if (!Yox.string.startsWith(pathTerms[i], PREFIX_PARAM)\n              && pathTerms[i] !== realpathTerms[i]\n            ) {\n              return\n            }\n          }\n          result = route\n          return false\n        }\n      }\n      else if (route.path === realpath) {\n        result = route\n        return false\n      }\n    }\n  )\n\n  return result\n\n}\n\n/**\n * 完整解析 hash 数据\n */\nfunction parseHash(routes: LinkedRoute[], hash: string) {\n\n  let realpath: string, search: string | void, index = hash.indexOf('?')\n\n  if (index >= 0) {\n    realpath = hash.substring(0, index)\n    search = hash.substring(index + 1)\n  }\n  else {\n    realpath = hash\n  }\n\n  const result: Hash = { realpath },\n\n  route = getRouteByRealpath(routes, realpath)\n\n  if (route) {\n    result.route = route\n    if (route.params) {\n      const params = parseParams(realpath, route.path)\n      if (params) {\n        result.params = params\n      }\n    }\n    if (search) {\n      const query = parseQuery(search)\n      if (query) {\n        result.query = query\n      }\n    }\n  }\n\n  return result\n}\n\n/**\n * 把结构化数据序列化成 hash\n */\nfunction stringifyHash(path: string, params: Object | void, query: Object | void) {\n\n  let terms: string[] = [], realpath: string, search = ''\n\n  Yox.array.each(\n    path.split(SEPARATOR_PATH),\n    function (item) {\n      terms.push(\n        Yox.string.startsWith(item, PREFIX_PARAM)\n          ? params[item.substr(PREFIX_PARAM.length)]\n          : item\n      )\n    }\n  )\n\n  realpath = terms.join(SEPARATOR_PATH)\n\n  if (query) {\n    const queryStr = stringifyQuery(query)\n    if (queryStr) {\n      search = '?' + queryStr\n    }\n  }\n\n  return realpath + search\n\n}\n\n/**\n * 格式化路径，确保它以 / 开头，不以 / 结尾\n */\nfunction formatPath(path: string, parentPath: string | void) {\n\n  // 如果 path 以 / 结尾，删掉它\n  // 比如 { path: 'index/' }\n  if (Yox.string.endsWith(path, SEPARATOR_PATH)) {\n    path = Yox.string.slice(path, 0, -1)\n  }\n\n  // 如果 path 不是以 / 开头，有两种情况：\n  // 1. 没有上级或上级是 ''，需要自动加 / 前缀\n  // 2. 相对上级的路径，自动替换最后一个 / 后面的路径\n  if (!Yox.string.startsWith(path, SEPARATOR_PATH)) {\n\n    if (path) {\n      if (Yox.string.falsy(parentPath)) {\n        path = SEPARATOR_PATH + path\n      }\n      else {\n        path = parentPath + SEPARATOR_PATH + path\n      }\n    }\n    else if (parentPath) {\n      path = parentPath\n    }\n\n  }\n\n  return path\n}\n\n/**\n * 按照 propTypes 定义的外部数据格式过滤路由参数，这样有两个好处：\n *\n * 1. 避免传入不符预期的数据\n * 2. 避免覆盖 data 定义的数据\n */\nfunction filterProps(route: LinkedRoute, location: Location, options: YoxOptions) {\n  const result: type.data = {}, propTypes = options.propTypes\n  if (propTypes) {\n\n    let props = location.query,\n\n    routeParams = route.params,\n\n    locationParams = location.params,\n\n    defaultValue: any\n\n    // 从 location.params 挑出 route.params 参数\n    if (routeParams && locationParams) {\n      if (!props) {\n        props = {}\n      }\n      for (let i = 0, key: string; key = routeParams[i]; i++) {\n        props[key] = locationParams[key]\n      }\n    }\n\n    if (props) {\n      for (let key in propTypes) {\n        defaultValue = Yox.checkProp(props, key, propTypes[key])\n        result[key] = defaultValue !== UNDEFINED\n          ? defaultValue\n          : props[key]\n      }\n    }\n\n  }\n  return result\n}\n\n// 钩子函数的调用链\nclass Hooks {\n\n  name: string\n\n  to: Location\n\n  from: Location | void\n\n  list: Task[]\n\n  constructor(to: Location, from: Location | void) {\n    this.to = to\n    this.from = from\n  }\n\n  reset(name: string) {\n    this.name = name\n    this.list = []\n    return this\n  }\n\n  add(target: Object | void, ctx: any) {\n    const { name, list } = this\n    if (target && Yox.is.func(target[name])) {\n      list.push({\n        fn: target[name] as Function,\n        ctx,\n      })\n    }\n    return this\n  }\n\n  run(success: Success | void, failure: Failure | void) {\n\n    const { to, from, list } = this\n\n    if (!from || from.path !== to.path) {\n      const next = function (value?: false | Target) {\n        if (value === UNDEFINED) {\n          const task = list.shift()\n          if (task) {\n            task.fn.call(task.ctx, to, from, next)\n          }\n          else if (success) {\n            success()\n          }\n        }\n        else if (failure) {\n          failure(value)\n        }\n      }\n      next()\n    }\n    else if (success) {\n      success()\n    }\n\n  }\n\n}\n\nexport class Router {\n\n  el: Element\n\n  routes: LinkedRoute[]\n\n  route404: LinkedRoute\n\n  name2Path: Record<string, string>\n\n  path2Route: Record<string, LinkedRoute>\n\n  // 路由或参数发生了变化会触发此函数\n  onChange: Function\n\n  // 当前渲染的路由\n  route?: LinkedRoute\n\n  // 当前地址栏的路径和参数\n  location?: Location\n\n  [HOOK_BEFORE_LEAVE]?: BeforeHook\n\n  [HOOK_BEFORE_ENTER]?: BeforeHook\n\n  [HOOK_AFTER_ENTER]?: AfterHook\n\n  [HOOK_AFTER_LEAVE]?: AfterHook\n\n  constructor(options: RouterOptions) {\n\n    const instance = this,\n\n    route404 = options.route404,\n\n    routes: LinkedRoute[] = [],\n\n    name2Path = {},\n\n    path2Route = {}\n\n    instance.el = options.el\n\n    /**\n     * hashchange 事件处理函数\n     * 此函数必须写在实例上，不能写在类上\n     * 否则一旦解绑，所有实例都解绑了\n     */\n    instance.onChange = function () {\n\n      let hashStr = location.hash\n\n      // 如果不以 PREFIX_HASH 开头，表示不合法\n      hashStr = Yox.string.startsWith(hashStr, PREFIX_HASH)\n        ? hashStr.substr(PREFIX_HASH.length)\n        : ''\n\n      const hash = parseHash(routes, hashStr), { route } = hash\n\n      if (route) {\n        instance.setRoute(\n          {\n            path: route.path,\n            params: hash.params,\n            query: hash.query,\n          },\n          route\n        )\n      }\n      else {\n        instance.push(notFound)\n      }\n\n    }\n\n    let pathStack: any = [], routeStack: any = [],\n\n    callback = function (routeOptions: RouteOptions) {\n\n      let { name, path, component, children } = routeOptions,\n\n      parentPath: string | void = pathStack[pathStack.length - 1],\n\n      parentRoute: LinkedRoute | void = routeStack[routeStack.length - 1]\n\n      path = formatPath(path, parentPath)\n\n      const route: LinkedRoute = { path, component, route: routeOptions },\n\n      params: string[] = []\n\n      Yox.array.each(\n        path.split(SEPARATOR_PATH),\n        function (item, index) {\n          if (Yox.string.startsWith(item, PREFIX_PARAM)) {\n            params.push(\n              item.substr(PREFIX_PARAM.length)\n            )\n          }\n        }\n      )\n\n      if (params.length) {\n        route.params = params\n      }\n\n      if (parentRoute) {\n        route.parent = parentRoute\n      }\n\n      if (children) {\n        pathStack.push(path)\n        routeStack.push(route)\n        Yox.array.each(\n          children,\n          callback\n        )\n        routeStack.pop()\n        pathStack.pop()\n      }\n      else {\n\n        routes.push(route)\n\n        if (name) {\n          if (process.env.NODE_ENV === 'dev') {\n            if (Yox.object.has(name2Path, name)) {\n              Yox.logger.error(`Name[${name}] of the route is existed.`)\n              return\n            }\n          }\n          name2Path[name] = path\n        }\n\n        if (process.env.NODE_ENV === 'dev') {\n          if (Yox.object.has(path2Route, path)) {\n            Yox.logger.error(`path [${path}] of the route is existed.`)\n            return\n          }\n        }\n\n        path2Route[path] = route\n\n      }\n\n    }\n\n    Yox.array.each(\n      options.routes,\n      callback\n    )\n\n    pathStack = routeStack = UNDEFINED\n\n    if (process.env.NODE_ENV === 'dev') {\n      if (!route404) {\n        Yox.logger.error(`Route for 404 is required.`)\n        return\n      }\n    }\n\n    const notFound = {\n      path: formatPath(route404.path),\n      route: route404,\n      component: route404.component,\n    }\n\n    routes.push(notFound)\n    path2Route[notFound.path] = notFound\n\n    instance.route404 = notFound\n\n    instance.routes = routes\n    instance.path2Route = path2Route\n\n    instance.name2Path = name2Path\n\n  }\n\n  /**\n   * 真正执行路由切换操作的函数\n   *\n   * target 有 2 种格式：\n   *\n   * 如果只是简单的 path，直接传字符串\n   *\n   * push('/index')\n   *\n   * 如果需要带参数，可传对象\n   *\n   * push({\n   *   path: '/index',\n   *   params: { },\n   *   query: { }\n   * })\n   *\n   * 如果路由配置了 name，可用 name 代替 path，如下：\n   *\n   * push({\n   *   name: 'index'\n   * })\n   *\n   */\n  push(target: Target) {\n\n    let path: string, params: type.data | void, query: type.data | void\n\n    if (Yox.is.string(target)) {\n      path = target as string\n    }\n    else {\n      params = (target as RouteTarget).params\n      query = (target as RouteTarget).query\n\n      const name = (target as RouteTarget).name\n      if (name) {\n        path = this.name2Path[name]\n        if (process.env.NODE_ENV === 'dev') {\n          if (!Yox.is.string(path)) {\n            Yox.logger.error(`Name[${name}] of the route is not found.`)\n            return\n          }\n        }\n      }\n      else {\n        path = (target as RouteTarget).path as string\n      }\n    }\n\n    this.setHash(path, params, query)\n\n  }\n\n  setHash(path: string, params: Object | void, query: Object | void) {\n\n    path = formatPath(path)\n\n    if (!this.path2Route[path]) {\n      path = this.route404.path\n    }\n\n    location.hash = PREFIX_HASH + stringifyHash(path, params, query)\n\n  }\n\n  /**\n   * 启动路由\n   */\n  start() {\n    domApi.on(window, 'hashchange', this.onChange as type.listener)\n    this.onChange()\n  }\n\n  /**\n   * 停止路由\n   */\n  stop() {\n    domApi.off(window, 'hashchange', this.onChange as type.listener)\n  }\n\n  guard(hooks: Hooks, route: LinkedRoute, name: string, success: Success | void, failure: Failure | void) {\n    hooks\n      .reset(name)\n      // 先调用组件的钩子\n      .add(route.options, route.context)\n      // 再调用路由配置的钩子\n      .add(route.route, route.route)\n      // 最后调用路由实例的钩子\n      .add(this, this)\n      .run(success, failure)\n  }\n\n  /**\n   * 切换路由\n   */\n  private setRoute(location: Location, route: LinkedRoute) {\n\n    let instance = this,\n\n    oldRoute = instance.route,\n\n    newRoute = Yox.object.copy(route),\n\n    oldLocation = instance.location,\n\n    hooks = new Hooks(location, oldLocation),\n\n    childRoute: LinkedRoute | void,\n\n    startRoute: LinkedRoute | void,\n\n    failure: Failure = function (value: false | Target) {\n      if (value === false) {\n        // 流程到此为止，恢复到当前路由\n        if (oldLocation\n          && Yox.is.string(oldLocation.path)\n        ) {\n          instance.setHash(\n            oldLocation.path as string,\n            oldLocation.params,\n            oldLocation.query\n          )\n        }\n      }\n      else {\n        // 跳转到别的路由\n        instance.push(value)\n      }\n    },\n\n    // 对比新旧两个路由链表\n    diffRoute = function (newRoute: LinkedRoute, oldRoute: LinkedRoute | void, callback: (route: LinkedRoute) => void) {\n\n      // 不论是同步还是异步组件，都可以通过 registry.loadComponent 取到 options\n      registry.loadComponent(\n        newRoute.component,\n        function (options) {\n\n          newRoute.options = options\n\n          // 更新链路\n          if (childRoute) {\n            newRoute.child = childRoute\n            childRoute.parent = newRoute\n          }\n\n          childRoute = newRoute\n\n          if (oldRoute) {\n            // 同级的两个组件不同，疑似起始更新的路由\n            if (oldRoute.options !== options) {\n              startRoute = newRoute\n            }\n            else {\n              // 把上次的组件实例搞过来\n              newRoute.context = oldRoute.context\n            }\n          }\n          else {\n            startRoute = newRoute\n          }\n\n          if (newRoute.parent) {\n            diffRoute(\n              Yox.object.copy(newRoute.parent),\n              oldRoute ? oldRoute.parent : UNDEFINED,\n              callback\n            )\n            return\n          }\n\n          // 到达根组件，结束\n          callback(newRoute)\n\n        }\n      )\n    },\n\n    updateRoute = function (route: LinkedRoute) {\n\n      // 从上往下更新 props\n      while (true) {\n\n        let { parent, context, component, options, onCreate } = route\n\n        if (route === startRoute) {\n\n          if (parent) {\n\n            context = parent.context as Yox\n            context.forceUpdate(\n              filterProps(parent, location, parent.options as YoxOptions)\n            )\n\n            context = context[OUTLET]\n            if (context) {\n              const props = {}\n              props[COMPONENT] = component\n              context[ROUTE] = route\n              context.component(component, options)\n              context.forceUpdate(props)\n            }\n\n          }\n          else {\n\n            if (context) {\n              context.destroy()\n              const onDestroy = context[ROUTE].onDestroy\n              onDestroy && onDestroy()\n            }\n\n            // 每层路由组件都有 $route 和 $router 属性\n            const extensions = {}\n            extensions[ROUTER] = instance\n            extensions[ROUTE] = route\n\n            route.context = new Yox(\n              Yox.object.extend(\n                {\n                  el: instance.el,\n                  props: filterProps(route, location, options as YoxOptions),\n                  extensions,\n                },\n                options as YoxOptions\n              )\n            )\n\n            onCreate && onCreate()\n\n          }\n\n        }\n\n        else if (context) {\n          context[ROUTE] = route\n          context.forceUpdate(\n            filterProps(route, location, options as YoxOptions)\n          )\n          // 如果 <router-view> 定义在 if 里\n          // 当 router-view 从无到有时，这里要读取最新的 child\n          // 当 router-view 从有到无时，这里要判断它是否存在\n          if (context[OUTLET] && route.child) {\n            route = route.child as LinkedRoute\n            continue\n          }\n        }\n        break\n      }\n    },\n\n    enterRoute = function (callback: (route: LinkedRoute) => void) {\n      instance.guard(\n        hooks,\n        newRoute,\n        HOOK_BEFORE_ENTER,\n        function () {\n\n          instance.route = newRoute\n          instance.location = location\n\n          diffRoute(newRoute, oldRoute, callback)\n\n        },\n        failure\n      )\n    }\n\n    newRoute.onCreate = function () {\n      instance.guard(hooks, newRoute, HOOK_AFTER_ENTER)\n    }\n\n    if (oldRoute) {\n      oldRoute.onDestroy = function () {\n        instance.guard(hooks, oldRoute as LinkedRoute, HOOK_AFTER_LEAVE)\n      }\n      instance.guard(\n        hooks,\n        oldRoute,\n        HOOK_BEFORE_LEAVE,\n        function () {\n          enterRoute(updateRoute)\n        },\n        failure\n      )\n    }\n    else {\n      enterRoute(updateRoute)\n    }\n\n  }\n\n}\n\nconst directive = {\n  bind(node: HTMLElement | Yox, directive: Directive, vnode: VNode) {\n\n    // 当前组件如果是根组件，则没有 $root 属性\n    const $root = vnode.context.$root || vnode.context,\n\n    router: Router = $root[ROUTER],\n\n    listener = function (_: CustomEvent) {\n      const value = directive.getter && directive.getter()\n      router.push(value != null ? value : directive.value)\n    }\n\n    if (vnode.isComponent) {\n      (node as Yox).on(EVENT_CLICK, listener)\n      vnode.data[directive.key] = function () {\n        (node as Yox).off(EVENT_CLICK, listener)\n      }\n    }\n    else {\n      domApi.on(node as HTMLElement, EVENT_CLICK, listener)\n      vnode.data[directive.key] = function () {\n        domApi.off(node as HTMLElement, EVENT_CLICK, listener)\n      }\n    }\n\n  },\n  unbind(node: HTMLElement | Yox, directive: Directive, vnode: VNode) {\n    vnode.data[directive.key]()\n  },\n}\n\nconst RouterView: YoxOptions = {\n  template: '<$' + COMPONENT + '/>',\n  beforeCreate(options) {\n\n    const $parent = options.parent as Yox,\n\n    route = $parent[ROUTE].child as LinkedRoute\n\n    if (route) {\n\n      $parent[OUTLET] = this\n\n      const props = {}, components = {}\n\n      props[COMPONENT] = route.component\n      components[route.component] = route.options\n\n      options.props = props\n      options.components = components\n\n    }\n\n  },\n  beforeDestroy() {\n    this.$parent[OUTLET] = UNDEFINED\n  },\n  beforeChildCreate(childOptions: YoxOptions) {\n\n    const { $parent } = this,\n\n    router = $parent[ROUTER] as Router,\n\n    route = $parent[ROUTE].child as LinkedRoute,\n\n    extensions = {}\n\n    extensions[ROUTE] = route\n    extensions[ROUTER] = router\n\n    if (router.location) {\n      childOptions.props = filterProps(route, router.location, childOptions)\n    }\n\n    childOptions.extensions = extensions\n\n  },\n  afterChildCreate(child: Yox) {\n    const route = child[ROUTE] as LinkedRoute\n    if (route) {\n      route.context = child\n      route.onCreate && route.onCreate()\n    }\n  },\n  beforeChildDestroy(child: Yox) {\n    const route = child[ROUTE] as LinkedRoute\n    if (route) {\n      route.onDestroy && route.onDestroy()\n      route.context = UNDEFINED\n    }\n  }\n}\n\n/**\n * 版本\n */\nexport const version = process.env.NODE_VERSION\n\n/**\n * 注册全局组件，路由实例可共享\n */\nexport function register(\n  name: string | Record<string, type.component>,\n  component?: type.component\n): void {\n  registry.component(name, component)\n}\n\n/**\n * 安装插件\n */\nexport function install(Class: YoxClass): void {\n\n  Yox = Class\n  registry = new Class()\n  domApi = Class.dom as API\n\n  Yox.directive('href', directive)\n\n  // 提供两种风格\n  Yox.component({\n    RouterView: RouterView,\n    'router-view': RouterView,\n  })\n\n}\n"],"names":[],"mappings":"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"}